Prompt Tuning ⚙️
This page provides an overview of the prompt tuning options available for the GraphRAG indexing engine.

Default Prompts
The default prompts are the simplest way to get started with the GraphRAG system. It is designed to work out-of-the-box with minimal configuration. You can find more detail about these prompts in the following links:

Entity/Relationship Extraction
Entity/Relationship Description Summarization
Claim Extraction
Community Reports
Auto Templating
Auto Templating leverages your input data and LLM interactions to create domain adaptive templates for the generation of the knowledge graph. It is highly encouraged to run it as it will yield better results when executing an Index Run. For more details about how to use it, please refer to the Auto Templating documentation.

Manual Configuration
Manual configuration is an advanced use-case. Most users will want to use the Auto Templating feature instead. Details about how to use manual configuration are available in the Manual Prompt Configuration documentation.

Prompt Tuning ⚙️
GraphRAG provides the ability to create domain adaptive templates for the generation of the knowledge graph. This step is optional, though it is highly encouraged to run it as it will yield better results when executing an Index Run.

The templates are generated by loading the inputs, splitting them into chunks (text units) and then running a series of LLM invocations and template substitutions to generate the final prompts. We suggest using the default values provided by the script, but in this page you'll find the detail of each in case you want to further explore and tweak the template generation algorithm.

Prerequisites
Before running the automatic template generation make sure you have already initialized your workspace with the graphrag.index --init command. This will create the necessary configuration files and the default prompts. Refer to the Init Documentation for more information about the initialization process.

Usage
You can run the main script from the command line with various options:

python -m graphrag.prompt_tune [--root ROOT] [--domain DOMAIN]  [--method METHOD] [--limit LIMIT] [--language LANGUAGE] [--max-tokens MAX_TOKENS] [--chunk-size CHUNK_SIZE] [--no-entity-types] [--output OUTPUT]

Command-Line Options
--root (optional): The data project root directory, including the config files (YML, JSON, or .env). Defaults to the current directory.

--domain (optional): The domain related to your input data, such as 'space science', 'microbiology', or 'environmental news'. If left empty, the domain will be inferred from the input data.

--method (optional): The method to select documents. Options are all, random, or top. Default is random.

--limit (optional): The limit of text units to load when using random or top selection. Default is 15.

--language (optional): The language to use for input processing. If it is different from the inputs' language, the LLM will translate. Default is "" meaning it will be automatically detected from the inputs.

--max-tokens (optional): Maximum token count for prompt generation. Default is 2000.

--chunk-size (optional): The size in tokens to use for generating text units from input documents. Default is 200.

--no-entity-types (optional): Use untyped entity extraction generation. We recommend using this when your data covers a lot of topics or it is highly randomized.

--output (optional): The folder to save the generated prompts. Default is "prompts".

Example Usage
python -m graphrag.prompt_tune --root /path/to/project --domain "environmental news" --method random --limit 10 --language English --max-tokens 2048 --chunk-size 256 --no-entity-types --output /path/to/output

or, with minimal configuration (suggested):

python -m graphrag.prompt_tune --root /path/to/project --no-entity-types

Document Selection Methods
The auto template feature ingests the input data and then divides it into text units the size of the chunk size parameter. After that, it uses one of the following selection methods to pick a sample to work with for template generation:

random: Select text units randomly. This is the default and recommended option.
top: Select the head n text units.
all: Use all text units for the generation. Use only with small datasets; this option is not usually recommended.
Modify Env Vars
After running auto-templating, you should modify the following environment variables (or config variables) to pick up the new prompts on your index run. Note: Please make sure to update the correct path to the generated prompts, in this example we are using the default "prompts" path.

GRAPHRAG_ENTITY_EXTRACTION_PROMPT_FILE = "prompts/entity_extraction.txt"

GRAPHRAG_COMMUNITY_REPORT_PROMPT_FILE = "prompts/community_report.txt"

GRAPHRAG_SUMMARIZE_DESCRIPTIONS_PROMPT_FILE = "prompts/summarize_descriptions.txt"

Prompt Tuning⚙️
The GraphRAG indexer, by default, will run with a handful of prompts that are designed to work well in the broad context of knowledge discovery. However, it is quite common to want to tune the prompts to better suit your specific use case. We provide a means for you to do this by allowing you to specify a custom prompt file, which will each use a series of token-replacements internally.

Each of these prompts may be overridden by writing a custom prompt file in plaintext. We use token-replacements in the form of {token_name}, and the descriptions for the available tokens can be found below.

Entity/Relationship Extraction
Prompt Source

Tokens (values provided by extractor)
{input_text} - The input text to be processed.
{entity_types} - A list of entity types
{tuple_delimiter} - A delimiter for separating values within a tuple. A single tuple is used to represent an individual entity or relationship.
{record_delimiter} - A delimiter for separating tuple instances.
{completion_delimiter} - An indicator for when generation is complete.
Summarize Entity/Relationship Descriptions
Prompt Source

Tokens (values provided by extractor)
{entity_name} - The name of the entity or the source/target pair of the relationship.
{description_list} - A list of descriptions for the entity or relationship.
Claim Extraction
Prompt Source

Tokens (values provided by extractor)
{input_text} - The input text to be processed.
{tuple_delimiter} - A delimiter for separating values within a tuple. A single tuple is used to represent an individual entity or relationship.
{record_delimiter} - A delimiter for separating tuple instances.
{completion_delimiter} - An indicator for when generation is complete.
Note: there is additional paramater for the Claim Description that is used in claim extraction. The default value is

"Any claims or facts that could be relevant to information discovery."

See the configuration documentation for details on how to change this.

Generate Community Reports
Prompt Source

Tokens (values provided by extractor)
{input_text} - The input text to generate the report with. This will contain tables of entities and relationships.