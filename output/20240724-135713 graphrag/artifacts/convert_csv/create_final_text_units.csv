id,text,n_tokens,document_ids,entity_ids,relationship_ids
4cf772ca8a1ffad729902e9b630e1ec0,"Developing GraphRAG
Requirements
Name	Installation	Purpose
Python 3.10-3.12	Download	The library is Python-based.
Poetry	Instructions	Poetry is used for package management and virtualenv management in Python codebases
Getting Started
Install Dependencies
# Install Python dependencies.
poetry install

Execute the Indexing Engine
poetry run poe index <...args>

Executing Queries
poetry run poe query <...args>

Azurite
Some unit and smoke tests use Azurite to emulate Azure resources. This can be started by running:

./scripts/start-azurite.sh

or by simply running azurite in the terminal if already installed globally. See the Azurite documentation for more information about how to install and use Azurite.

Lifecycle Scripts
Our Python package utilizes Poetry to manage dependencies and poethepoet to manage build scripts.

Available scripts are:

poetry run poe index - Run the Indexing CLI
poetry run poe query - Run the Query CLI
poetry build - This invokes poetry build, which will build a wheel file and other distributable artifacts.
poetry run poe test - This will execute all tests.
poetry run poe test_unit - This will execute unit tests.
poetry run poe test_integration - This will execute integration tests.
poetry run poe test_smoke - This will execute smoke tests.
poetry run poe check - This will",300,['1360b438089091252bb82ed740bce5a6'],"['b45241d70f0e43fca764df95b2b81f77' '4119fd06010c494caa07f439b333f4c5'
 'd3835bf3dda84ead99deadbeac5d0d7d' '077d2820ae1845bcbb1803379a3d1eae'
 '3671ea0dd4e84c1a9b02c5ab2c8f4bac' '19a7f254a5d64566ab5cc15472df02de'
 'e7ffaee9d31d4d3c96e04f911d0a8f9e']","['a87aa935dccf49cd98b40fb5afe7ad5c' '4fe3ff52700c491f8cc650aadb4d7cb0'
 'f1f6f6435a444e388d67e16e847afca6' '0af2ca1c090843ea92679fd14c1fbc9a'
 '1b06d3e53ffd4771952fbef04d1e666c']"
563caa38fe33c495449888d62950b959," CLI
poetry run poe query - Run the Query CLI
poetry build - This invokes poetry build, which will build a wheel file and other distributable artifacts.
poetry run poe test - This will execute all tests.
poetry run poe test_unit - This will execute unit tests.
poetry run poe test_integration - This will execute integration tests.
poetry run poe test_smoke - This will execute smoke tests.
poetry run poe check - This will perform a suite of static checks across the package, including:
formatting
documentation formatting
linting
security patterns
type-checking
poetry run poe fix - This will apply any available auto-fixes to the package. Usually this is just formatting fixes.
poetry run poe fix_unsafe - This will apply any available auto-fixes to the package, including those that may be unsafe.
poetry run poe format - Explicitly run the formatter across the package.
Troubleshooting
""RuntimeError: llvm-config failed executing, please point LLVM_CONFIG to the path for llvm-config"" when running poetry install
Make sure llvm-9 and llvm-9-dev are installed:

sudo apt-get install llvm-9 llvm-9-dev

and then in your bashrc, add

export LLVM_CONFIG=/usr/bin/llvm-config-9

""numba/_pymodule.h:6:10: fatal error: Python.h: No such file or directory"" when running",300,['1360b438089091252bb82ed740bce5a6'],"['f7e11b0e297a44a896dc67928368f600' '1fd3fa8bb5a2408790042ab9573779ee'
 '27f9fbe6ad8c4a8b9acee0d3596ed57c' 'e1fd0e904a53409aada44442f23a51cb'
 'de988724cfdf45cebfba3b13c43ceede' '96aad7cb4b7d40e9b7e13b94a67af206'
 'c9632a35146940c2a86167c7726d35e9' '9646481f66ce4fd2b08c2eddda42fc82'
 'd91a266f766b4737a06b0fda588ba40b' 'bc0e3f075a4c4ebbb7c7b152b65a5625'
 '254770028d7a4fa9877da4ba0ad5ad21' '4a67211867e5464ba45126315a122a8a']","['f0c578614b224345974c3e4c110878af' '7ffb88ebc729492c897ccfb569d7f6d0'
 '60dce7d8bc1b4729a038178a400b9a59' '4cbb4e238c5b4656803fb9b4b6c3512e'
 '652873bcd6d5432187e5deafc4fc5211' '78f9b30c08134ac5abb4f4e0bff0f7f2'
 'f33e4e897b1e422bb516e8a2c941d9dc' 'fac4e1553a9840e990bbfff46e64ff27'
 '029a55d327ee4fb3a8314b36d52bdf34' '5a636c894c384532bff66212cf9d5824'
 'a9c468ef78704e9aabfc0317a5b1b42d']"
0dc1f5e4f8fb5903f12acf8e141fb205,"leshooting
""RuntimeError: llvm-config failed executing, please point LLVM_CONFIG to the path for llvm-config"" when running poetry install
Make sure llvm-9 and llvm-9-dev are installed:

sudo apt-get install llvm-9 llvm-9-dev

and then in your bashrc, add

export LLVM_CONFIG=/usr/bin/llvm-config-9

""numba/_pymodule.h:6:10: fatal error: Python.h: No such file or directory"" when running poetry install
Make sure you have python3.10-dev installed or more generally python<version>-dev

sudo apt-get install python3.10-dev

LLM call constantly exceeds TPM, RPM or time limits
GRAPHRAG_LLM_THREAD_COUNT and GRAPHRAG_EMBEDDING_THREAD_COUNT are both set to 50 by default. You can modify this values to reduce concurrency. Please refer to the Configuration Documents",187,['1360b438089091252bb82ed740bce5a6'],"['04dbbb2283b845baaeac0eaf0c34c9da' '1943f245ee4243bdbfbd2fd619ae824a'
 '273daeec8cad41e6b3e450447db58ee7' 'e69dc259edb944ea9ea41264b9fcfe59'
 'e2f5735c7d714423a2c4f61ca2644626' 'deece7e64b2a4628850d4bb6e394a9c3'
 'e657b5121ff8456b9a610cfaead8e0cb' 'bf4e255cdac94ccc83a56435a5e4b075'
 '3b040bcc19f14e04880ae52881a89c1c']","['5df80c25d33a4d148a14aa614343cc6b' '6a87f06ed55a46f29b24f77e548a3f1d'
 '0daf88ac4ec94cbb868e27e956c6d7f1' '9ed120043e6247be9965e4904920991b'
 '94d81d7de9254ae4b3b16fcc69aa22ea' '60c9212246f84ae5b6ab254127a39262'
 '0f8d0c36a4274526a9eddedae5e63881']"
e6fa3bdaf65c92df6b3430f02804321a,"Welcome to GraphRAG
üëâ Microsoft Research Blog Post
üëâ GraphRAG Accelerator
üëâ GitHub Repository
üëâ GraphRAG Arxiv

Figure 1: LLM-generated knowledge graph built from a private dataset using GPT-4 Turbo.

Figure 1: An LLM-generated knowledge graph built using GPT-4 Turbo.

GraphRAG is a structured, hierarchical approach to Retrieval Augmented Generation (RAG), as opposed to naive semantic-search approaches using plain text snippets. The GraphRAG process involves extracting a knowledge graph out of raw text, building a community hierarchy, generating summaries for these communities, and then leveraging these structures when perform RAG-based tasks.

To learn more about GraphRAG and how it can be used to enhance your LLMs ability to reason about your private data, please visit the Microsoft Research Blog Post.

Solution Accelerator üöÄ
To quickstart the GraphRAG system we recommend trying the Solution Accelerator package. This provides a user-friendly end-to-end experience with Azure resources.

Get Started with GraphRAG üöÄ
To start using GraphRAG, check out the Get Started guide. For a deeper dive into the main sub-systems, please visit the docpages for the Indexer and Query packages.

GraphRAG vs Baseline RAG üîç
Retrieval-Augmented Generation (RAG) is a technique to improve LLM outputs using real-world information.",300,['150280be206221851ba72cf9f14d5667'],"['3d6b216c14354332b1bf1927ba168986' '1c109cfdc370463eb6d537e5b7b382fb'
 '3d0dcbc8971b415ea18065edc4d8c8ef' '68105770b523412388424d984e711917'
 '85c79fd84f5e4f918471c386852204c5' 'eae4259b19a741ab9f9f6af18c4a0470'
 '3138f39f2bcd43a69e0697cd3b05bc4d' 'dde131ab575d44dbb55289a6972be18f'
 'de9e343f2e334d88a8ac7f8813a915e5']","['f1a65d05dd5d456b889217020475ef80' 'c077d92b48b6477db91e1a0460600f52'
 '5ca888df9b884e54accdd2ff29d125c1' '8290a6212d6c4430ae0056c7e8eccd5f'
 '14f8ac195fdb4e06a0b9ebc6ef391180' '667ee58a79194316ae2b82eadd3fc575'
 'b0e3ee2324054c88adacdf80db13278f' '28b7457ca5dc4a38a488946a3f8e207e']"
32603b739bed06b4695b0cc3915b2c4b," Solution Accelerator package. This provides a user-friendly end-to-end experience with Azure resources.

Get Started with GraphRAG üöÄ
To start using GraphRAG, check out the Get Started guide. For a deeper dive into the main sub-systems, please visit the docpages for the Indexer and Query packages.

GraphRAG vs Baseline RAG üîç
Retrieval-Augmented Generation (RAG) is a technique to improve LLM outputs using real-world information. This technique is an important part of most LLM-based tools and the majority of RAG approaches use vector similarity as the search technique, which we call Baseline RAG. GraphRAG uses knowledge graphs to provide substantial improvements in question-and-answer performance when reasoning about complex information. RAG techniques have shown promise in helping LLMs to reason about private datasets - data that the LLM is not trained on and has never seen before, such as an enterprise‚Äôs proprietary research, business documents, or communications. Baseline RAG was created to help solve this problem, but we observe situations where baseline RAG performs very poorly. For example:

Baseline RAG struggles to connect the dots. This happens when answering a question requires traversing disparate pieces of information through their shared attributes in order to provide new synthesized insights.
Baseline RAG performs poorly when being asked to holistically understand summarized semantic concepts over large data collections or even singular large documents.
To address this, the tech community is working to develop methods",300,['150280be206221851ba72cf9f14d5667'],"['3d6b216c14354332b1bf1927ba168986' '3138f39f2bcd43a69e0697cd3b05bc4d'
 'dde131ab575d44dbb55289a6972be18f' 'de9e343f2e334d88a8ac7f8813a915e5'
 'e2bf260115514fb3b252fd879fb3e7be' 'b462b94ce47a4b8c8fffa33f7242acec']","['667ee58a79194316ae2b82eadd3fc575' 'b0e3ee2324054c88adacdf80db13278f'
 '28b7457ca5dc4a38a488946a3f8e207e' '8029a14d15404e6db95ddf5e2bf9fc15'
 '389314ca89d445888c8d4985864dd733']"
d441b136505c273cf3577b6867e872e4," communications. Baseline RAG was created to help solve this problem, but we observe situations where baseline RAG performs very poorly. For example:

Baseline RAG struggles to connect the dots. This happens when answering a question requires traversing disparate pieces of information through their shared attributes in order to provide new synthesized insights.
Baseline RAG performs poorly when being asked to holistically understand summarized semantic concepts over large data collections or even singular large documents.
To address this, the tech community is working to develop methods that extend and enhance RAG. Microsoft Research‚Äôs new approach, GraphRAG, uses LLMs to create a knowledge graph based on an input corpus. This graph, along with community summaries and graph machine learning outputs, are used to augment prompts at query time. GraphRAG shows substantial improvement in answering the two classes of questions described above, demonstrating intelligence or mastery that outperforms other approaches previously applied to private datasets.

The GraphRAG Process ü§ñ
GraphRAG builds upon our prior research and tooling using graph machine learning. The basic steps of the GraphRAG process are as follows:

Index
Slice up an input corpus into a series of TextUnits, which act as analyzable units for the rest of the process, and provide fine-grained references into our outputs.
Extract all entities, relationships, and key claims from the TextUnits using an LLM.
Perform a hierarchical clustering of the graph using the Leiden technique. To see this visually, check out",300,['150280be206221851ba72cf9f14d5667'],"['3d6b216c14354332b1bf1927ba168986' 'b462b94ce47a4b8c8fffa33f7242acec'
 '17ed1d92075643579a712cc6c29e8ddb' '3ce7c210a21b4deebad7cc9308148d86']","['389314ca89d445888c8d4985864dd733' '87fe1462b9064d5692641ab48e826301'
 'a55175ac57014df696ca09d0def9604b']"
369b39fdfd649d6df32a5d7b4cc559b7," our prior research and tooling using graph machine learning. The basic steps of the GraphRAG process are as follows:

Index
Slice up an input corpus into a series of TextUnits, which act as analyzable units for the rest of the process, and provide fine-grained references into our outputs.
Extract all entities, relationships, and key claims from the TextUnits using an LLM.
Perform a hierarchical clustering of the graph using the Leiden technique. To see this visually, check out Figure 1 above. Each circle is an entity (e.g., a person, place, or organization), with the size representing the degree of the entity, and the color representing its community.
Generate summaries of each community and its constituents from the bottom-up. This aids in holistic understanding of the dataset.
Query
At query time, these structures are used to provide materials for the LLM context window when answering a question. The primary query modes are:

Global Search for reasoning about holistic questions about the corpus by leveraging the community summaries.
Local Search for reasoning about specific entities by fanning-out to their neighbors and associated concepts.
Prompt Tuning
Using GraphRAG with your data out of the box may not yield the best possible results. We strongly recommend to fine-tune your prompts following the Prompt Tuning Guide in our documentation.",267,['150280be206221851ba72cf9f14d5667'],"['3d6b216c14354332b1bf1927ba168986' '3ce7c210a21b4deebad7cc9308148d86'
 'd64ed762ea924caa95c8d06f072a9a96' 'adf4ee3fbe9b4d0381044838c4f889c8'
 '32ee140946e5461f9275db664dc541a5' 'c160b9cb27d6408ba6ab20214a2f3f81'
 '23527cd679ff4d5a988d52e7cd056078' 'f1c6eed066f24cbdb376b910fce29ed4']","['a55175ac57014df696ca09d0def9604b' '1766e8858d7b45ed97f71cb5a39e96ea'
 '6191e014f3f64e46a0777063ed4ac19a' '21b0499cf14342269c46170c291d0535'
 'c1ef05b38b3f4d59888150fc0dd26826' '74cb9b3510e84498b9aee0d904316e8b'
 '043d764b2e1b4d1294651ff938df5391']"
849698743b07680402ff8572b1c6c469," corpus by leveraging the community summaries.
Local Search for reasoning about specific entities by fanning-out to their neighbors and associated concepts.
Prompt Tuning
Using GraphRAG with your data out of the box may not yield the best possible results. We strongly recommend to fine-tune your prompts following the Prompt Tuning Guide in our documentation.",67,['150280be206221851ba72cf9f14d5667'],"['3d6b216c14354332b1bf1927ba168986' '32ee140946e5461f9275db664dc541a5'
 '23527cd679ff4d5a988d52e7cd056078' 'f1c6eed066f24cbdb376b910fce29ed4'
 '83a6cb03df6b41d8ad6ee5f6fef5f024']","['74cb9b3510e84498b9aee0d904316e8b' '043d764b2e1b4d1294651ff938df5391'
 'c7e8b188b45841a0a1bcb22f3445ea6e']"
f8cf53ce98a8bc52581f7907ad98ef70,"Query Engine üîé
The Query Engine is the retrieval module of the Graph RAG Library. It is one of the two main components of the Graph RAG library, the other being the Indexing Pipeline (see Indexing Pipeline). It is responsible for the following tasks:

Local Search
Global Search
Question Generation
Local Search
Local search method generates answers by combining relevant data from the AI-extracted knowledge-graph with text chunks of the raw documents. This method is suitable for questions that require an understanding of specific entities mentioned in the documents (e.g. What are the healing properties of chamomile?).

For more details about how Local Search works please refer to the Local Search documentation.

Global Search
Global search method generates answers by searching over all AI-generated community reports in a map-reduce fashion. This is a resource-intensive method, but often gives good responses for questions that require an understanding of the dataset as a whole (e.g. What are the most significant values of the herbs mentioned in this notebook?).

More about this can be checked at the Global Search documentation.

Question Generation
This functionality takes a list of user queries and generates the next candidate questions. This is useful for generating follow-up questions in a conversation or for generating a list of questions for the investigator to dive deeper into the dataset.

Information about how question generation works can be found at the Question Generation documentation page.

Local Search üîé
Entity-based Reasoning
The local search method combines structured data from the knowledge graph",300,['217bd625ebb21f3343be31530abac558'],"['3671ea0dd4e84c1a9b02c5ab2c8f4bac' 'c160b9cb27d6408ba6ab20214a2f3f81'
 '23527cd679ff4d5a988d52e7cd056078' '147c038aef3e4422acbbc5f7938c4ab8'
 'b7702b90c7f24190b864e8c6e64612a5']","['b8e966b34cba4b11b9995106767212ba' 'f6de923de6474d2cab6a9c2f0d81fa59'
 '6915637e8d124fdc8473111d501e3703' '2233f31929194eac89333ce8731a5584']"
364624242a84e1859e758069d914d8c8," in this notebook?).

More about this can be checked at the Global Search documentation.

Question Generation
This functionality takes a list of user queries and generates the next candidate questions. This is useful for generating follow-up questions in a conversation or for generating a list of questions for the investigator to dive deeper into the dataset.

Information about how question generation works can be found at the Question Generation documentation page.

Local Search üîé
Entity-based Reasoning
The local search method combines structured data from the knowledge graph with unstructured data from the input documents to augment the LLM context with relevant entity information at query time. It is well-suited for answering questions that require an understanding of specific entities mentioned in the input documents (e.g., ‚ÄúWhat are the healing properties of chamomile?‚Äù).

Methodology
Entity
Description
Embedding
Entity-Text
Unit Mapping
Ranking +
Filtering
Entity-Report
Mapping
Ranking +
Filtering
Entity-Entity
Relationships
Ranking +
Filtering
Entity-Entity
Relationships
Ranking +
Filtering
Entity-Covariate
Mappings
Ranking +
Filtering
User Query
.1
Conversation
History
Extracted Entities
.2
Candidate
Text Units
Prioritized
Text Units
.3
Candidate
Community Reports
Prioritized
Community Reports
Candidate
Entities
Prioritized
Entities
Candidate
Relationships
Prioritized
Relationships
Candidate
Covariates",300,['217bd625ebb21f3343be31530abac558'],"['23527cd679ff4d5a988d52e7cd056078' 'b7702b90c7f24190b864e8c6e64612a5'
 'de6fa24480894518ab3cbcb66f739266' '6fae5ee1a831468aa585a1ea09095998'
 'ef32c4b208d041cc856f6837915dc1b0' '07b2425216bd4f0aa4e079827cb48ef5'
 '2670deebfa3f4d69bb82c28ab250a209' '404309e89a5241d6bff42c05a45df206'
 'b785a9025069417f94950ad231bb1441' '3b6cd96a27304614850709aba1c9598b']","['bbf4007dc9c0486b8ea76d616045467a' '9535f4d754044e128cd3951a9d2e3702'
 '93b4aa6ce6e44123a861d4c3b3d509a2' '344417f626ef4da4be4539ef4037bf3f'
 '8b1fff87c350475fb1d411a26c3c5b0c' '898a9458adfb4c13a1eafacf6a1068f6'
 '5448f05781de44ea96e3dea40b285842' '76b1e69904b84d09ba05c4b7efc48f32']"
3a0742c280217fe600b9af2d06b58eea,"Ranking +
Filtering
Entity-Entity
Relationships
Ranking +
Filtering
Entity-Covariate
Mappings
Ranking +
Filtering
User Query
.1
Conversation
History
Extracted Entities
.2
Candidate
Text Units
Prioritized
Text Units
.3
Candidate
Community Reports
Prioritized
Community Reports
Candidate
Entities
Prioritized
Entities
Candidate
Relationships
Prioritized
Relationships
Candidate
Covariates
Prioritized
Covariates
Conversation History
Response
Local Search Dataflow
Given a user query and, optionally, the conversation history, the local search method identifies a set of entities from the knowledge graph that are semantically-related to the user input. These entities serve as access points into the knowledge graph, enabling the extraction of further relevant details such as connected entities, relationships, entity covariates, and community reports. Additionally, it also extracts relevant text chunks from the raw input documents that are associated with the identified entities. These candidate data sources are then prioritized and filtered to fit within a single context window of pre-defined size, which is used to generate a response to the user query.

Configuration
Below are the key parameters of the LocalSearch class:

llm: OpenAI model object to be used for response generation
context_builder: context builder object to be used for preparing context data from collections of knowledge model objects
system_prompt: prompt template used to generate the search",300,['217bd625ebb21f3343be31530abac558'],"['d54956b79dd147f894b67a8b97dcbef0' '958beecdb5bb4060948415ffd75d2b03'
 'b999ed77e19e4f85b7f1ae79af5c002a' '48c0c4d72da74ff5bb926fa0c856d1a7'
 '4f3c97517f794ebfb49c4c6315f9cf23' '1745a2485a9443bab76587ad650e9be0'
 '32e6ccab20d94029811127dbbe424c64' '94a964c6992945ebb3833dfdfdc8d655'
 '1eb829d0ace042089f0746f78729696c']","['3f5590a604894d268603b4b27c3348b5' 'aafc13d02ade40adae13d3bee241817a'
 'b69851bf63e34ced83827b0021628543' 'b83a4e11bfa64559954327714b73293f'
 'de23b974cc90497eb4363e26d931a57c' 'a9de65176e234a9f9073b8df9d675e90'
 '09a1bd11eb9347a9b466edad1a562cc5']"
25797740f434cc2bf16365fc498791f6," documents that are associated with the identified entities. These candidate data sources are then prioritized and filtered to fit within a single context window of pre-defined size, which is used to generate a response to the user query.

Configuration
Below are the key parameters of the LocalSearch class:

llm: OpenAI model object to be used for response generation
context_builder: context builder object to be used for preparing context data from collections of knowledge model objects
system_prompt: prompt template used to generate the search response. Default template can be found at system_prompt
response_type: free-form text describing the desired response type and format (e.g., Multiple Paragraphs, Multi-Page Report)
llm_params: a dictionary of additional parameters (e.g., temperature, max_tokens) to be passed to the LLM call
context_builder_params: a dictionary of additional parameters to be passed to the context_builder object when building context for the search prompt
callbacks: optional callback functions, can be used to provide custom event handlers for LLM's completion streaming events
How to Use
An example of a local search scenario can be found in the following notebook.

Question Generation ‚ùî
Entity-based Question Generation
The question generation method combines structured data from the knowledge graph with unstructured data from the input documents to generate candidate questions related to specific entities.

Methodology
Given a list of prior user questions, the question generation method uses the same context-building approach employed in local search to extract and prioritize relevant structured and",300,['217bd625ebb21f3343be31530abac558'],"['015e7b58d1a14b44beab3bbc9f912c18' '26f88ab3e2e04c33a459ad6270ade565'
 'babe97e1d9784cffa1c85abc1e588126']",['11d74eab1dcb4fcba7c45def5f0ee22d' '4f6a6fd018a948f4bd0e630266b8bf61']
1415949832ba3fee570ea961998a8ac4," custom event handlers for LLM's completion streaming events
How to Use
An example of a local search scenario can be found in the following notebook.

Question Generation ‚ùî
Entity-based Question Generation
The question generation method combines structured data from the knowledge graph with unstructured data from the input documents to generate candidate questions related to specific entities.

Methodology
Given a list of prior user questions, the question generation method uses the same context-building approach employed in local search to extract and prioritize relevant structured and unstructured data, including entities, relationships, covariates, community reports and raw text chunks. These data records are then fitted into a single LLM prompt to generate candidate follow-up questions that represent the most important or urgent information content or themes in the data.

Configuration
Below are the key parameters of the Question Generation class:

llm: OpenAI model object to be used for response generation
context_builder: context builder object to be used for preparing context data from collections of knowledge model objects, using the same context builder class as in local search
system_prompt: prompt template used to generate candidate questions. Default template can be found at system_prompt
llm_params: a dictionary of additional parameters (e.g., temperature, max_tokens) to be passed to the LLM call
context_builder_params: a dictionary of additional parameters to be passed to the context_builder object when building context for the question generation prompt
callbacks: optional callback functions, can be used to provide custom event handlers for L",300,['217bd625ebb21f3343be31530abac558'],"['23527cd679ff4d5a988d52e7cd056078' 'b7702b90c7f24190b864e8c6e64612a5'
 '48c0c4d72da74ff5bb926fa0c856d1a7' '1033a18c45aa4584b2aef6ab96890351'
 'c9b8ce91fc2945b4907fe35519339cac' 'fa3c4204421c48609e52c8de2da4c654'
 '53af055f068244d0ac861b2e89376495' 'c03ab3ce8cb74ad2a03b94723bfab3c7'
 'ed6d2eee9d7b4f5db466b1f6404d31cc' 'fc01e9baa80e417c9206f941bb279407'
 '56d0e5ebe79e4814bd1463cf6ca21394' '7c49f2710e8b4d3b8dc9310834406ea5'
 'c6d1e4f56c2843e89cf0b91c10bb6de2']","['bbf4007dc9c0486b8ea76d616045467a' 'ee8414e314f547eeb369849cdb51bac2'
 '9f77aa8888bd4f94abba8a77c4b0565c' 'dcf33412678340319e7ec8f7be267ef9'
 '4aa1e0fa00c048939a5d006bfd305fb4' '03053ab4a9054384a5f5e88d28841621'
 '9fd0f20997d541bca46c4ec9843a5d0f' '27168beee1ff456696c330c9c3b3259f'
 'e1c20e06aeac436788a9c6e918bcb844' '17dbfbecfaf0436bb11ed8f867c0caa1']"
3e143a60e2aeb57eb418a68d1484bbb3," using the same context builder class as in local search
system_prompt: prompt template used to generate candidate questions. Default template can be found at system_prompt
llm_params: a dictionary of additional parameters (e.g., temperature, max_tokens) to be passed to the LLM call
context_builder_params: a dictionary of additional parameters to be passed to the context_builder object when building context for the question generation prompt
callbacks: optional callback functions, can be used to provide custom event handlers for LLM's completion streaming events
How to Use
An example of the question generation function can be found in the following notebook.

Global Search üîé
Whole Dataset Reasoning
Baseline RAG struggles with queries that require aggregation of information across the dataset to compose an answer. Queries such as ‚ÄúWhat are the top 5 themes in the data?‚Äù perform terribly because baseline RAG relies on a vector search of semantically similar text content within the dataset. There is nothing in the query to direct it to the correct information.

However, with GraphRAG we can answer such questions, because the structure of the LLM-generated knowledge graph tells us about the structure (and thus themes) of the dataset as a whole. This allows the private dataset to be organized into meaningful semantic clusters that are pre-summarized. Using our global search method, the LLM uses these clusters to summarize these themes when responding to a user query.

Methodology
Ranking +
Filtering
Shuffled Community
Report Batch",300,['217bd625ebb21f3343be31530abac558'],"['3d6b216c14354332b1bf1927ba168986' 'b462b94ce47a4b8c8fffa33f7242acec'
 'adf4ee3fbe9b4d0381044838c4f889c8' 'c160b9cb27d6408ba6ab20214a2f3f81'
 '23527cd679ff4d5a988d52e7cd056078' '0adb2d9941f34ef7b2f7743cc6225844'
 '6b02373137fd438ba96af28f735cdbdb']","['c1ef05b38b3f4d59888150fc0dd26826' '32dc0b572ad84c75a64a2007788eb981'
 'e1ed13e29ee946d4aaafac50aaa3b68f']"
812b3414c467da0b62f7932d2adcbad4," the correct information.

However, with GraphRAG we can answer such questions, because the structure of the LLM-generated knowledge graph tells us about the structure (and thus themes) of the dataset as a whole. This allows the private dataset to be organized into meaningful semantic clusters that are pre-summarized. Using our global search method, the LLM uses these clusters to summarize these themes when responding to a user query.

Methodology
Ranking +
Filtering
Shuffled Community
Report Batch 1
Shuffled Community
Report Batch 2
Shuffled Community
Report Batch N
RIR
{1..N}
Rated Intermediate
Response N
Rated Intermediate
Response 1
Rated Intermediate
Response 2
User Query
.1
Conversation History
.2
Aggregated Intermediate
Responses
Response
Global Search Dataflow
Given a user query and, optionally, the conversation history, the global search method uses a collection of LLM-generated community reports from a specified level of the graph's community hierarchy as context data to generate response in a map-reduce manner. At the map step, community reports are segmented into text chunks of pre-defined size. Each text chunk is then used to produce an intermediate response containing a list of point, each of which is accompanied by a numerical rating indicating the importance of the point. At the reduce step, a filtered set of the most important points from the intermediate responses are aggregated and used as the context to generate the final response",300,['217bd625ebb21f3343be31530abac558'],"['3d6b216c14354332b1bf1927ba168986' 'd54956b79dd147f894b67a8b97dcbef0'
 '958beecdb5bb4060948415ffd75d2b03' '36a4fcd8efc144e6b8af9a1c7ab8b2ce'
 'fbeef791d19b413a9c93c6608286ab63' 'd2b629c0396f4180a03e16ddf3818589'
 '6102fc6619ed422ebc42588bfa97355d']","['31f2170fef004f3281c533a4a60dc3f3' '57f186c5c2754483ba66750e98222f95'
 '68f998c9c8c34bb7a994de5a998bb9a0' '81a4818e5cf84ea085abf09de385c86e'
 '13cd49512d5642989c2c72bb5e674807']"
1a4bca0786d529c91073997b63412adc," specified level of the graph's community hierarchy as context data to generate response in a map-reduce manner. At the map step, community reports are segmented into text chunks of pre-defined size. Each text chunk is then used to produce an intermediate response containing a list of point, each of which is accompanied by a numerical rating indicating the importance of the point. At the reduce step, a filtered set of the most important points from the intermediate responses are aggregated and used as the context to generate the final response.

The quality of the global search‚Äôs response can be heavily influenced by the level of the community hierarchy chosen for sourcing community reports. Lower hierarchy levels, with their detailed reports, tend to yield more thorough responses, but may also increase the time and LLM resources needed to generate the final response due to the volume of reports.

Configuration
Below are the key parameters of the GlobalSearch class:

llm: OpenAI model object to be used for response generation
context_builder: context builder object to be used for preparing context data from community reports
map_system_prompt: prompt template used in the map stage. Default template can be found at map_system_prompt
reduce_system_prompt: prompt template used in the reduce stage, default template can be found at reduce_system_prompt
response_type: free-form text describing the desired response type and format (e.g., Multiple Paragraphs, Multi-Page Report)
allow_general_knowledge: setting this to True will include additional instructions to the reduce_system_prompt to prompt the",300,['217bd625ebb21f3343be31530abac558'],"['adf4ee3fbe9b4d0381044838c4f889c8' 'ed6d2eee9d7b4f5db466b1f6404d31cc'
 '0adb2d9941f34ef7b2f7743cc6225844' '8d141c0b80f74b79a05eed7fe161fe49'
 'e22d1d1cd8d14f12b81828d940f40d70' '9ab48505fb1b487babd0d1f6d3a3f980'
 '148fffeb994541b2b4b6dcefda7001a8' '89c08e793298442686292454a1abff31'
 '0467928aa65e4a4fba62bdb1467e3a54' '43c3390303c6476cb65f584e37c3e81c'
 'fa14b16c17e3417dba5a4b473ea5b18d' '7cc3356d38de4328a51a5cbcb187dac3'
 'bef16fb5fd7344cca5e295b13ef3e0cd']","['f5c11a5ac94e40068bca8be178a6bcd6' '2b1ec99684574c2ab26bb050d5b57a4d'
 'e5c5c87a281b43868c344ff60f44c100' 'a562ffbe986247b7943990e7151f4d69'
 '7ea0bc1467e84184842de2d5e5bdd78e' '13a044c404394c34af1e9b07c48aa985'
 '69ef1ac7b1f44372979149e82ecbc860' '6e26ce67bacc4fa089296843463f69ad'
 'ae0d3104647f4e6ab3ec2cf8e60be5ca' '49e24b5f2c1d40d7857afe327db4f554']"
e442fbb7a67e97ebc4de131b25c639e1," used for preparing context data from community reports
map_system_prompt: prompt template used in the map stage. Default template can be found at map_system_prompt
reduce_system_prompt: prompt template used in the reduce stage, default template can be found at reduce_system_prompt
response_type: free-form text describing the desired response type and format (e.g., Multiple Paragraphs, Multi-Page Report)
allow_general_knowledge: setting this to True will include additional instructions to the reduce_system_prompt to prompt the LLM to incorporate relevant real-world knowledge outside of the dataset. Note that this may increase hallucinations, but can be useful for certain scenarios. Default is False *general_knowledge_inclusion_prompt: instruction to add to the reduce_system_prompt if allow_general_knowledge is enabled. Default instruction can be found at general_knowledge_instruction
max_data_tokens: token budget for the context data
map_llm_params: a dictionary of additional parameters (e.g., temperature, max_tokens) to be passed to the LLM call at the map stage
reduce_llm_params: a dictionary of additional parameters (e.g., temperature, max_tokens) to passed to the LLM call at the reduce stage
context_builder_params: a dictionary of additional parameters to be passed to the context_builder object when building context window for the map stage.
concurrent_coroutines: controls the degree of parallelism in the map stage.
callbacks: optional callback functions, can be used to provide custom event handlers for LLM",300,['217bd625ebb21f3343be31530abac558'],"['c6d1e4f56c2843e89cf0b91c10bb6de2' 'bb9e01bc171d4326a29afda59ece8d17'
 '3c063eea52e94164b70c99431ea30bae' '252cc8452bfc4c2aa58cab68d8b61879'
 '7e2c84548fb94ee395ba8588d8f2a006' 'f034618dde7948beb6dab30176d0fc87'
 '5c41f96be13e49dba649454297834546' '7ea4afbf8a264f29af29950ce98105ba'
 '91ff849d12b24574b0691dbddf44968b' 'd73c1f2fb3094d8dace42ad2a76e9a52'
 'cdc8901e668749889bd49bebdc4ff1f6']","['587f39a32e93412395d9c22ad0ac2f94' '8d9ded5fc9cf4c4faba8c6c8cd50e2f4'
 'd0e58b78e8e84a0c8796e707b1f95f65' '215fcc6a3b5e452da123aa7f9ef0cbc9']"
e0cc1cf05b92456e09100790815186fe," to the LLM call at the map stage
reduce_llm_params: a dictionary of additional parameters (e.g., temperature, max_tokens) to passed to the LLM call at the reduce stage
context_builder_params: a dictionary of additional parameters to be passed to the context_builder object when building context window for the map stage.
concurrent_coroutines: controls the degree of parallelism in the map stage.
callbacks: optional callback functions, can be used to provide custom event handlers for LLM's completion streaming events
How to Use
An example of a global search scenario can be found in the following notebook.

Query CLI
The GraphRAG query CLI allows for no-code usage of the GraphRAG Query engine.

python -m graphrag.query --data <path-to-data> --community_level <comunit-level> --response_type <response-type> --method <""local""|""global""> <query>

CLI Arguments
--data <path-to-data> - Folder containing the .parquet output files from running the Indexer.
--community_level <community-level> - Community level in the Leiden community hierarchy from which we will load the community reports higher value means we use reports on smaller communities. Default: 2
--response_type <response-type> - Free form text describing the response type and format, can be anything, e.g. Multiple Paragraphs, Single Paragraph, Single Sentence, List of 3-7 Points, Single Page, Multi-Page Report",300,['217bd625ebb21f3343be31530abac558'],"['c6d1e4f56c2843e89cf0b91c10bb6de2' '252cc8452bfc4c2aa58cab68d8b61879'
 '91ff849d12b24574b0691dbddf44968b' 'd73c1f2fb3094d8dace42ad2a76e9a52'
 'cdc8901e668749889bd49bebdc4ff1f6' '36084a9fab53433493f079e97e68bf65'
 'eebcc7ec8e3e4df7aea83659bbdc2199' 'ceadf262ef834e9ab146b20650912cae'
 '7f65feab75424b53b24470d305ba331a']","['1ccce5d1892a4b6995bbaec22882d34d' '595a841aa6034c93bd3dc55681e17710'
 '0d0fc5d4ecb548079b28979186f19bf6' 'e7d3fe0f87ff47f5a4c8d9572d27245a'
 '6f7165b558ae427ca14b2b16d1e8e204' '2ec093d2a76d45f88ec508e45ba8c6a3'
 '16d5a528d6374612b87a5656e8d95193']"
8c70a7321fb0e945054d226a8c69abee," .parquet output files from running the Indexer.
--community_level <community-level> - Community level in the Leiden community hierarchy from which we will load the community reports higher value means we use reports on smaller communities. Default: 2
--response_type <response-type> - Free form text describing the response type and format, can be anything, e.g. Multiple Paragraphs, Single Paragraph, Single Sentence, List of 3-7 Points, Single Page, Multi-Page Report. Default: Multiple Paragraphs.
--method <""local""|""global""> - Method to use to answer the query, one of local or global. For more information check Overview
Env Variables
Required environment variables to execute:

GRAPHRAG_API_KEY - API Key for executing the model, will fallback to OPENAI_API_KEY if one is not provided.
GRAPHRAG_LLM_MODEL - Model to use for Chat Completions.
GRAPHRAG_EMBEDDING_MODEL - Model to use for Embeddings.
You can further customize the execution by providing these environment variables:

GRAPHRAG_LLM_API_BASE - The API Base URL. Default: None
GRAPHRAG_LLM_TYPE - The LLM operation type. Either openai_chat or azure_openai_chat. Default: openai_chat
GRAPHRAG_LLM_MAX_RETRIES - The maximum number of retries to attempt when a request fails. Default: 20
GRAPHRAG_EMBED",300,['217bd625ebb21f3343be31530abac558'],"['dde131ab575d44dbb55289a6972be18f' '252cc8452bfc4c2aa58cab68d8b61879'
 '7f65feab75424b53b24470d305ba331a' 'fd9cb733b28d420cb5cef01e545a132c'
 '0fbcca3f17c649a08aea64b5a7d9ef36' '482027a59f32484c9c44fd700615c1b6'
 'de837ff3d626451282ff6ac77a82216d' '460295fed3ae4cd39f9f274cec9c2506'
 '553b285bba60460ab1ed8341ae61282b' 'cec95bf17e7e4c939b56c9c6f402a29f']","['90764eb2cab74cffb1c7d72d28b965cc' '01abe16e67c241a887aa62abe22d155c'
 '37049be0a2c240c6a06acf9339237b8b' 'e785c52881704d95bf4ec03d2720f8ae'
 '654689c65613476b9905d7afb3809cd2' '15dfb45a6ffa4d34ad72cfe4b3c5cc0d'
 '427c3b7458f148d8bace1b768e2b5b7c' '95d506750fd94e72bbd9cf2d3fe18e28'
 'bf0138ccbcc740089a55fd0c24897360']"
1ef6439b7c457ba43993467ff734eedf," Model to use for Embeddings.
You can further customize the execution by providing these environment variables:

GRAPHRAG_LLM_API_BASE - The API Base URL. Default: None
GRAPHRAG_LLM_TYPE - The LLM operation type. Either openai_chat or azure_openai_chat. Default: openai_chat
GRAPHRAG_LLM_MAX_RETRIES - The maximum number of retries to attempt when a request fails. Default: 20
GRAPHRAG_EMBEDDING_API_BASE - The API Base URL. Default: None
GRAPHRAG_EMBEDDING_TYPE - The embedding client to use. Either openai_embedding or azure_openai_embedding. Default: openai_embedding
GRAPHRAG_EMBEDDING_MAX_RETRIES - The maximum number of retries to attempt when a request fails. Default: 20
GRAPHRAG_LOCAL_SEARCH_TEXT_UNIT_PROP - Proportion of context window dedicated to related text units. Default: 0.5
GRAPHRAG_LOCAL_SEARCH_COMMUNITY_PROP - Proportion of context window dedicated to community reports. Default: 0.1
GRAPHRAG_LOCAL_SEARCH_CONVERSATION_HISTORY_MAX_TURNS - Maximum number of turns to include in the conversation history. Default: 5
GRAPHRAG_LOCAL_SEARCH_TOP_K_ENTITIES - Number of related entities to retrieve from the entity description embedding store. Default: 10
GRAPHRAG_LOCAL_SEARCH_TOP_K_RELATIONSH",300,['217bd625ebb21f3343be31530abac558'],"['460295fed3ae4cd39f9f274cec9c2506' '553b285bba60460ab1ed8341ae61282b'
 'cec95bf17e7e4c939b56c9c6f402a29f' '599164aead034bc19446efacc77554d2'
 'bbf148ae4d48422f8fdef754cfa2b9e4' 'de61b2670999433f807a6a1dc2b81e43'
 '3e95dacfe57b4d57b5da4310ef2e157f' '1f1545308e9347af91fd03b94aadc21f'
 '6ea81acaf232485e94fff638e03336e1' 'd136b08d586d488f9e4188b524c85a29']","['571f65acb3134490932feeb91b01cca3' 'd3faf86c153f440eaa410305b3dc6617'
 '0b26876307ad4cc48839b61a21a1d03a' 'c68e6c694a554256846d12178ddb12dc'
 'c04abbd5e59b4c64b023908f6db05498']"
2efb1fec56fe3b0543d395dd541295c3,".5
GRAPHRAG_LOCAL_SEARCH_COMMUNITY_PROP - Proportion of context window dedicated to community reports. Default: 0.1
GRAPHRAG_LOCAL_SEARCH_CONVERSATION_HISTORY_MAX_TURNS - Maximum number of turns to include in the conversation history. Default: 5
GRAPHRAG_LOCAL_SEARCH_TOP_K_ENTITIES - Number of related entities to retrieve from the entity description embedding store. Default: 10
GRAPHRAG_LOCAL_SEARCH_TOP_K_RELATIONSHIPS - Control the number of out-of-network relationships to pull into the context window. Default: 10
GRAPHRAG_LOCAL_SEARCH_MAX_TOKENS - Change this based on the token limit you have on your model (if you are using a model with 8k limit, a good setting could be 5000). Default: 12000
GRAPHRAG_LOCAL_SEARCH_LLM_MAX_TOKENS - Change this based on the token limit you have on your model (if you are using a model with 8k limit, a good setting could be 1000=1500). Default: 2000
GRAPHRAG_GLOBAL_SEARCH_MAX_TOKENS - Change this based on the token limit you have on your model (if you are using a model with 8k limit, a good setting could be 5000). Default: 12000
GRAPHRAG_GLOBAL_SEARCH_DATA_MAX_TOKENS - Change this based on the token limit you have on your model",300,['217bd625ebb21f3343be31530abac558'],"['1f1545308e9347af91fd03b94aadc21f' '6ea81acaf232485e94fff638e03336e1'
 'd136b08d586d488f9e4188b524c85a29' 'cccfa151fedc4b218a8d96adc7dceabe'
 'ce54725672a74ebcabe6127577dacb2b' 'ea2b28ca1a974ffab4517811dc1d1e5c'
 'aff21f1da1654e7babdcf3fb0e4a75fc' 'dc2cc9016e3f49dbac7232f05cce794d']",['6bb9bed2e39c4e31a81f12479af3d16c' '26c926c6016d4639b05427f01ba629f5']
2049798d3000849f8bec3e88c0006807," using a model with 8k limit, a good setting could be 1000=1500). Default: 2000
GRAPHRAG_GLOBAL_SEARCH_MAX_TOKENS - Change this based on the token limit you have on your model (if you are using a model with 8k limit, a good setting could be 5000). Default: 12000
GRAPHRAG_GLOBAL_SEARCH_DATA_MAX_TOKENS - Change this based on the token limit you have on your model (if you are using a model with 8k limit, a good setting could be 5000). Default: 12000
GRAPHRAG_GLOBAL_SEARCH_MAP_MAX_TOKENS - Default: 500
GRAPHRAG_GLOBAL_SEARCH_REDUCE_MAX_TOKENS - Change this based on the token limit you have on your model (if you are using a model with 8k limit, a good setting could be 1000-1500). Default: 2000
GRAPHRAG_GLOBAL_SEARCH_CONCURRENCY - Default: 32
",215,['217bd625ebb21f3343be31530abac558'],"['aff21f1da1654e7babdcf3fb0e4a75fc' 'dc2cc9016e3f49dbac7232f05cce794d'
 '6ea0cef05f694dcea455478f40674e45' '7ab5d53a872f4dfc98f3d386879f3c75'
 'af1d0fec22114a3398b8016f5225f9ed']",['8f6872eeb81b432b91405d327636113c' 'ac80a99fda2b488285d29596dd4d1471']
25e04f0e9a961dcdc3f6eae6df7807b2,"Indexing Architecture
Key Concepts
Knowledge Model
In order to support the GraphRAG system, the outputs of the indexing engine (in the Default Configuration Mode) are aligned to a knowledge model we call the GraphRAG Knowledge Model. This model is designed to be an abstraction over the underlying data storage technology, and to provide a common interface for the GraphRAG system to interact with. In normal use-cases the outputs of the GraphRAG Indexer would be loaded into a database system, and the GraphRAG's Query Engine would interact with the database using the knowledge model data-store types.

DataShaper Workflows
GraphRAG's Indexing Pipeline is built on top of our open-source library, DataShaper. DataShaper is a data processing library that allows users to declaratively express data pipelines, schemas, and related assets using well-defined schemas. DataShaper has implementations in JavaScript and Python, and is designed to be extensible to other languages.

One of the core resource types within DataShaper is a Workflow. Workflows are expressed as sequences of steps, which we call verbs. Each step has a verb name and a configuration object. In DataShaper, these verbs model relational concepts such as SELECT, DROP, JOIN, etc.. Each verb transforms an input data table, and that table is passed down the pipeline.

Input Table
SELECT
JOIN
BINARIZE
Output Table
Sample Workflow
LLM-based Workflow Steps
GraphRAG",300,['6419b98c277c12893cdc15db7eefebca'],"['b07a7f088364459098cd8511ff27a4c8' '8870cf2b5df64d2cab5820f67e29b9f1'
 'cd130938a2844050be991af70baf5ee0' '43544b99c3b04b059546198a0ae6366d'
 'a671bf7fea2f4514b6e96ba99127fafd' '525f41ea20274a05af4e52b625b473f3']","['67d6a3481e4b419292247cef5cd5b737' '904cd052ec194654bb72f4027e43daa3'
 '7e88fd2e835147fbb71866612735e8d4']"
81031e23c0b000ee60cd9b06950f96cd," the core resource types within DataShaper is a Workflow. Workflows are expressed as sequences of steps, which we call verbs. Each step has a verb name and a configuration object. In DataShaper, these verbs model relational concepts such as SELECT, DROP, JOIN, etc.. Each verb transforms an input data table, and that table is passed down the pipeline.

Input Table
SELECT
JOIN
BINARIZE
Output Table
Sample Workflow
LLM-based Workflow Steps
GraphRAG's Indexing Pipeline implements a handful of custom verbs on top of the standard, relational verbs that our DataShaper library provides. These verbs give us the ability to augment text documents with rich, structured data using the power of LLMs such as GPT-4. We utilize these verbs in our standard workflow to extract entities, relationships, claims, community structures, and community reports and summaries. This behavior is customizable and can be extended to support many kinds of AI-based data enrichment and extraction tasks.

Workflow Graphs
Because of the complexity of our data indexing tasks, we needed to be able to express our data pipeline as series of multiple, interdependent workflows. In the GraphRAG Indexing Pipeline, each workflow may define dependencies on other workflows, effectively forming a directed acyclic graph (DAG) of workflows, which is then used to schedule processing.

Prepare
Chunk
ExtractGraph
EmbedDocuments
GenerateReports
EmbedGraph
EntityResolution
Sample Workflow DAG
Dataframe Message",300,['6419b98c277c12893cdc15db7eefebca'],"['43544b99c3b04b059546198a0ae6366d' 'a671bf7fea2f4514b6e96ba99127fafd'
 '071a416efbec4f0886c19ac68f6d43cb' '6d8473ef3b1042bf87178a611e3dbcc6'
 '30c9641543c24773938bd8ec57ea98ab' '18b839da898e4026b81727d759d95c6a'
 'eeef6ae5c464400c8755900b4f1ac37a' '422433aa45804c7ebb973b2fafce5da6'
 '86505bca739d4bccaaa1a8e0f3baffdc' '1af9faf341e14a5bbf4ddc9080e8dc0b'
 '353d91abc68648639d65a549e59b5cf3' '7ce637e4f35b42e3a9f8272cab69cd22'
 '4d999d7744b04a998475f8f8531589f0' '9a6f414210e14841a5b0e661aedc898d'
 'db541b7260974db8bac94e953009f60e' 'f2ff8044718648e18acef16dd9a65436']","['029d1a8c3b184aa5bb21228f40cd12fd' 'a1ebc53a0bc74a0eb6dbdd18cf3c88cd'
 'f64e87431d674f298c533f6878458b95' 'e6d44d0db58f42799a02eacbd6b14543'
 '64961fbc3a1641378be10bcb3b0955e1' '59bcc2ec512c4c1ba44272446b419230'
 '8f39ae56f8b54b1b94faf04dbd0b9d11' 'f3018b934ac241639a33c925c24bc507'
 'ddedfd5179e64700adced4803c75cdba' 'f745075dedcf444daa9370cf32403d31'
 '1ef48284d238405f94190125092a3e28' '8806b817446447e3b50f5bc85ff497e1'
 '7303ee20690449db8c168df3fe008bc5']"
d19a57bca2c14fc9c2bf5058958380fd,".

Workflow Graphs
Because of the complexity of our data indexing tasks, we needed to be able to express our data pipeline as series of multiple, interdependent workflows. In the GraphRAG Indexing Pipeline, each workflow may define dependencies on other workflows, effectively forming a directed acyclic graph (DAG) of workflows, which is then used to schedule processing.

Prepare
Chunk
ExtractGraph
EmbedDocuments
GenerateReports
EmbedGraph
EntityResolution
Sample Workflow DAG
Dataframe Message Format
The primary unit of communication between workflows, and between workflow steps is an instance of pandas.DataFrame. Although side-effects are possible, our goal is to be data-centric and table-centric in our approach to data processing. This allows us to easily reason about our data, and to leverage the power of dataframe-based ecosystems. Our underlying dataframe technology may change over time, but our primary goal is to support the DataShaper workflow schema while retaining single-machine ease of use and developer ergonomics.

LLM Caching
The GraphRAG library was designed with LLM interactions in mind, and a common setback when working with LLM APIs is various errors errors due to network latency, throttling, etc.. Because of these potential error cases, we've added a cache layer around LLM interactions. When completion requests are made using the same input set (prompt and tuning parameters), we return a cached result if one exists. This allows our indexer to be more resilient to network issues, to act id",300,['6419b98c277c12893cdc15db7eefebca'],"['525f41ea20274a05af4e52b625b473f3' '422433aa45804c7ebb973b2fafce5da6'
 '1af9faf341e14a5bbf4ddc9080e8dc0b' '353d91abc68648639d65a549e59b5cf3'
 '7ce637e4f35b42e3a9f8272cab69cd22' '4d999d7744b04a998475f8f8531589f0'
 '9a6f414210e14841a5b0e661aedc898d' 'db541b7260974db8bac94e953009f60e'
 'f2ff8044718648e18acef16dd9a65436' '00d785e7d76b47ec81b508e768d40584'
 '87915637da3e474c9349bd0ae604bd95' '8f1eba29f39e411188200bf0d14628ec']","['a51d063ad4c744049edb359eb88407b7' 'b67268f90338474e8e53b9a6715b6833'
 'acb53370e72b4430a752d9ea18c17352' 'a8738c7de11543df930169741381c252'
 '3f8b5b2727924ba0b62e6286063b6861' 'bb5010633113442eaf814852995cfa22'
 '9eb8c635538243a690366f8bc1de34e0' '050c5b770d51409cb40f9c52f02d1329'
 '9e12f514d26d48dfab65807568a6cff9' '97f98b1623104f48aa93196a1f7dede2'
 '87718ef799a34104b6ef9c2df6621cbc']"
6335601c6ec22bd6f15c8b69c26f854b,"M Caching
The GraphRAG library was designed with LLM interactions in mind, and a common setback when working with LLM APIs is various errors errors due to network latency, throttling, etc.. Because of these potential error cases, we've added a cache layer around LLM interactions. When completion requests are made using the same input set (prompt and tuning parameters), we return a cached result if one exists. This allows our indexer to be more resilient to network issues, to act idempotently, and to provide a more efficient end-user experience.",114,['6419b98c277c12893cdc15db7eefebca'],"['7282c73622b8408e97289d959faff483' '3deb220d31f74103aa44870a36a63220'
 'af7a1584dd15492cb9a4940e285f57fc']","['2f1c535a14b14758bf1cacca81c74878' '3b78cc7ce8224afcab3e4bbe550cde10'
 '29ec9dd9f5864170a7e75c46c11c0090']"
f76c18c7582167c3626f8741c2c9374f,"From Local to Global: A Graph RAG Approach to
 Query-Focused Summarization


Abstract
 The use of retrieval-augmented generation (RAG) to retrieve relevant informa
tion from an external knowledge source enables large language models (LLMs)
 to answer questions over private and/or previously unseen document collections.
 However, RAG fails on global questions directed at an entire text corpus, such
 as ‚ÄúWhat are the main themes in the dataset?‚Äù, since this is inherently a query
focused summarization (QFS) task, rather than an explicit retrieval task. Prior
 QFS methods, meanwhile, fail to scale to the quantities of text indexed by typical
 RAGsystems. Tocombine the strengths of these contrasting methods, we propose
 a Graph RAGapproach to question answering over private text corpora that scales
 with both the generality of user questions and the quantity of source text to be in
dexed. Our approach uses an LLM to build a graph-based text index in two stages:
 f
 irst to derive an entity knowledge graph from the source documents, then to pre
generate community summaries for all groups of closely-related entities. Given a
 question, each community summary is used to generate a partial response, before
 all partial responses are again summarized in a final response to the user. For a
 class of global sensemaking questions over datasets in the 1 million token range,
 we show that Graph RAG leads to substantial improvements",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' '6e8d9029ce4e4ea182367173ab2c7bbf'
 'cbf232211e7d4eb6abdbe182f71c2cf0' 'bb0cff774a4440b289cc6f3b929fe13c'
 'ce55841ebfdd47008bab8c258f10372e']","['5a4ad077106a4a3f951f43d2e01499b0' '7893ee15f0e941cbacad8cc1feaacbaf'
 'f53397f743ca4d7397c0a694fe787da0' '0041db9da3694ad397f37c76f8477770']"
b149708d0b4ac3ff417565739ea6b03b," a graph-based text index in two stages:
 f
 irst to derive an entity knowledge graph from the source documents, then to pre
generate community summaries for all groups of closely-related entities. Given a
 question, each community summary is used to generate a partial response, before
 all partial responses are again summarized in a final response to the user. For a
 class of global sensemaking questions over datasets in the 1 million token range,
 we show that Graph RAG leads to substantial improvements over a na¬® ƒ±ve RAG
 baseline for both the comprehensiveness and diversity of generated answers. An
 open-source, Python-based implementation of both global and local Graph RAG
 approaches is forthcoming at https://aka.ms/graphrag

1 Introduction
 Human endeavors across a range of domains rely on our ability to read and reason about large
 collections of documents, often reaching conclusions that go beyond anything stated in the source
 texts themselves. With the emergence of large language models (LLMs), we are already witnessing
 attempts to automate human-like sensemaking in complex domains like scientific discovery (Mi
crosoft, 2023) and intelligence analysis (Ranade and Joshi, 2023), where sensemaking is defined as‚Äúa motivated, continuous effort to understand connections (which can be among people, places, and
 events) in order to anticipate their trajectories and act effectively‚Äù (Klein et al., 2006a). Supporting
 human-led sensemaking",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' 'ce55841ebfdd47008bab8c258f10372e'
 '6090e736374d45fd84f0e4610a314f8f' '0e8d921ccd8d4a8594b65b7fd19f7120'
 '59c726a8792d443e84ab052cb7942b4a' '4f2c665decf242b0bfcaf7350b0e02ed'
 '66cdf168f36d4a57a505028c97dc06e0' '38f51478f41f48db9bee570859b6f43e']","['a7ec8df038d7461689d28f1bdea84d9b' 'ce0366abadef410d9b65e2bfbbf0b0f9'
 'f4370806deb84d0eb7e85e742e7d4bbf' 'c92392d168c2443e8ed7b04992d0c92b'
 '7f3d5282303f4fc3a009e04f7de0ad84' '1219a14eaf5f49ab84c9287ebf58db7a']"
c7669e6a1add9a2829b09196256b1492,"Ms), we are already witnessing
 attempts to automate human-like sensemaking in complex domains like scientific discovery (Mi
crosoft, 2023) and intelligence analysis (Ranade and Joshi, 2023), where sensemaking is defined as‚Äúa motivated, continuous effort to understand connections (which can be among people, places, and
 events) in order to anticipate their trajectories and act effectively‚Äù (Klein et al., 2006a). Supporting
 human-led sensemaking over entire text corpora, however, needs a way for people to both apply and
 refine their mental model of the data (Klein et al., 2006b) by asking questions of a global nature.
 Retrieval-augmented generation (RAG, Lewis et al., 2020) is an established approach to answering
 user questions over entire datasets, but it is designed for situations where these answers are contained
 locally within regions of text whose retrieval provides sufficient grounding for the generation task.
 Instead, a more appropriate task framing is query-focused summarization (QFS, Dang, 2006), and in
 particular, query-focused abstractive summarization that generates natural language summaries and
 not just concatenated excerpts (Baumel et al., 2018; Laskar et al., 2020; Yao et al., 2017) . In recent
 years, however, such distinctions between summarization tasks that are abstractive versus extractive,
",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['cbf232211e7d4eb6abdbe182f71c2cf0' 'bb0cff774a4440b289cc6f3b929fe13c'
 '896d2a51e8de47de85ba8ced108c3d53' '14555b518e954637b83aa762dc03164e'
 'b1f6164116d44fe8b8f135d7f65b9e58' 'c8b2408617804483b620e1a6691ac90d']","['a7c2a64e06374091adce74adb36801ab' '107568a67cac472c89dfce4bbe11157c'
 '3d78aa9d14714ac189e4020f78b15d24' 'efaa386bd5e9454b87e1851cd8b28ac3']"
85eff07c379a9dc24db0edb983acf3c9," task.
 Instead, a more appropriate task framing is query-focused summarization (QFS, Dang, 2006), and in
 particular, query-focused abstractive summarization that generates natural language summaries and
 not just concatenated excerpts (Baumel et al., 2018; Laskar et al., 2020; Yao et al., 2017) . In recent
 years, however, such distinctions between summarization tasks that are abstractive versus extractive,
 generic versus query-focused, and single-document versus multi-document, have become less rele
vant. While early applications of the transformer architecture showed substantial improvements on
 the state-of-the-art for all such summarization tasks (Goodwin et al., 2020; Laskar et al., 2022; Liu
 and Lapata, 2019), these tasks are now trivialized by modern LLMs, including the GPT (Achiam
 et al., 2023; Brown et al., 2020), Llama (Touvron et al., 2023), and Gemini (Anil et al., 2023) series,
 all of which can use in-context learning to summarize any content provided in their context window.
 The challenge remains, however, for query-focused abstractive summarization over an entire corpus.
 Such volumes of text can greatly exceed the limits of LLM context windows, and the expansion of
 such windows may not be enough given that",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['bb0cff774a4440b289cc6f3b929fe13c' 'b1f6164116d44fe8b8f135d7f65b9e58'
 'c8b2408617804483b620e1a6691ac90d' 'a5e0d1644eb547ba9a5c3211aac4631a'
 '5a28b94bc63b44edb30c54748fd14f15' 'f97011b2a99d44648e18d517e1eae15c'
 '35489ca6a63b47d6a8913cf333818bc1' '5d3344f45e654d2c808481672f2f08dd']","['107568a67cac472c89dfce4bbe11157c' '073241be9b6a4952ad01dd14b94fb89c'
 'f7ac6bc4a9ca4250ad29a3adb5d08657' 'ac2ee54e75a2492c8db372dadfccd083'
 'ee895ad0b8cd40c29465e8527748d847' 'fe38c996c2d64bc899eabd6389034075']"
3fc3718256cb7f614fcde622af2ed912," Brown et al., 2020), Llama (Touvron et al., 2023), and Gemini (Anil et al., 2023) series,
 all of which can use in-context learning to summarize any content provided in their context window.
 The challenge remains, however, for query-focused abstractive summarization over an entire corpus.
 Such volumes of text can greatly exceed the limits of LLM context windows, and the expansion of
 such windows may not be enough given that information can be ‚Äúlost in the middle‚Äù of longer
 contexts (Kuratov et al., 2024; Liu et al., 2023). In addition, although the direct retrieval of text
 chunks in na¬® ƒ±ve RAG is likely inadequate for QFS tasks, it is possible that an alternative form of
 pre-indexing could support a new RAG approach specifically targeting global summarization.
 In this paper, we present a Graph RAG approach based on global summarization of an LLM-derived
 knowledge graph (Figure 1). In contrast with related work that exploits the structured retrieval
 and traversal affordances of graph indexes (subsection 4.2), we focus on a previously unexplored
 quality of graphs in this context: their inherent modularity (Newman, 2006) and the ability of com
munity detection algorithms to partition graphs into modular communities of closely-related nodes
 (e.g., Louvain, Blondel et al.,",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['6fb57f83baec45c9b30490ee991f433f' '68762e6f0d1c41cd857c6b964a8e76c3'
 '70634e10a5e845aa8c6a32fe7e8eb2b2' '04085f7cf46544b79597fc49286ff84d'
 'd203efdbfb2f4b2a899abfb31cf72e82' '6731a665561840c2898ce8c9788e4c88'
 '4026806fa92f4e849a59a7f5c9a45c79' '68e0c60d2e8845d89d9d0ad397833648'
 '101572f552b54e529fe7765c05168981' '60c58026b2764b40adffca6eaa31d6d9'
 'ad1595a78935472999444c9330e7730e' '735d19aea0744b2295556841c5c4c3fd']","['c0e28ae832c94405b8ddd4d2ad978be5' '7a4573a19ef94e25b4480cb4d953ae7a'
 '05f6639803524537b67a7f2b0c66ad23' '21bfd14cbc1f4cbc8ac59f7fd8c75b31'
 'c19cf2d7b067421990ab9f3acec9e736' '3e1981b9301c4d339a9228ae7a089a04'
 '0948efa844814529b4c023aacbc23d64' '0ec4ad4398a8457ab3d71bd2561858dc'
 '3c06988555334a389eab093f98679e85' '81ceb8db419b4697ad24e9d7f46422ff']"
d39abd5380fb3fe0468ea1e122512091," of an LLM-derived
 knowledge graph (Figure 1). In contrast with related work that exploits the structured retrieval
 and traversal affordances of graph indexes (subsection 4.2), we focus on a previously unexplored
 quality of graphs in this context: their inherent modularity (Newman, 2006) and the ability of com
munity detection algorithms to partition graphs into modular communities of closely-related nodes
 (e.g., Louvain, Blondel et al., 2008; Leiden, Traag et al., 2019). LLM-generated summaries of these
 community descriptions provide complete coverage of the underlying graph index and the input doc
uments it represents. Query-focused summarization of an entire corpus is then made possible using
 a map-reduce approach: first using each community summary to answer the query independently
 and in parallel, then summarizing all relevant partial answers into a final global answer.
 To evaluate this approach, we used an LLM to generate a diverse set of activity-centered sense
making questions from short descriptions of two representative real-world datasets, containing pod
cast transcripts and news articles respectively. For the target qualities of comprehensiveness, diver
sity, and empowerment (defined in subsection 3.4) that develop understanding of broad issues and
 themes, we both explore the impact of varying the the hierarchical level of community summaries
 used to answer queries, as well as compare to na¬® ƒ±ve RAG and",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['60c58026b2764b40adffca6eaa31d6d9' '735d19aea0744b2295556841c5c4c3fd'
 'c725babdb14a485582f8fbdf95429030' 'a0047221896d418d849847d422fa4bb8'
 '98fc2ee593184c5a839454db4eec7013' '80020a1da63042459e00266b2a605452'
 '31a7e680c4d54101afe4c8d52d246913' '351abba16e5c448994c6daf48121b14d'
 '50ea7d3b69614bcdbfbff7ddbfbf3d34' '004f40a5aeca48a1879db728eb12bcba'
 '4465efb7f6ed4dedad72a658184addd2']","['6bb190069a704ccca3d8e1648a384185' '47d2036509bf408095ab440bd052ac24'
 '25c968bf5a4f48369fded6c260f71540' '269b441634a144219f539202309bc9fb'
 'd0baf2392635468db7f5657f89eb2024' '4f29bcf5377d4c9f94ff3f8ca2f8d941']"
d2399fd0aae5bd200639806ca87184f8," to generate a diverse set of activity-centered sense
making questions from short descriptions of two representative real-world datasets, containing pod
cast transcripts and news articles respectively. For the target qualities of comprehensiveness, diver
sity, and empowerment (defined in subsection 3.4) that develop understanding of broad issues and
 themes, we both explore the impact of varying the the hierarchical level of community summaries
 used to answer queries, as well as compare to na¬® ƒ±ve RAG and global map-reduce summarization
 of source texts. We show that all global approaches outperform na¬® ƒ±ve RAG on comprehensiveness
 and diversity, and that Graph RAG with intermediate- and low-level community summaries shows
 favorable performance over source text summarization on these same metrics, at lower token costs.

 2 GraphRAGApproach&Pipeline
 We now unpack the high-level data flow of the Graph RAG approach (Figure 1) and pipeline, de
scribing key design parameters, techniques, and implementation details for each step.
 2.1 Source Documents ‚Üí Text Chunks
 Afundamental design decision is the granularity with which input texts extracted from source doc
uments should be split into text chunks for processing. In the following step, each of these chunks
 will be passed to a set of LLM prompts designed to extract the various elements of a graph index.
 Longer text chunks require fewer LLM calls for such extraction, but suffer from the",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['101572f552b54e529fe7765c05168981' 'b0dd60e11dad4ff782623acf039b3948'
 'db8c43fa4df947b09e5754d3b1393ead' '5dabc4cd05da425cb194a04482bf0c29'
 '9d08f285a7be4c79b8f359c51d51db37' 'adffed660d154b519c1817e514e83096'
 'b7e9c9ef572c445a9574ca571e41fb96' 'dcb9f281cd6248c699e0ebb285a42a5e']","['fd05d8198d0947b39b8fa1b16f3ecf5f' 'b54436ccc23745c88d24edcc3fdd8ed1'
 '977c895bb98d4136a76e8749533154b6' '8d75cfea884248aba1f372de5e1b82a9'
 '90f4ee186bcd4996ad8002888569fffc' '4bb78401581b4240b0967309e96af00b']"
e7caf4256ddea71533af1c4c50444146,"scribing key design parameters, techniques, and implementation details for each step.
 2.1 Source Documents ‚Üí Text Chunks
 Afundamental design decision is the granularity with which input texts extracted from source doc
uments should be split into text chunks for processing. In the following step, each of these chunks
 will be passed to a set of LLM prompts designed to extract the various elements of a graph index.
 Longer text chunks require fewer LLM calls for such extraction, but suffer from the recall degrada
tion of longer LLM context windows (Kuratov et al., 2024; Liu et al., 2023). This behavior can be
 observed in Figure 2 in the case of a single extraction round (i.e., with zero gleanings): on a sample
 dataset (HotPotQA, Yang et al., 2018), using a chunk size of 600 token extracted almost twice as
 many entity references as when using a chunk size of 2400. While more references are generally
 better, any extraction process needs to balance recall and precision for the target activity.
 2.2 Text Chunks ‚ÜíElement Instances
 The baseline requirement for this step is to identify and extract instances of graph nodes and edges
 from each chunk of source text. We do this using a multipart LLM prompt that first identifies all
 entities in the text, including their name, type, and description, before identifying all relationships
 between clearly-related entities, including",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['dcb9f281cd6248c699e0ebb285a42a5e' '072cdee531b74513984f49d99a8d64a0'
 '5ae335d9210a45fda3f92a9a028d6d9b' '5ac60a941a5b4934bdc43d2f87de601c'
 'd405c3154d0e48ce96fad4c28fe20590']","['2917f3b478b04ffcacd4b47602f4d0f5' '3984bd063b384901862e68506c77cc68'
 '4137a2c7dd884bc2a8469b7fa937346c' '17c2cc25d00347c3bf2422d4f7a4ad7e']"
e50740c4332fdedb8739773592e2a402,"2400. While more references are generally
 better, any extraction process needs to balance recall and precision for the target activity.
 2.2 Text Chunks ‚ÜíElement Instances
 The baseline requirement for this step is to identify and extract instances of graph nodes and edges
 from each chunk of source text. We do this using a multipart LLM prompt that first identifies all
 entities in the text, including their name, type, and description, before identifying all relationships
 between clearly-related entities, including the source and target entities and a description of their
 relationship. Both kinds of element instance are output in a single list of delimited tuples.
 The primary opportunity to tailor this prompt to the domain of the document corpus lies in the
 choice of few-shot examples provided to the LLM for in-context learning (Brown et al., 2020).
For example, while our default prompt extracting the broad class of ‚Äúnamed entities‚Äù like people,
 places, and organizations is generally applicable, domains with specialized knowledge (e.g., science,
 medicine, law) will benefit from few-shot examples specialized to those domains. We also support
 a secondary extraction prompt for any additional covariates we would like to associate with the
 extracted node instances. Our default covariate prompt aims to extract claims linked to detected
 entities, including the subject, object, type, description, source text span, and start and end dates.
 To balance the needs of efficiency and quality, we use multiple rounds of ‚Äúgleanings",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['dcb9f281cd6248c699e0ebb285a42a5e' '7923d8521c744bd9aab131c1aea91ffd'
 '5bd156c87ec44e19ae6f8f62e6e50b9d' 'c1a146d7fb16429ea6d0aa2a55ee597f'
 'ede9350632084da5b0b577ff799ab14b' 'ed559fb4ebde45518849ec803b350fa3'
 'f422035f8b78417f98e4d116971cf9f3' 'c79d686eba044c5586c706cdc096817d'
 '0f70db1e598d463fbbcdd1e288bd9490']","['60b6bf585ccc477d830d4b69b8c7b62a' '4330f73cb78a4bb39a384eb29112201b'
 '45c4ed77967746e485ec9e52c0dcc0d2' '5eda9074df124f5497f17b61badd52ac'
 '4cf4107b0e2842778aaa658a1a85f3b3' '7f4857f94b4e4e49be7236a42071e167'
 'd21a1fef903f4a399bd3cd366aad3c9e']"
805a07a8f9c2ed5da2d9a61356aafa77," (e.g., science,
 medicine, law) will benefit from few-shot examples specialized to those domains. We also support
 a secondary extraction prompt for any additional covariates we would like to associate with the
 extracted node instances. Our default covariate prompt aims to extract claims linked to detected
 entities, including the subject, object, type, description, source text span, and start and end dates.
 To balance the needs of efficiency and quality, we use multiple rounds of ‚Äúgleanings‚Äù, up to a
 specified maximum, to encourage the LLM to detect any additional entities it may have missed
 on prior extraction rounds. This is a multi-stage process in which we first ask the LLM to assess
 whether all entities were extracted, using a logit bias of 100 to force a yes/no decision. If the LLM
 responds that entities were missed, then a continuation indicating that ‚ÄúMANY entities were missed
 in the last extraction‚Äù encourages the LLM to glean these missing entities. This approach allows us
 to use larger chunk sizes without a drop in quality (Figure 2) or the forced introduction of noise.
 2.3 Element Instances ‚Üí Element Summaries
 The use of an LLM to ‚Äúextract‚Äù descriptions of entities, relationships, and claims represented in
 source texts is already a form of abstractive summarization, relying on the LLM to create inde
pendently meaningful summaries of concepts that may be implied but not stated by the",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['0adb2d9941f34ef7b2f7743cc6225844' 'ede9350632084da5b0b577ff799ab14b'
 'b35c3d1a7daa4924b6bdb58bc69c354d' 'a97e2ecd870944cfbe71c79bc0fcc752'
 '3e1b063bbfa9423d84e50311296d2f3c']","['51cd93f89fbe4bcf883cdb2ca6774cd6' '5f353b18fadb438f95ba0ea8feae137c'
 '947d70dd14b34cf398a1ab6dbdc51161' '90f5597a558a4652bded9001a4ec2e56']"
a73d3e7b661743b7583d8a0fd412b6a7," these missing entities. This approach allows us
 to use larger chunk sizes without a drop in quality (Figure 2) or the forced introduction of noise.
 2.3 Element Instances ‚Üí Element Summaries
 The use of an LLM to ‚Äúextract‚Äù descriptions of entities, relationships, and claims represented in
 source texts is already a form of abstractive summarization, relying on the LLM to create inde
pendently meaningful summaries of concepts that may be implied but not stated by the text itself
 (e.g., the presence of implied relationships). To convert all such instance-level summaries into sin
gle blocks of descriptive text for each graph element (i.e., entity node, relationship edge, and claim
 covariate) requires a further round of LLM summarization over matching groups of instances.
 A potential concern at this stage is that the LLM may not consistently extract references to the
 same entity in the same text format, resulting in duplicate entity elements and thus duplicate nodes
 in the entity graph. However, since all closely-related ‚Äúcommunities‚Äù of entities will be detected
 and summarized in the following step, and given that LLMs can understand the common entity
 behind multiple name variations, our overall approach is resilient to such variations provided there
 is sufficient connectivity from all variations to a shared set of closely-related entities.
 Overall, our use of rich descriptive text for homogeneous nodes in a potentially noisy graph structure
 is aligned with both the capabilities of LLMs and",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['3e1b063bbfa9423d84e50311296d2f3c' '9a8ce816ee954bdabd01ea2081538009'
 '09f18f81442d4d6d93a90f0fac683f9b' 'e02be3e37ca0454883a4c1fd859c24bb']",['fc596a598ff74a4c843e405b597551b5' 'e2aacff6b4404574b818e7a3ece57b5b']
6dace8e490674ac8e031aed987a63789," in the entity graph. However, since all closely-related ‚Äúcommunities‚Äù of entities will be detected
 and summarized in the following step, and given that LLMs can understand the common entity
 behind multiple name variations, our overall approach is resilient to such variations provided there
 is sufficient connectivity from all variations to a shared set of closely-related entities.
 Overall, our use of rich descriptive text for homogeneous nodes in a potentially noisy graph structure
 is aligned with both the capabilities of LLMs and the needs of global, query-focused summarization.
 These qualities also differentiate our graph index from typical knowledge graphs, which rely on
 concise and consistent knowledge triples (subject, predicate, object) for downstream reasoning tasks.
 2.4 Element Summaries ‚Üí Graph Communities
 The index created in the previous step can be modelled as an homogeneous undirected weighted
 graph in which entity nodes are connected by relationship edges, with edge weights representing the
 normalized counts of detected relationship instances. Given such a graph, a variety of community
 detection algorithms may be used to partition the graph into communities of nodes with stronger
 connections to one another than to the other nodes in the graph (e.g., see the surveys by Fortu
nato, 2010 and Jin et al., 2021). In our pipeline, we use Leiden (Traag et al., 2019) on account of
 its ability to recover hierarchical community structure of large-scale graphs efficiently (Figure 3).
 Each",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['17ed1d92075643579a712cc6c29e8ddb' '5a28b94bc63b44edb30c54748fd14f15'
 '735d19aea0744b2295556841c5c4c3fd' '6e0c81bef5364c988b21bf9b709d9861'
 '1dbc51475cb04dafa4a8833a8378635e' 'c12b9ebd8b4e42b7896822a32e3fa6eb'
 '27505f6ade4b4e5f9316ffe9c34821f7' '0ee7db2c6bea4630ba9f0c25e8a967ad']","['efbc2439e5034801af83ac1a0b440535' 'c20e6b1418a140389c31c7b71a6eba0c'
 '2ec5cae98c7a485881f0680fbca6d67f' 'c87b815d61af448596d3194a804b57b3'
 '2f92fc82c3b74417896bad3bd8e61f5e' 'fb61c68efe5b4d69a9623e531e7c639c']"
a660289d2bf43f25d3524d35cd2d9a96,", a variety of community
 detection algorithms may be used to partition the graph into communities of nodes with stronger
 connections to one another than to the other nodes in the graph (e.g., see the surveys by Fortu
nato, 2010 and Jin et al., 2021). In our pipeline, we use Leiden (Traag et al., 2019) on account of
 its ability to recover hierarchical community structure of large-scale graphs efficiently (Figure 3).
 Each level of this hierarchy provides a community partition that covers the nodes of the graph in a
 mutually-exclusive, collective-exhaustive way, enabling divide-and-conquer global summarization.
 2.5 GraphCommunities ‚Üí Community Summaries
 The next step is to create report-like summaries of each community in the Leiden hierarchy, using
 a method designed to scale to very large datasets. These summaries are independently useful in
 their own right as a way to understand the global structure and semantics of the dataset, and may
 themselves be used to make sense of a corpus in the absence of a question. For example, a user
 may scan through community summaries at one level looking for general themes of interest, then
 follow links to the reports at the lower level that provide more details for each of the subtopics. Here,
 however, we focus on their utility as part of a graph-based index used for answering global queries.
 Community summaries are generated in the following way:
 ‚Ä¢ Leaf-level communities.",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' '735d19aea0744b2295556841c5c4c3fd'
 '0ee7db2c6bea4630ba9f0c25e8a967ad' '5a6c1d15424149f69052cd8d91fbff75']","['8ddefa32e2ed4eaf8f76d17a676f74f3' 'ad96e5294247465a9c7d5ea8161dc305'
 'dc61e34c1ca8419e923aeeff7d83d949']"
93d4d4effbf989e6ef1c4c3b4f42494e," dataset, and may
 themselves be used to make sense of a corpus in the absence of a question. For example, a user
 may scan through community summaries at one level looking for general themes of interest, then
 follow links to the reports at the lower level that provide more details for each of the subtopics. Here,
 however, we focus on their utility as part of a graph-based index used for answering global queries.
 Community summaries are generated in the following way:
 ‚Ä¢ Leaf-level communities. The element summaries of a leaf-level community (nodes, edges,
 covariates) are prioritized and then iteratively added to the LLM context window until
 the token limit is reached. The prioritization is as follows: for each community edge in
 decreasing order of combined source and target node degree (i.e., overall prominance), add
 descriptions of the source node, target node, linked covariates, and the edge itself.
 ‚Ä¢ Higher-level communities. If all element summaries fit within the token limit of the con
text window, proceed as for leaf-level communities and summarize all element summaries
 within the community. Otherwise, rank sub-communities in decreasing order of element
 summary tokens and iteratively substitute sub-community summaries (shorter) for their
 associated element summaries (longer) until fit within the context window is achieved.
2.6 Community Summaries ‚Üí Community Answers ‚Üí Global Answer
 Given a user query, the community summaries generated in the previous step can be used",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' 'd54956b79dd147f894b67a8b97dcbef0'
 'd005bf75c31d4848ad7041f39651e59c']",['95ec30ce8dbe4ca28714e3e3735da8f3' '259e7f5e2ec04418937513413b6d51d1']
aed2ea39de8a027cc818c7f4557f0514," and divided
 into chunks of pre-specified token size. This ensures relevant information is distributed
 across chunks, rather than concentrated (and potentially lost) in a single context window.
 ‚Ä¢ Map community answers. Generate intermediate answers in parallel, one for each chunk.
 The LLM is also asked to generate a score between 0-100 indicating how helpful the gen
erated answer is in answering the target question. Answers with score 0 are filtered out.
 ‚Ä¢ Reduce to global answer. Intermediate community answers are sorted in descending order
 of helpfulness score and iteratively added into a new context window until the token limit
 is reached. This final context is used to generate the global answer returned to the user.
Dataset   Example activity framing and generation of global sensemaking questions
 Podcast
 transcripts

 User: A tech journalist looking for insights and trends in the tech industry
 Task: Understanding how tech leaders view the role of policy and regulation
 Questions:
 1. Which episodes deal primarily with tech policy and government regulation?
 2. How do guests perceive the impact of privacy laws on technology development?
 3. Do any guests discuss the balance between innovation and ethical considerations?
 4. What are the suggested changes to current policies mentioned by the guests?
 5. Are collaborations between tech companies and governments discussed and how?

 News
 articles

 User: Educator incorporating current affairs into curricula
 Task: Teaching about health and wellness
 Questions:
 1. What current topics in health can",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['004f40a5aeca48a1879db728eb12bcba' '4465efb7f6ed4dedad72a658184addd2'
 '9b3eef8f3a3a45e6873838db95295b8a' 'fdc954b454744820804d7798f3e0b5de'
 '49c1383836934ec495c3b35769100a73' '859dedcc3736439a8a563419f16cb3d8'
 '6078b9980a6c4dcd9198d151b833ead7' 'f93cd6b8213e46dda67af7e5382e1bd2']","['e7072a582d9b4c1ea8b171ee940d4d6e' 'cb6fcf84e3d04ef59b01f97ac94823a1'
 'c8f3e6cadcf34c8fafe8987e4a9b66f8' '26c9c44e5059429bb8abc3308bc6c814'
 '697fb824eef34759852f1d5588921aec' 'b872fcc5b18a4f32b976f4693f22e88e']"
5a5a94f85dfc4d119ebb87f3037fd1cc," policy and government regulation?
 2. How do guests perceive the impact of privacy laws on technology development?
 3. Do any guests discuss the balance between innovation and ethical considerations?
 4. What are the suggested changes to current policies mentioned by the guests?
 5. Are collaborations between tech companies and governments discussed and how?

 News
 articles

 User: Educator incorporating current affairs into curricula
 Task: Teaching about health and wellness
 Questions:
 1. What current topics in health can be integrated into health education curricula?
 2. How do news articles address the concepts of preventive medicine and wellness?
 3. Are there examples of health articles that contradict each other, and if so, why?
 4. What insights can be gleaned about public health priorities based on news coverage?
 5. How can educators use the dataset to highlight the importance of health literacy?
 Table 1: Examples of potential users, tasks, and questions generated by the LLM based on short
 descriptions of the target datasets. Questions target global understanding rather than specific details.
 3 Evaluation
 3.1 Datasets
 We selected two datasets in the one million token range, each equivalent to about 10 novels of text
 and representative of the kind of corpora that users may encounter in their real world activities:
 ‚Ä¢ Podcast transcripts. Compiled transcripts of podcast conversations between Kevin Scott,
 Microsoft CTO, and other technology leaders (Behind the Tech, Scott, 2024). Size:",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['4465efb7f6ed4dedad72a658184addd2' 'f93cd6b8213e46dda67af7e5382e1bd2'
 '496f17c2f74244c681db1b23c7a39c0c' 'da1684437ab04f23adac28ff70bd8429'
 '4517768fc4e24bd2a790be0e08a7856e' '545edff337344e518f68d1301d745455'
 '9376ce8940e647a99e5e087514b88fa4' 'b38a636e86984600bb4b57c2e2df9747'
 '4bc7440b8f4b4e4cae65a5c49defa923' '5d1b038ce8be4533b54dd79d6496de9b'
 'ac6e5a44e0c04a4fa93589376fde4c34' '40e4ef7dbc98473ba311bd837859a62a'
 '222f0ea8a5684123a7045986640ec844' '668cf1fdfd644d39acc6350b86117ea2']","['26c9c44e5059429bb8abc3308bc6c814' '7cea9903153f43b895c0b23d25bc90a3'
 '8302a03f6ede471bb955c0bbf44a4b3c' 'a02263dd89964a1c8ab2d0e9aba0f4eb'
 '6b7aa6ce4cac4edbaaab831286e67e5e' '655d40ea08e348ad94ae49785797da90'
 '254cea99330f4f2aa062c771146da7ea' 'a2836232227c4e3383d166db860cb2a3']"
5d04129d46662571f635a4e63cb4d6b7,"
 descriptions of the target datasets. Questions target global understanding rather than specific details.
 3 Evaluation
 3.1 Datasets
 We selected two datasets in the one million token range, each equivalent to about 10 novels of text
 and representative of the kind of corpora that users may encounter in their real world activities:
 ‚Ä¢ Podcast transcripts. Compiled transcripts of podcast conversations between Kevin Scott,
 Microsoft CTO, and other technology leaders (Behind the Tech, Scott, 2024). Size: 1669
 √ó600-token text chunks, with 100-token overlaps between chunks (‚àº1 million tokens).
 ‚Ä¢ News articles. Benchmark dataset comprising news articles published from September
 2013 to December 2023 in a range of categories, including entertainment, business, sports,
 technology, health, and science (MultiHop-RAG; Tang and Yang, 2024). Size: 3197 √ó
 600-token text chunks, with 100-token overlaps between chunks (‚àº1.7 million tokens).
 3.2 Queries
 Many benchmark datasets for open-domain question answering exist, including HotPotQA (Yang
 et al., 2018), MultiHop-RAG (Tang and Yang, 2024), and MT-Bench (Zheng et al., 2024). However,
 the associated question sets target explicit fact retrieval rather than summarization for the purpose
 of data sensemaking, i.e., the process though which people inspect, engage with, and",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['004f40a5aeca48a1879db728eb12bcba' '4465efb7f6ed4dedad72a658184addd2'
 '478e4c72d8fb46dd8cc9f0691c9878fd' '82b0446e7c9d4fc793f7b97f890e9049'
 '8169efeea3ce473d9fd2f1c688126a1c']",['97a21db5f5954e2c8868b298a3f0090e' '8a9247ee9bac45bdbf69c9d0bb8419b5']
8e69f04648f5fc24c299591365f1aa68,".7 million tokens).
 3.2 Queries
 Many benchmark datasets for open-domain question answering exist, including HotPotQA (Yang
 et al., 2018), MultiHop-RAG (Tang and Yang, 2024), and MT-Bench (Zheng et al., 2024). However,
 the associated question sets target explicit fact retrieval rather than summarization for the purpose
 of data sensemaking, i.e., the process though which people inspect, engage with, and contextualize
 data within the broader scope of real-world activities (Koesten et al., 2021). Similarly, methods for
 extracting latent summarization queries from source texts also exist (Xu and Lapata, 2021), but such
 extracted questions can target details that betray prior knowledge of the texts.
 To evaluate the effectiveness of RAG systems for more global sensemaking tasks, we need questions
 that convey only a high-level understanding of dataset contents, and not the details of specific texts.
 We used an activity-centered approach to automate the generation of such questions: given a short
 description of a dataset, we asked the LLM to identify N potential users and N tasks per user,
 then for each (user, task) combination, we asked the LLM to generate N questions that require
 understanding of the entire corpus. For our evaluation, a value of N = 5 resulted in 125 test questions
 per dataset. Table 1 shows example questions for each",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['0adb2d9941f34ef7b2f7743cc6225844' '478e4c72d8fb46dd8cc9f0691c9878fd'
 '82b0446e7c9d4fc793f7b97f890e9049' '8169efeea3ce473d9fd2f1c688126a1c'
 'c2d48b75af6a4d7989ccf9eceabd934e' '5f1fc373a8f34050a5f7dbd8ac852c1b'
 '0c010fa3aeac4b28b2fbb8c2339c2521']","['9532cf83e9324ea0a46e5ac89bac407d' '757a0f78fcdd4bf6b8326a75fcee9e15'
 'b5235cb24b8f440389f250ebd5b6e2f8' 'bdee1849252749efa2e671ed87641f61'
 '057641c1476247958d8c357e17095d8e' 'b61dfd0b24664f37af4046bdf0cb7b19']"
a739018eb63cbb6c26b779bd37afc233," of specific texts.
 We used an activity-centered approach to automate the generation of such questions: given a short
 description of a dataset, we asked the LLM to identify N potential users and N tasks per user,
 then for each (user, task) combination, we asked the LLM to generate N questions that require
 understanding of the entire corpus. For our evaluation, a value of N = 5 resulted in 125 test questions
 per dataset. Table 1 shows example questions for each of the two evaluation datasets.
3.3 Conditions
 Wecomparesixdifferent conditions in our analysis, including Graph RAG using four levels of graph
 communities (C0, C1, C2, C3), a text summarization method applying our map-reduce approach
 directly to source texts (TS), and a na¬® ƒ±ve ‚Äúsemantic search‚Äù RAG approach (SS):
 ‚Ä¢ CO.Uses root-level community summaries (fewest in number) to answer user queries.
 ‚Ä¢ C1. Uses high-level community summaries to answer queries. These are sub-communities
 of C0, if present, otherwise C0 communities projected down.
 ‚Ä¢ C2. Uses intermediate-level community summaries to answer queries. These are sub
communities of C1, if present, otherwise C1 communities projected down.
 ‚Ä¢ C3. Uses low-level community summaries (greatest in number) to answer queries. These
 are sub-communities of C2, if present, otherwise",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['0adb2d9941f34ef7b2f7743cc6225844' 'c2999bdca08a478b84b10219875b285e'
 '263d07354a1b4336b462024288f9bcd3' 'f9005e5c01b44bb489f7112322fd1162'
 'd9ef017549724f4fbc4ff4ba6701dac0' '33b9e826af3f43838c07c847b6349497'
 'dbe9063124d047dc8d6fcaeadcda038f' 'c885166d0c454a748376b56279f96408'
 '586bccefb1e344289c1ee984e165de9c' 'a2201b8753ba4847ab0b22054e27d2c0']","['8919fa72a9e74d1daff801e8f4c15b2b' 'bef38889bb86413895d7dd25b4c3137c'
 '0bc00f14e6194df7b0fe9ef9ba28d34f' 'b823c5d22037423da919eee6c35c4c8b'
 'cd7f555e4ab948ba94bade14e262ff84']"
88847c4d3e6c5a64a5b44d9d99d06237,".
 ‚Ä¢ C1. Uses high-level community summaries to answer queries. These are sub-communities
 of C0, if present, otherwise C0 communities projected down.
 ‚Ä¢ C2. Uses intermediate-level community summaries to answer queries. These are sub
communities of C1, if present, otherwise C1 communities projected down.
 ‚Ä¢ C3. Uses low-level community summaries (greatest in number) to answer queries. These
 are sub-communities of C2, if present, otherwise C2 communities projected down.
 ‚Ä¢ TS. The same method as in subsection 2.6, except source texts (rather than community
 summaries) are shuffled and chunked for the map-reduce summarization stages.
 ‚Ä¢ SS. An implementation of na¬® ƒ±ve RAG in which text chunks are retrieved and added to the
 available context window until the specified token limit is reached.
 The size of the context window and the prompts used for answer generation are the same across
 all six conditions (except for minor modifications to reference styles to match the types of context
 information used). Conditions only differ in how the contents of the context window are created.
 The graph index supporting conditions C0-C3 was created using our generic prompts for entity and
 relationship extraction only, with entity types and few-shot examples tailored to the domain of the
 data. The graph indexing process used a context window size of 600 tokens with 1 gleaning for the
 Podcast dataset and 0 gleanings for",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['b5ecd0553dd742f5813c9b855d548a41' '89b2003e97804961805ea1886d078ebd'
 '6dd7f5f6b4544271a97f6a136f82fc3d' 'eb01db8435554f2cbafe39a50f62f20a'
 '3d175ad1f0014cd4871eff4e86db9f88' 'c8e706fbdc90420d952deed03c4f04b4']","['86cd53087b2542f898d6cecca31e6145' '5dc3480806b04fdd8089a3be46e22540'
 '50c91820a91f488d8606198540aba894']"
53455f8552b0787cb13c5a03eb550842," (except for minor modifications to reference styles to match the types of context
 information used). Conditions only differ in how the contents of the context window are created.
 The graph index supporting conditions C0-C3 was created using our generic prompts for entity and
 relationship extraction only, with entity types and few-shot examples tailored to the domain of the
 data. The graph indexing process used a context window size of 600 tokens with 1 gleaning for the
 Podcast dataset and 0 gleanings for the News dataset.
 3.4 Metrics
 LLMs have been shown to be good evaluators of natural language generation, achieving state-of
the-art or competitive results compared against human judgements (Wang et al., 2023a; Zheng et al.,
 2024). While this approach can generate reference-based metrics when gold standard answers are
 known, it is also capable of measuring the qualities of generated texts (e.g., fluency) in a reference
free style (Wang et al., 2023a) as well as in head-to-head comparison of competing outputs (LLM
as-a-judge, Zheng et al., 2024). LLMs have also shown promise at evaluating the performance of
 conventional RAG systems, automatically evaluating qualities like context relevance, faithfulness,
 and answer relevance (RAGAS, Es et al., 2023).
 Given the multi-stage nature of our Graph RAG mechanism, the multiple conditions we wanted to",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['17ed1d92075643579a712cc6c29e8ddb' '5a28b94bc63b44edb30c54748fd14f15'
 '5ac60a941a5b4934bdc43d2f87de601c' 'cf6115e69d6649cc99ef2bd11854ccfb'
 '9ed7e3d187b94ab0a90830b17d66615e' 'b4c7432f712849d7aba9dccbb77471ef'
 '434e752b992c4e6a812557529315c5b9']","['b9a2ef791a064f038cac2059ebea1138' '0057fb2ddc0e4088ae5099b7ffa137da'
 'd67d67cc3698438db76eb4a7f75e1ea0']"
cbfd4a09b266218f64dc6e6d80f8a77e,"Wang et al., 2023a) as well as in head-to-head comparison of competing outputs (LLM
as-a-judge, Zheng et al., 2024). LLMs have also shown promise at evaluating the performance of
 conventional RAG systems, automatically evaluating qualities like context relevance, faithfulness,
 and answer relevance (RAGAS, Es et al., 2023).
 Given the multi-stage nature of our Graph RAG mechanism, the multiple conditions we wanted to
 compare, and the lack of gold standard answers to our activity-based sensemaking questions, we
 decided to adopt a head-to-head comparison approach using an LLM evaluator. We selected three
 target metrics capturing qualities that are desirable for sensemaking activities, as well as a control
 metric (directness) used as a indicator of validity. Since directness is effectively in opposition to
 comprehensiveness and diversity, we would not expect any method to win across all four metrics.
 Our head-to-head measures computed using an LLM evaluator are as follows:
 ‚Ä¢ Comprehensiveness. How much detail does the answer provide to cover all aspects and
 details of the question?
 ‚Ä¢ Diversity. Howvaried andrich is the answerin providing different perspectives and insights
 on the question?
 ‚Ä¢ Empowerment. How well does the answer help the reader understand and make informed
 judgements about the topic?
 ‚Ä¢ Directness. How specifically and clearly does the answer address the question?
 For our evaluation",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['df79a27b9a4f42fd839c90bb8a79ad91' '8f140fd7126f47b6b00307b0181509f9'
 '40450f2c91944a81944621b94f190b49' '5b9fa6a959294dc29c8420b2d7d3096f'
 'b84d71ed9c3b45819eb3205fd28e13a0' 'b0b464bc92a541e48547fe9738378dab'
 '44c65dda6fb7472dae36f6eea720ab47' '5d97ff82691c4482973d73d1860e4757'
 '2567445079794d1e84f17abc48776002' '392be891f8b649fabdc20e7bf549f669'
 '0111777c4e9e4260ab2e5ddea7cbcf58']","['b680be879404440885b1d3af5b9af583' '4cc609b1a64a442aac6b72078a315ac6'
 'a3ee323c9c9a4f81b5907030122b80d2' '3f5e9927a4114a958d75f5ed313526a8']"
2a5e1212b351d63d059ba1a1dec2811f,"-head measures computed using an LLM evaluator are as follows:
 ‚Ä¢ Comprehensiveness. How much detail does the answer provide to cover all aspects and
 details of the question?
 ‚Ä¢ Diversity. Howvaried andrich is the answerin providing different perspectives and insights
 on the question?
 ‚Ä¢ Empowerment. How well does the answer help the reader understand and make informed
 judgements about the topic?
 ‚Ä¢ Directness. How specifically and clearly does the answer address the question?
 For our evaluation, the LLM is provided with the question, target metric, and a pair of answers, and
 asked to assess which answer is better according to the metric, as well as why. It returns the winner
 if one exists, otherwise a tie if they are fundamentally similar and the differences are negligible.
 To account for the stochasticity of LLMs, we run each comparison five times and use mean scores.
 Table 2 shows an example of LLM-generated assessment.

Figure4:Head-to-headwinratepercentagesof(rowcondition)over(columncondition)acrosstwo
 datasets, fourmetrics,and125questionspercomparison(eachrepeatedfivetimesandaveraged).
 Theoverallwinnerperdatasetandmetricisshowninbold. Self-winrateswerenotcomputedbut
 areshownastheexpected50%forreference.AllGraphRAGconditionsoutperformedna¬® ƒ±veRAG
 oncomprehensivenessanddiversity.ConditionsC1-C3als",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['b0b464bc92a541e48547fe9738378dab' '2567445079794d1e84f17abc48776002'
 '392be891f8b649fabdc20e7bf549f669' '0111777c4e9e4260ab2e5ddea7cbcf58'
 '785f7f32471c439e89601ab81c828d1d' '6768339b54084020aec27adcef8994ff'
 'f09f381c319f4251847d1a4bb8cdcac1' 'eec11f567e7f4943b157c3a657eb9a46'
 'efef117839b64ce9adf614a461d41ba6']","['19aa5f0b738c4f4a96668c80c3e93331' 'f8402b10349f4db888ac4fb6fd81723a'
 '5927f9089289429da4adf2bbd5641e44' '60724b8b268044b69a4b3d939f1757e2'
 'd931685d35e149909472f736114ca62f' 'ea27218042d640fd81c23eb64aff6b46'
 '9e5d626681094933abf87cf797f2fa46']"
b83d819b03401fb8332316960610e5d6,"-headwinratepercentagesof(rowcondition)over(columncondition)acrosstwo
 datasets, fourmetrics,and125questionspercomparison(eachrepeatedfivetimesandaveraged).
 Theoverallwinnerperdatasetandmetricisshowninbold. Self-winrateswerenotcomputedbut
 areshownastheexpected50%forreference.AllGraphRAGconditionsoutperformedna¬® ƒ±veRAG
 oncomprehensivenessanddiversity.ConditionsC1-C3alsoshowedslightimprovementsinanswer
 comprehensivenessanddiversityoverTS(globaltextsummarizationwithoutagraphindex).
 3.5 Configuration
 Theeffect of contextwindowsizeonanyparticular task isunclear, especiallyformodels like
 gpt-4-turbowitha largecontext sizeof128k tokens. Given thepotential for information to
 be‚Äúlostinthemiddle‚Äùoflongercontexts(Kuratovetal.,2024;Liuetal.,2023),wewantedtoex
ploretheeffectsofvaryingthecontextwindowsizeforourcombinationsofdatasets,questions,and
 metrics. Inparticular,ourgoalwastodeterminetheoptimumcontextsizeforourbaselinecondition
 (SS)andthenusethisuniformlyforallquery-timeLLMuse. Tothatend,wetestedfourcontext
 windowsizes: 8k,16k,32kand64k. Surprisingly",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['2171091ada0942d8ae7944df11659f6e' 'bcfdc48e5f044e1d84c5d217c1992d4b'
 'b232fb0f2ac14790b931d1e7fcddd8ad']",['545358ff14f84601a22e9f39f5ef1534' '1b0e7dbc7c5944a7833f6540bde1fa4f']
3900d15a5f3ace358fc06038c34cdf79,"uetal.,2023),wewantedtoex
ploretheeffectsofvaryingthecontextwindowsizeforourcombinationsofdatasets,questions,and
 metrics. Inparticular,ourgoalwastodeterminetheoptimumcontextsizeforourbaselinecondition
 (SS)andthenusethisuniformlyforallquery-timeLLMuse. Tothatend,wetestedfourcontext
 windowsizes: 8k,16k,32kand64k. Surprisingly, thesmallestcontextwindowsizetested(8k)
 wasuniversallybetterforallcomparisonsoncomprehensiveness(averagewinrateof58.1%),while
 performingcomparablywithlargercontextsizesondiversity(averagewinrate=52.4%),andem
powerment(averagewinrate=51.3%).Givenourpreferenceformorecomprehensiveanddiverse
 answers,wethereforeusedafixedcontextwindowsizeof8ktokensforthefinalevaluation.
 3.6 Results
 Theindexingprocessresultedinagraphconsistingof8564nodesand20691edgesforthePodcast
 dataset,andalargergraphof15754nodesand19520edgesfortheNewsdataset.Table3showsthe
 numberofcommunitysummariesatdifferentlevelsofeachgraphcommunityhierarchy.
 Global approachesvs. na¬®ƒ±veRAG.As shown inFigure4, global approachesconsistently",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['9ed7e3d187b94ab0a90830b17d66615e' 'b4c7432f712849d7aba9dccbb77471ef'
 '2567445079794d1e84f17abc48776002' '392be891f8b649fabdc20e7bf549f669'
 '0111777c4e9e4260ab2e5ddea7cbcf58' '1c16b22e18d3483b8d41b284754274e2'
 '0080f96708cd4054a5f0986ca86889f4']","['a38eace89e7e40de8f007fde24597e9e' '4728bf0cb7564bbd85c90ceaa846f290'
 '372f78df13f9452b84d898c703a1ba95' 'a10b8fad74744ae981747dadf7234b78'
 '0c0f2d8c623949f1ae89c67d0753aeab']"
d08fc91bbfe9749abab38a99a1a88dc6,"windowsizeof8ktokensforthefinalevaluation.
 3.6 Results
 Theindexingprocessresultedinagraphconsistingof8564nodesand20691edgesforthePodcast
 dataset,andalargergraphof15754nodesand19520edgesfortheNewsdataset.Table3showsthe
 numberofcommunitysummariesatdifferentlevelsofeachgraphcommunityhierarchy.
 Global approachesvs. na¬®ƒ±veRAG.As shown inFigure4, global approachesconsistentlyout
performedthena¬® ƒ±veRAG(SS)approachinbothcomprehensivenessanddiversitymetricsacross
 datasets. Specifically,globalapproachesachievedcomprehensivenesswinratesbetween72-83%
 forPodcasttranscriptsand72-80%forNewsarticles,whilediversitywinratesrangedfrom75-82%
 and62-71%respectively.Ouruseofdirectnessasavaliditytestalsoachievedtheexpectedresults,
 i.e.,thatna¬® ƒ±veRAGproducesthemostdirectresponsesacrossallcomparisons.

 Table 3: Number of context units (community summaries for C0-C3 and text chunks for TS), corre
sponding token counts, and percentage of the maximum token count. Map-reduce summarization of
 source texts is the most resource-intensive approach requiring the highest number of context tokens.
 Root-level community summaries (C0) require dramatically fewer tokens per query (",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' '9ed7e3d187b94ab0a90830b17d66615e'
 'b4c7432f712849d7aba9dccbb77471ef' '2567445079794d1e84f17abc48776002'
 '392be891f8b649fabdc20e7bf549f669' '785f7f32471c439e89601ab81c828d1d'
 'e683130322ac47708a852a5e51abb7c5' '71a0a8c1beb64da08124205e9a803d98'
 'f84314943bee4c859c9a62f268c9c216']","['2289f06dd3804a3c84371dda0bab091e' '34ff8ef897804691842071f9ff78708e'
 '5d75097d065e4b049a1678deab40949b' 'c277134d380a42cd886a14a953554792'
 'cdac6338c3234797a0d3a32cd68d1b2e' '7af06d2b32a941a4b044579a7c423371'
 '0cb2118ecc87439a91409deef7ef9830' '20c3844c80a140ac97b62dc444feee41']"
71f14506a6b15dfabd93fd1606a67b73," i.e.,thatna¬® ƒ±veRAGproducesthemostdirectresponsesacrossallcomparisons.

 Table 3: Number of context units (community summaries for C0-C3 and text chunks for TS), corre
sponding token counts, and percentage of the maximum token count. Map-reduce summarization of
 source texts is the most resource-intensive approach requiring the highest number of context tokens.
 Root-level community summaries (C0) require dramatically fewer tokens per query (9x-43x).
 Community summaries vs. source texts. When comparing community summaries to source texts
 using Graph RAG, community summaries generally provided a small but consistent improvement
 in answer comprehensiveness and diversity, except for root-level summaries. Intermediate-level
 summaries in the Podcast dataset and low-level community summaries in the News dataset achieved
 comprehensiveness win rates of 57% and 64%, respectively. Diversity win rates were 57% for
 Podcast intermediate-level summaries and 60% for News low-level community summaries. Table 3
 also illustrates the scalability advantages of Graph RAG compared to source text summarization: for
 low-level community summaries (C3), Graph RAG required 26-33% fewer context tokens, while
 for root-level community summaries (C0), it required over 97% fewer tokens. For a modest drop in
 performance compared with other global methods, root-level Graph RAG offers a highly efficient
 method for the iterative question answering",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' '59c726a8792d443e84ab052cb7942b4a'
 'adffed660d154b519c1817e514e83096' '9ed7e3d187b94ab0a90830b17d66615e'
 'b4c7432f712849d7aba9dccbb77471ef' 'ba481175ee1d4329bf07757a30abd3a1'
 '8d8da35190bf43c5878fa38f3eb4f3d2']","['a7401447d994439993da7cc57f127649' '754b0f2616064b18abb90f409ef0539a'
 'b5800c807edd4087a2420007272d15d0' 'a18dd9ea4143411cb32e261db056cf0c'
 'a38eace89e7e40de8f007fde24597e9e']"
ed433e2f5d5387b47376eb0e45ca1c99,"% for News low-level community summaries. Table 3
 also illustrates the scalability advantages of Graph RAG compared to source text summarization: for
 low-level community summaries (C3), Graph RAG required 26-33% fewer context tokens, while
 for root-level community summaries (C0), it required over 97% fewer tokens. For a modest drop in
 performance compared with other global methods, root-level Graph RAG offers a highly efficient
 method for the iterative question answering that characterizes sensemaking activity, while retaining
 advantages in comprehensiveness (72% win rate) and diversity (62% win rate) over na¬® ƒ±ve RAG.
 Empowerment. Empowermentcomparisons showed mixed results for both global approaches versus
 na¬® ƒ±ve RAG (SS) and Graph RAG approaches versus source text summarization (TS). Ad-hoc LLM
 use to analyze LLM reasoning for this measure indicated that the ability to provide specific exam
ples, quotes, and citations was judged to be key to helping users reach an informed understanding.
 Tuning element extraction prompts may help to retain more of these details in the Graph RAG index.
 4 Related Work
 4.1 RAGApproaches and Systems
 When using LLMs, RAG involves first retrieving relevant information from external data sources,
 then adding this information to the context window of the LLM along with the original query (Ram
 et al",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['59c726a8792d443e84ab052cb7942b4a' 'adffed660d154b519c1817e514e83096'
 '0111777c4e9e4260ab2e5ddea7cbcf58' '2fb7e14a3f124526bd7b24867fc18e81'
 '5c13c7d61e6c4bfe839f21e7ad3530a7' 'a621663edba64d99b7e50f1e53f32ee7']","['aa247540e90d4a7abc5bca6fafaaffa1' '34537afa1e954e08bdb52ead3a49e2f3'
 'ae043af0299f4b32a98cf187efd2a5db' '6016863be3414d5a92397f2d45fdfd78']"
38feec52b8bfbd3fd8e03635acdaec97," provide specific exam
ples, quotes, and citations was judged to be key to helping users reach an informed understanding.
 Tuning element extraction prompts may help to retain more of these details in the Graph RAG index.
 4 Related Work
 4.1 RAGApproaches and Systems
 When using LLMs, RAG involves first retrieving relevant information from external data sources,
 then adding this information to the context window of the LLM along with the original query (Ram
 et al., 2023). Na¬® ƒ±ve RAG approaches (Gao et al., 2023) do this by converting documents to text,
 splitting text into chunks, and embedding these chunks into a vector space in which similar positions
 represent similar semantics. Queries are then embedded into the same vector space, with the text
 chunks of the nearest k vectors used as context. More advanced variations exist, but all solve the
 problem of what to do when an external dataset of interest exceeds the LLM‚Äôs context window.
 Advanced RAG systems include pre-retrieval, retrieval, post-retrieval strategies designed to over
come the drawbacks of Na¬® ƒ±ve RAG, while Modular RAG systems include patterns for iterative and
 dynamic cycles of interleaved retrieval and generation (Gao et al., 2023). Our implementation of
 Graph RAG incorporates multiple concepts related to other systems. For example, our community
 summaries are a kind of self-memory (Selfmem,",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['adffed660d154b519c1817e514e83096' '42be4e140061482ea509dd3e26189480'
 '4da4ef951ff340f1a3dd679de4be3341' '2f05fcce857e4a499ca4e89a3cefbcb3'
 'b3aeb7ae009a4f52ae3ae4586e32fe11' '089b9b9841714b8da043777e2cda3767'
 '38f1e44579d0437dac1203c34678d3c3' '1ca24718a96b47f3a8855550506c4b41']","['cd8d9795f540413390927ea2a9e77c26' 'c5fac1bea509464d9dc934275d938039'
 '45b64fbddd8f4abdb86a9c3c6f53f802']"
7da3d8d244b67f09425a4a7783e4bb55," LLM‚Äôs context window.
 Advanced RAG systems include pre-retrieval, retrieval, post-retrieval strategies designed to over
come the drawbacks of Na¬® ƒ±ve RAG, while Modular RAG systems include patterns for iterative and
 dynamic cycles of interleaved retrieval and generation (Gao et al., 2023). Our implementation of
 Graph RAG incorporates multiple concepts related to other systems. For example, our community
 summaries are a kind of self-memory (Selfmem, Cheng et al., 2024) for generation-augmented re
trieval (GAR, Mao et al., 2020) that facilitates future generation cycles, while our parallel generation
 of community answers from these summaries is a kind of iterative (Iter-RetGen, Shao et al., 2023)
 or federated (FeB4RAG, Wang et al., 2024) retrieval-generation strategy. Other systems have also
 combined these concepts for multi-document summarization (CAiRE-COVID, Su et al., 2020) and
 multi-hop question answering (ITRG, Feng et al., 2023; IR-CoT, Trivedi et al., 2022; DSP, Khattab
 et al., 2022). Our use of a hierarchical index and summarization also bears resemblance to further
 approaches, such as generating a hierarchical index of text chunks by clustering the vectors of text
 embeddings (RAPTOR,",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' '59c726a8792d443e84ab052cb7942b4a'
 '9c980dfe3cab44b7a83408405edab0b6' 'f23484b1b45d44c3b7847e1906dddd37'
 '929f30875e1744b49e7b416eaf5a790c' '4920fda031804ce8a1073ace8e061ed6'
 '4b8aa4587c7344adac2cbfa69d5e40fa' '52701d941dfb45359693baae8f267056'
 '31499ee6277a4d71b19cb5b6be554c69' 'd99eabad5dfd47278692569d2a9395b1'
 'd53f15cb7f7845de91cc44ad44ff9f6e' '23becf8c6fca4f47a53ec4883d4bf63f']","['754b0f2616064b18abb90f409ef0539a' 'a9b900821b8444d69f432da08a77539f'
 '1fee51d6f4614127a3e1cc80d018506e' '00dc2c0748214e52bc799ca3e25204e9'
 '42d1a9e749ad40daa34c7b0b695f8751' '20de9a1af6ab4e88acf003cb7be0217c'
 'f3229f10a5a54cb1b91a26ffa6ee77a3' '5154b4a4f3ac43729703c69fccb54633'
 '8e0b5b4011d74bbb8dc09fa05d88369c' '5d8184f5d52040d8bb67d1a6b889e9fe']"
40f2d6a0270e54743e7ace239369da96,"ization (CAiRE-COVID, Su et al., 2020) and
 multi-hop question answering (ITRG, Feng et al., 2023; IR-CoT, Trivedi et al., 2022; DSP, Khattab
 et al., 2022). Our use of a hierarchical index and summarization also bears resemblance to further
 approaches, such as generating a hierarchical index of text chunks by clustering the vectors of text
 embeddings (RAPTOR, Sarthi et al., 2024) or generating a ‚Äútree of clarifications‚Äù to answer mul
tiple interpretations of ambiguous questions (Kim et al., 2023). However, none of these iterative or
 hierarchical approaches use the kind of self-generated graph index that enables Graph RAG.
4.2 Graphs and LLMs
 Use of graphs in connection with LLMs and RAG is a developing research area, with multiple
 directions already established. These include using LLMs for knowledge graph creation (Tra
janoska et al., 2023) and completion (Yao et al., 2023), as well as for the extraction of causal
 graphs (Ban et al., 2023; Zhang et al., 2024) from source texts. They also include forms of ad
vanced RAG (Gao et al., 2023) where the index is a knowledge graph (KAPING, Baek et al.,",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['17ed1d92075643579a712cc6c29e8ddb' '59c726a8792d443e84ab052cb7942b4a'
 '1ca24718a96b47f3a8855550506c4b41' 'd0ffa3bcd1234258953ff4956d19f561'
 'ac41b77ba33c4c84877eb425aba03aa1' '5d3184dabfd647a5a7e565f72c60ff24'
 '0ec262c2cfef4dd581f3655e5e496e31' '100c2fccd7f74d9281707082f062ba72'
 '378fc7636eeb4aabbfd40995a6960c64' '80a04aa18cd649d584292f23b10c0727'
 '4e9ca18ccc1d4527a3bc035d07f5e162' '5564257e89f1428486a64fcf52f49490'
 '83c76fbd2a004d90a5b0a6736ffed61d']","['1ce2b24bc93442148dc2240d3c6223b1' '804c1e94e7974332a817931363ddb643'
 '2091070e709e45f5ae56d40a9da45520' '0e504b58cbda4d9188050bc43004c01f'
 'c06bd37e120e4af49ec8bd6ce399473b' 'b3bf669489ae4913bb60ddfe50e41697'
 '0eba9d55a3ff46298665a0c292e2237f' '55e3f4a200eb4619ae2b6efb645464d1'
 'c44324c171674d00a743413042e9b944' '4bdaba79a3274241ab98e27aeaf98f57'
 '7c8c464ed7044a7896adfeb35f58a04d']"
7383c69e93bb8c8648181f5355d2c9a7," LLMs for knowledge graph creation (Tra
janoska et al., 2023) and completion (Yao et al., 2023), as well as for the extraction of causal
 graphs (Ban et al., 2023; Zhang et al., 2024) from source texts. They also include forms of ad
vanced RAG (Gao et al., 2023) where the index is a knowledge graph (KAPING, Baek et al., 2023),
 where subsets of the graph structure (G-Retriever, He et al., 2024) or derived graph metrics (Graph
ToolFormer, Zhang, 2023) are the objects of enquiry, where narrative outputs are strongly grounded
 in the facts of retrieved subgraphs (SURGE, Kang et al., 2023), where retrieved event-plot sub
graphs are serialized using narrative templates (FABULA, Ranade and Joshi, 2023), and where the
 system supports both creation and traversal of text-relationship graphs for multi-hop question an
swering (Wang et al., 2023b). In terms of open-source software, a variety a graph databases are
 supported by both the LangChain (LangChain, 2024) and LlamaIndex (LlamaIndex, 2024) libraries,
 while a moregeneral class of graph-based RAG applications is also emerging, including systems that
 can create and reason",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['1ca24718a96b47f3a8855550506c4b41' '83c76fbd2a004d90a5b0a6736ffed61d'
 'd9779c41e3c74fe0b26e23822a4b995b' '9d7a563b3b2d405092c31f1fe08cff77'
 'bd43f3d439a54781bd4b721a9a269b92' 'adc0f95733e74351a891c4dadf650a52'
 '225105a7be14447cb03186bd40756059' 'efce8a9d61254447a26aee99e53f0398'
 '4a75a9f0b18a48bea9c0601c0fc395c4' 'e19287afe00a431f9a593a4827d1b448'
 'f2c06f3a0c704296bf3353b91ee8af47' 'f512103ed4624accac6cbbf90d7d250a'
 '2325dafe50d1435cbee8ebcaa69688df']","['5d507985f2f540d8a1fa2d1191eae2a8' '5fa2eec73bec481b85eba22ea7a2a927'
 'e6aa5eedca984c56b5fa5e179127951d' '1c4bd4ba4ef64a93acd55faa8fd97ca9'
 '5b85c70d578c4d67b5cb4743552bd559' '956113fb770840c38bce65bb5832f988']"
e015335cdcae20e6546fe7cbdef56c1a," and where the
 system supports both creation and traversal of text-relationship graphs for multi-hop question an
swering (Wang et al., 2023b). In terms of open-source software, a variety a graph databases are
 supported by both the LangChain (LangChain, 2024) and LlamaIndex (LlamaIndex, 2024) libraries,
 while a moregeneral class of graph-based RAG applications is also emerging, including systems that
 can create and reason over knowledge graphs in both Neo4J (NaLLM, Neo4J, 2024) and Nebula
Graph (GraphRAG, NebulaGraph, 2024) formats. Unlike our Graph RAG approach, however, none
 of these systems use the natural modularity of graphs to partition data for global summarization.
 5 Discussion
 Limitations of evaluation approach. Our evaluation to date has only examined a certain class of
 sensemaking questions for two corpora in the region of 1 million tokens. More work is needed
 to understand how performance varies across different ranges of question types, data types, and
 dataset sizes, as well as to validate our sensemaking questions and target metrics with end users.
 Comparison of fabrication rates, e.g., using approaches like SelfCheckGPT (Manakul et al., 2023),
 would also improve on the current analysis.
 Trade-offs of building a graph index. We consistently observed Graph RAG achieve the best",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['3d6b216c14354332b1bf1927ba168986' 'f2c06f3a0c704296bf3353b91ee8af47'
 'f512103ed4624accac6cbbf90d7d250a' '469aeef98cd1421fa123277b93d7b83a'
 '2fb66f9a0de6406d83b61742a3b52cd6' 'b0e6cfd979ea48b997019b059999d3c2'
 'ef00ec3a324f4f5986141401002af3f6']","['4b3fc569d91f4a7aa6501ad4fcf67b7a' '956113fb770840c38bce65bb5832f988'
 '785bb55e79954b0c84a4a53cd7f0b454' '1239281fd3774b91a99358c9c1e6ee1c'
 '32b29a842b224f4c99fa1d5c764efc9a' 'f5ae7dc11fd64822a3a15e7d3839031a'
 'e1e254e67719488894eaa3553112a8cf']"
7040ba36a7c09899a355d14a30d65375," the region of 1 million tokens. More work is needed
 to understand how performance varies across different ranges of question types, data types, and
 dataset sizes, as well as to validate our sensemaking questions and target metrics with end users.
 Comparison of fabrication rates, e.g., using approaches like SelfCheckGPT (Manakul et al., 2023),
 would also improve on the current analysis.
 Trade-offs of building a graph index. We consistently observed Graph RAG achieve the best head
to-head results against other methods, but in many cases the graph-free approach to global summa
rization of source texts performed competitively. The real-world decision about whether to invest in
 building a graph index depends on multiple factors, including the compute budget, expected number
 of lifetime queries per dataset, and value obtained from other aspects of the graph index (including
 the generic community summaries and the use of other graph-related RAG approaches).
 Future work. The graph index, rich text annotations, and hierarchical community structure support
ing the current Graph RAG approach offer many possibilities for refinement and adaptation. This
 includes RAG approaches that operate in a more local manner, via embedding-based matching of
 user queries and graph annotations, as well as the possibility of hybrid RAG schemes that combine
 embedding-based matching against community reports before employing our map-reduce summa
rization mechanisms. This ‚Äúroll-up‚Äù operation could also be extended across more levels of the
 community hierarchy",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['32ee140946e5461f9275db664dc541a5' '59c726a8792d443e84ab052cb7942b4a'
 '5ac60a941a5b4934bdc43d2f87de601c' 'ef00ec3a324f4f5986141401002af3f6'
 'a542fd7aed7341468028928937ea2983' '1c5e296a5ac541c1b5cac4357537c22d'
 '5ecf534a9ffe46e0b1c2144110c691c0' '4d183e7007624fcd98af96b9d752c16d'
 '718c507cb8ac49e6a35c251ac951b5ca' 'b45ef27279c043269b23b894461d7d8c'
 '10983a248cc448c59c94df4d1d0898f0' 'e2ec7d3cdbeb4dd086ae6eb399332363'
 '67f10971666240ea930f3b875aabdc1a' '8b95083939ad4771b57a97c2d5805f36']","['acd35bb6b3cb4979a3f3fb68a86b3b05' '9e1e7f67ba044c7fbf64723af1ade58e'
 '09045ef5c4314dde9a631a206274563f' '1b9baa98ede84164883e8cdcbc7000c1'
 'e4f3fcc475a74756925b730caffcb70d' 'c23761290af24cf29adc1ee8644bdad0'
 'de51b828ce1f442bbb19a7b20bce9dda' '4a3ff6a3471945fd8c7fd5c171c56d56'
 '31bb84eb2a834dabacc0ed51af4fcefd' '5070012e83e7442381bcba1cdacdb7d8'
 'ebdd79169d7d41b99faf09b039a66204' 'e036534e17b24dd2895167a20873230f'
 'a00bc5e4be634b08b1f084b6a07abafd' 'ce8241c964724429bb361b7b53867007'
 '61cd7f168f7f44d6a23415e9497f1e65' '3be77a7b57e34c55acc1f1dfbc64ee10'
 '751c564f8ff6444d9d4c8de4a677e655' '96963c158fb64680bded290f442ff9aa'
 'bdbfbde5dd244447a2a0674b30ae3e8f' 'f970bfe31db74929abff6ea38e5d18e6'
 '6f0c2a8b79e6406a8ab7a20864ae2ce2' '7b09e60e33f44ffdab9c656c5b9c1d50'
 '8b7beab7c0a143aea7bffc31df7528d5']"
5e2933c9646c751e6a60c9de12a255f2," text annotations, and hierarchical community structure support
ing the current Graph RAG approach offer many possibilities for refinement and adaptation. This
 includes RAG approaches that operate in a more local manner, via embedding-based matching of
 user queries and graph annotations, as well as the possibility of hybrid RAG schemes that combine
 embedding-based matching against community reports before employing our map-reduce summa
rization mechanisms. This ‚Äúroll-up‚Äù operation could also be extended across more levels of the
 community hierarchy, as well as implemented as a more exploratory ‚Äúdrill down‚Äù mechanism that
 follows the information scent contained in higher-level community summaries.
 6 Conclusion
 We have presented a global approach to Graph RAG, combining knowledge graph generation,
 retrieval-augmented generation (RAG), and query-focused summarization (QFS) to support human
 sensemaking over entire text corpora. Initial evaluations show substantial improvements over a
 na¬® ƒ±ve RAG baseline for both the comprehensiveness and diversity of answers, as well as favorable
 comparisons to a global but graph-free approach using map-reduce source text summarization. For
 situations requiring many global queries over the same dataset, summaries of root-level communi
ties in the entity-based graph index provide a data index that is both superior to na¬® ƒ±ve RAG and
 achieves competitive performance to other global methods at a fraction of the token cost.
 An open-source, Python-based implementation of both global and local Graph",300,['78b4407b9fac94c6e276c9a6a5cd0745'],"['101572f552b54e529fe7765c05168981' 'ba481175ee1d4329bf07757a30abd3a1'
 '3c4062de44d64870a3cc5913d5769244' '24652fab20d84381b112b8491de2887e'
 'd4602d4a27b34358baa86814a3836d68']","['d984f08ad62f47ab9aabb9aeec1b245e' '43603c7868164ac38c659bce7a77f45a'
 '54a20cc6062d4b7193d023b6ff20461f']"
e31d2d134cf501c93f9445914d7350f9,"iveness and diversity of answers, as well as favorable
 comparisons to a global but graph-free approach using map-reduce source text summarization. For
 situations requiring many global queries over the same dataset, summaries of root-level communi
ties in the entity-based graph index provide a data index that is both superior to na¬® ƒ±ve RAG and
 achieves competitive performance to other global methods at a fraction of the token cost.
 An open-source, Python-based implementation of both global and local Graph RAG approaches is
 forthcoming at https://aka.ms/graphrag.


",114,['78b4407b9fac94c6e276c9a6a5cd0745'],"['68e0c60d2e8845d89d9d0ad397833648' '36be44627ece444284f9e759b8cd25c6'
 'a64b4b17b07a44e4b1ac33580d811936' '423b72bbd56f4caa98f3328202c1c3c9'
 '5c7ef01f46a94641bf1ae5cd25f8a538' 'aefde1f7617f4c0e9aed31db77f6d862'
 'ad52ba79a84748a49067e53b1d5095f9']","['fcdc0cc5ff93453eb0b94b9254760999' 'd03eb34a0612420680555ab9f10d03d5'
 'b066746cdff7440c8a3591f0c098201d' '1e2eded8ef7b4b458c33fbc2d36c4380']"
251e8d332b451d900df961cbe215bca0,"GraphRAG Indexing ü§ñ
The GraphRAG indexing package is a data pipeline and transformation suite that is designed to extract meaningful, structured data from unstructured text using LLMs.

Indexing Pipelines are configurable. They are composed of workflows, standard and custom steps, prompt templates, and input/output adapters. Our standard pipeline is designed to:

extract entities, relationships and claims from raw text
perform community detection in entities
generate community summaries and reports at multiple levels of granularity
embed entities into a graph vector space
embed text chunks into a textual vector space
The outputs of the pipeline can be stored in a variety of formats, including JSON and Parquet - or they can be handled manually via the Python API.

Getting Started
Requirements
See the requirements section in Get Started for details on setting up a development environment.

The Indexing Engine can be used in either a default configuration mode or with a custom pipeline. To configure GraphRAG, see the configuration documentation. After you have a config file you can run the pipeline using the CLI or the Python API.

Usage
CLI
# Via Poetry
poetry run poe cli --root <data_root> # default config mode
poetry run poe cli --config your_pipeline.yml # custom config mode

# Via Node
yarn run:index --root <data_root> # default config mode
yarn run:index --config your_pipeline.yml # custom config mode

Python API
from graphrag.index import",300,['a75a18ec511e6735c719807c25a3b3d7'],"['289616058bf4495887292003b27ba216' '7ffa3a064bce468082739c5a164df5a3'
 'ce36d1d637cf4a4e93f5e37ffbc6bd76' 'eeb9c02c0efa4131b9e95d33c31019fc'
 '7b2472c5dd9949c58828413387b94659' 'bdddcb17ba6c408599dd395ce64f960a'
 'bc70fee2061541148833d19e86f225b3']","['c59e3e931b0f4cf888c2eb70857ee753' 'd1e9c550a0e74c48ae81c319f26ccafc'
 '3730b5d759ba4fd28a54af0a02151f09' '82b7f7c27e2348f880c94ffb80942de7'
 '0980c4f558654466b4d691d0cb7ce16d' 'f1e47cf5daa441649c3474c3339bb704']"
f3a07680cbe8ab1f6055369da05f4f38,"2"",  # from above
                    ""to"": ""col_multiplied"",  # new column name
                    ""operator"": ""*"",  # multiply the two columns
                },
                # Since we're trying to act on the default input, we don't need explicitly to specify an input
            }
        ]
    ),
]

dataset = pd.DataFrame([{""col1"": 2, ""col2"": 4}, {""col1"": 5, ""col2"": 10}])
outputs = []
async for output in await run_pipeline(dataset=dataset, workflows=workflows):
    outputs.append(output)
pipeline_result = outputs[-1]
print(pipeline_result)

Further Reading
To start developing within the GraphRAG project, see getting started
To understand the underlying concepts and execution model of the indexing library, see the architecture documentation
To get running with a series of examples, see the examples documentation
To read more about configuring the indexing engine, see the configuration documentation",198,['a75a18ec511e6735c719807c25a3b3d7'],"['859dedcc3736439a8a563419f16cb3d8' '7e0d14ca308b4796bdc675a64bd3a36e'
 '8323efc8e539419e9ca3c98e758f6609' 'a80c7c98c0b647f8b9f6f8cc09168e44'
 '2d66a15939294d21b83b3e277f0a4e46' '47f6d6573cf34e1096c95e36251dd60c'
 '2fbd74d5ccca4be99c5257b3ac95cfba' 'a2b1621a3e424ae29a6a73f00edbeca3']","['64be9b98299f4d349e0f4358685ca235' 'd221b743a51d464b87de3b72b85f6b59'
 '0119f233c8394b9584e55fadcce173f0' '2c2392247a35456da663adfcffd12e73'
 '167a32ff67ce4471baa8cf019ee7c17b' '556fba72a0854ce4831f6cfea6fd035e']"
bdb8f9e797229f596744d9636ab857b0,"Prompt Tuning ‚öôÔ∏è
This page provides an overview of the prompt tuning options available for the GraphRAG indexing engine.

Default Prompts
The default prompts are the simplest way to get started with the GraphRAG system. It is designed to work out-of-the-box with minimal configuration. You can find more detail about these prompts in the following links:

Entity/Relationship Extraction
Entity/Relationship Description Summarization
Claim Extraction
Community Reports
Auto Templating
Auto Templating leverages your input data and LLM interactions to create domain adaptive templates for the generation of the knowledge graph. It is highly encouraged to run it as it will yield better results when executing an Index Run. For more details about how to use it, please refer to the Auto Templating documentation.

Manual Configuration
Manual configuration is an advanced use-case. Most users will want to use the Auto Templating feature instead. Details about how to use manual configuration are available in the Manual Prompt Configuration documentation.

Prompt Tuning ‚öôÔ∏è
GraphRAG provides the ability to create domain adaptive templates for the generation of the knowledge graph. This step is optional, though it is highly encouraged to run it as it will yield better results when executing an Index Run.

The templates are generated by loading the inputs, splitting them into chunks (text units) and then running a series of LLM invocations and template substitutions to generate the final prompts. We suggest using the default values provided by the script, but in",300,['a9acbe32a842fc986348d830aeecab88'],"['f1c6eed066f24cbdb376b910fce29ed4' '9ab48505fb1b487babd0d1f6d3a3f980'
 'ec45e1c400654c4f875046926486ded7' '047cd93e9d704c7d8dadb6e79f9458df'
 '5b71ee73a5b6484495b2a0a75219426c' 'e1f524d4b9754ce2b64a0a4c8f73b854'
 'ae1fe1c014c54ec4bcdf10dbdaed5068' '92646910ee624bd7909fac2b5c0232e3']","['5b019e8652264136b95306bac70a2e25' '325fc9e2b37043b7af9f6ad338b09469'
 '056f23eb710f471393ae5dc417d83fd9' '8e2e6eeed5a04c9f80efbcfc624ced95'
 'ea6d546f1caa4b4aaacdad8b8af195ec' '267ce44e6dae43ee94d0d375ec08ef17']"
9b364093aeecfc789c70fc5bd9503487," Tuning ‚öôÔ∏è
GraphRAG provides the ability to create domain adaptive templates for the generation of the knowledge graph. This step is optional, though it is highly encouraged to run it as it will yield better results when executing an Index Run.

The templates are generated by loading the inputs, splitting them into chunks (text units) and then running a series of LLM invocations and template substitutions to generate the final prompts. We suggest using the default values provided by the script, but in this page you'll find the detail of each in case you want to further explore and tweak the template generation algorithm.

Prerequisites
Before running the automatic template generation make sure you have already initialized your workspace with the graphrag.index --init command. This will create the necessary configuration files and the default prompts. Refer to the Init Documentation for more information about the initialization process.

Usage
You can run the main script from the command line with various options:

python -m graphrag.prompt_tune [--root ROOT] [--domain DOMAIN]  [--method METHOD] [--limit LIMIT] [--language LANGUAGE] [--max-tokens MAX_TOKENS] [--chunk-size CHUNK_SIZE] [--no-entity-types] [--output OUTPUT]

Command-Line Options
--root (optional): The data project root directory, including the config files (YML, JSON, or .env). Defaults to the current directory.

--domain (optional): The domain related to your input data, such as 'space science', 'microbiology',",300,['a9acbe32a842fc986348d830aeecab88'],"['3d6b216c14354332b1bf1927ba168986' '05913bee89a94bca88449249e35ba74d'
 '57b8930790c34dcba4a32c6be703ed78']",['cbc1667556f84a5eadf867a823e6986c' 'a876d1ab79864396bc47a039225fd5c7']
9243633f55cccd0885ba553e14fa5e3f," ROOT] [--domain DOMAIN]  [--method METHOD] [--limit LIMIT] [--language LANGUAGE] [--max-tokens MAX_TOKENS] [--chunk-size CHUNK_SIZE] [--no-entity-types] [--output OUTPUT]

Command-Line Options
--root (optional): The data project root directory, including the config files (YML, JSON, or .env). Defaults to the current directory.

--domain (optional): The domain related to your input data, such as 'space science', 'microbiology', or 'environmental news'. If left empty, the domain will be inferred from the input data.

--method (optional): The method to select documents. Options are all, random, or top. Default is random.

--limit (optional): The limit of text units to load when using random or top selection. Default is 15.

--language (optional): The language to use for input processing. If it is different from the inputs' language, the LLM will translate. Default is """" meaning it will be automatically detected from the inputs.

--max-tokens (optional): Maximum token count for prompt generation. Default is 2000.

--chunk-size (optional): The size in tokens to use for generating text units from input documents. Default is 200.

--no-entity-types (optional): Use untyped entity extraction generation. We recommend using this when your data covers a lot of topics or it is highly randomized.

--output (optional): The folder to save the generated prompts.",300,['a9acbe32a842fc986348d830aeecab88'],"['fd9cb733b28d420cb5cef01e545a132c' '838c4498bc3c437f8d65428b580766a2'
 '1b893f24eb98477aad6ce49c0f26737e' '6573bc2af4f94596a3f4452a602d6fc4'
 '0dddcca0e5df4b16bc03a51a2d2d8e16' 'df40ad480a3c47299a6c8fad05349304'
 'fe98fb197d294b0b837aee8d5a98dfb1' 'feb9ddd0ac2949178f26a36949aa5422'
 'b4e4fa2e3dfc46e68d532d659b18d17d']","['40293e74dbc643e8ab6546dff759ac7c' '1834b753dc7f4a8b98c2317a551b56ee'
 'd3aa564fb4eb430a8ca6813ca76bfff6' 'd9b948357d96419ca135065ce1c360ef'
 'b95728a0b96b405cbccafa6c12fd8722']"
ce9cc3ed2e5f890d02e867ed0b0f8ff9," meaning it will be automatically detected from the inputs.

--max-tokens (optional): Maximum token count for prompt generation. Default is 2000.

--chunk-size (optional): The size in tokens to use for generating text units from input documents. Default is 200.

--no-entity-types (optional): Use untyped entity extraction generation. We recommend using this when your data covers a lot of topics or it is highly randomized.

--output (optional): The folder to save the generated prompts. Default is ""prompts"".

Example Usage
python -m graphrag.prompt_tune --root /path/to/project --domain ""environmental news"" --method random --limit 10 --language English --max-tokens 2048 --chunk-size 256 --no-entity-types --output /path/to/output

or, with minimal configuration (suggested):

python -m graphrag.prompt_tune --root /path/to/project --no-entity-types

Document Selection Methods
The auto template feature ingests the input data and then divides it into text units the size of the chunk size parameter. After that, it uses one of the following selection methods to pick a sample to work with for template generation:

random: Select text units randomly. This is the default and recommended option.
top: Select the head n text units.
all: Use all text units for the generation. Use only with small datasets; this option is not usually recommended.
Modify Env Vars
After running auto-templating,",300,['a9acbe32a842fc986348d830aeecab88'],"['fd9cb733b28d420cb5cef01e545a132c' '838c4498bc3c437f8d65428b580766a2'
 '1b893f24eb98477aad6ce49c0f26737e' '6573bc2af4f94596a3f4452a602d6fc4'
 '0dddcca0e5df4b16bc03a51a2d2d8e16' 'b4e4fa2e3dfc46e68d532d659b18d17d'
 'f58813d090b947a48c1b4614b92c3ec3' '30a251bc3d04430d82b5a1a98c7b8c75'
 '93e1d19f9bfa4c6b8962d56d10ea9483']","['40293e74dbc643e8ab6546dff759ac7c' 'fe18688bd4ef44d1a184ec6d1451a5cf'
 '0f1282bdfedb4f6e8765007a90dd2959' '540af5c5d4cd41ceb29c40c5fb02e2fe']"
4f37c0e9c3c9bac4e5c1c6821eea442e,"ests the input data and then divides it into text units the size of the chunk size parameter. After that, it uses one of the following selection methods to pick a sample to work with for template generation:

random: Select text units randomly. This is the default and recommended option.
top: Select the head n text units.
all: Use all text units for the generation. Use only with small datasets; this option is not usually recommended.
Modify Env Vars
After running auto-templating, you should modify the following environment variables (or config variables) to pick up the new prompts on your index run. Note: Please make sure to update the correct path to the generated prompts, in this example we are using the default ""prompts"" path.

GRAPHRAG_ENTITY_EXTRACTION_PROMPT_FILE = ""prompts/entity_extraction.txt""

GRAPHRAG_COMMUNITY_REPORT_PROMPT_FILE = ""prompts/community_report.txt""

GRAPHRAG_SUMMARIZE_DESCRIPTIONS_PROMPT_FILE = ""prompts/summarize_descriptions.txt""

Prompt Tuning‚öôÔ∏è
The GraphRAG indexer, by default, will run with a handful of prompts that are designed to work well in the broad context of knowledge discovery. However, it is quite common to want to tune the prompts to better suit your specific use case. We provide a means for you to do this by allowing you to specify a custom prompt file, which will each use a series of token-replacements internally",300,['a9acbe32a842fc986348d830aeecab88'],"['f1c6eed066f24cbdb376b910fce29ed4' '8046335ba70b434aa3188392a746fd78'
 '5c02b1ab32064c64a0f8b27b219e358a' 'c5f77ba0c261408780db3d50346f16b7'
 '453ecf5476f64f4a8d5020b95baf1314' '6a1d83c9ce2b483dbd7de5ab3ae2487d'
 '66c3dffb7d7a4fa8bb6b48a22ca917a6' '6f3dd1fd6d7f4df4af0656ed0525c92e']","['6bb11aa08b414232b5b45f10f5766f62' '179737fd23c943babdfae01ac5c6bfc3'
 '65a31e4da283411fb7c971f63d606723' '5d6dc034d2014e8c930fde69c31b99cf'
 '127cbb53940f4efa8e1807b4452375ba' 'f1ea6ef9539043ab887bcce22ccf9625']"
6a7157695d90d434b2625c3f05420916," = ""prompts/summarize_descriptions.txt""

Prompt Tuning‚öôÔ∏è
The GraphRAG indexer, by default, will run with a handful of prompts that are designed to work well in the broad context of knowledge discovery. However, it is quite common to want to tune the prompts to better suit your specific use case. We provide a means for you to do this by allowing you to specify a custom prompt file, which will each use a series of token-replacements internally.

Each of these prompts may be overridden by writing a custom prompt file in plaintext. We use token-replacements in the form of {token_name}, and the descriptions for the available tokens can be found below.

Entity/Relationship Extraction
Prompt Source

Tokens (values provided by extractor)
{input_text} - The input text to be processed.
{entity_types} - A list of entity types
{tuple_delimiter} - A delimiter for separating values within a tuple. A single tuple is used to represent an individual entity or relationship.
{record_delimiter} - A delimiter for separating tuple instances.
{completion_delimiter} - An indicator for when generation is complete.
Summarize Entity/Relationship Descriptions
Prompt Source

Tokens (values provided by extractor)
{entity_name} - The name of the entity or the source/target pair of the relationship.
{description_list} - A list of descriptions for the entity or relationship.
Claim Extraction
Prompt Source

Tokens (values provided by extractor",300,['a9acbe32a842fc986348d830aeecab88'],"['f1c6eed066f24cbdb376b910fce29ed4' '8870cf2b5df64d2cab5820f67e29b9f1'
 '047cd93e9d704c7d8dadb6e79f9458df' 'e1f524d4b9754ce2b64a0a4c8f73b854'
 '711eb39432794b0a91110358dd536517' '0e00585b08044954a254116665400463'
 'db0147eff2204a20b5e5e6bec7a8bae5']","['de31810d43174a52aa2f31b72f4542f5' 'a6ae1d99330443fcacb06ace15a0d937'
 'b37e5d15f3154ee39df016b8eac8de66' 'b50c4f053f0546029c4095b7b93aa05e'
 '0cea7f7a7fab49339cdd6fb02d0d183e']"
853bfe9a74a916130a20f81506bcaf09," to represent an individual entity or relationship.
{record_delimiter} - A delimiter for separating tuple instances.
{completion_delimiter} - An indicator for when generation is complete.
Summarize Entity/Relationship Descriptions
Prompt Source

Tokens (values provided by extractor)
{entity_name} - The name of the entity or the source/target pair of the relationship.
{description_list} - A list of descriptions for the entity or relationship.
Claim Extraction
Prompt Source

Tokens (values provided by extractor)
{input_text} - The input text to be processed.
{tuple_delimiter} - A delimiter for separating values within a tuple. A single tuple is used to represent an individual entity or relationship.
{record_delimiter} - A delimiter for separating tuple instances.
{completion_delimiter} - An indicator for when generation is complete.
Note: there is additional paramater for the Claim Description that is used in claim extraction. The default value is

""Any claims or facts that could be relevant to information discovery.""

See the configuration documentation for details on how to change this.

Generate Community Reports
Prompt Source

Tokens (values provided by extractor)
{input_text} - The input text to generate the report with. This will contain tables of entities and relationships.",253,['a9acbe32a842fc986348d830aeecab88'],"['67bb4f4678284819add02ba04f3b1103' '2033ec0487f04240abb3bdbe77b39087'
 'f026fab8fec948ae9e7baa2ad715e6ef' 'd0d7ed36d6f54b5d986dfd854096b728'
 'bf6a4c18f44042799eb7456a6b85b54a' 'fac4a59c2278498d83f9f1b4231ad62e']","['5b89f0d8101c419b86e1959cca2db848' 'cdb407fc600b45caa6f94f82e89d2e4f'
 '7f4905fcb43e4d6ca23e6d2b40f6958e']"
21cdf11c58927ae505d3d375d1b75c82," to information discovery.""

See the configuration documentation for details on how to change this.

Generate Community Reports
Prompt Source

Tokens (values provided by extractor)
{input_text} - The input text to generate the report with. This will contain tables of entities and relationships.",53,['a9acbe32a842fc986348d830aeecab88'],"['9ab48505fb1b487babd0d1f6d3a3f980' 'd6d2b5862ddc4c4d87deee3423506817'
 '47d588d26e2b4cccb68fe2af4c147c8f' 'c0f2dc03d8df400db4997c1a0babd6ad']","['e1ae27016d63447a8dfa021370cba0fa' 'f8c10f61a8f344cea7bdafa2d8af14b8'
 'aa7d003f25624e19bc88d3951d4dc943']"
84d24b5db902baca7217b5e3bb6ec462,"Get Started
Requirements
Python 3.10-3.12

To get started with the GraphRAG system, you have a few options:

üëâ Use the GraphRAG Accelerator solution
üëâ Install from pypi.
üëâ Use it from source

Quickstart
To get started with the GraphRAG system we recommend trying the Solution Accelerator package. This provides a user-friendly end-to-end experience with Azure resources.

Top-Level Modules
Indexing Pipeline Overview
Query Engine Overview

Overview
The following is a simple end-to-end example for using the GraphRAG system. It shows how to use the system to index some text, and then use the indexed data to answer questions about the documents.

Install GraphRAG
pip install graphrag

Running the Indexer
Now we need to set up a data project and some initial configuration. Let's set that up. We're using the default configuration mode, which you can customize as needed using a config file, which we recommend, or environment variables.

First let's get a sample dataset ready:

mkdir -p ./ragtest/input

Now let's get a copy of A Christmas Carol by Charles Dickens from a trusted source

curl https://www.gutenberg.org/cache/epub/24022/pg24022.txt > ./ragtest/input/book.txt

Next we'll inject some required config variables:

Set Up Your Workspace Variables
First let's make sure to setup the required environment variables.",300,['b60327cd0428bd92d6c875c7541e3c6e'],"['b45241d70f0e43fca764df95b2b81f77' '0211d61aae834229a3a1e004ff5cc658'
 'ccbbbcc055c34709abcf103208c2c299' '989add81cf874018a569239b68d17ff2'
 'fd7d94fbab084bc380480abeef6bfade']","['36870a3393f6413e9bf647168eb6977a' 'f0a28fe3f68546dba7850815f7933275'
 '45b59feba7134bc18632cb42530c189a' '7747cd2048f94d378e83265b9561d921']"
5aaa26fbe97dc7573cd1a56d6fb11213," the GraphRAG pipeline. If you inspect the file, you'll see a single environment variable defined, GRAPHRAG_API_KEY=<API_KEY>. This is the API key for the OpenAI API or Azure OpenAI endpoint. You can replace this with your own API key.
settings.yaml contains the settings for the pipeline. You can modify this file to change the settings for the pipeline.
OpenAI and Azure OpenAI
To run in OpenAI mode, just make sure to update the value of GRAPHRAG_API_KEY in the .env file with your OpenAI API key.

Azure OpenAI
In addition, Azure OpenAI users should set the following variables in the settings.yaml file. To find the appropriate sections, just search for the llm: configuration, you should see two sections, one for the chat endpoint and one for the embeddings endpoint. Here is an example of how to configure the chat endpoint:

type: azure_openai_chat # Or azure_openai_embedding for embeddings
api_base: https://<instance>.openai.azure.com
api_version: 2024-02-15-preview # You can customize this for other versions
deployment_name: <azure_model_deployment_name>

For more details about configuring GraphRAG, see the configuration documentation.
To learn more about Initialization, refer to the Initialization documentation.
For more details about using the CLI, refer to the CLI documentation.
Running the Indexing pipeline
Finally we'll run the pipeline!

python -m",300,['b60327cd0428bd92d6c875c7541e3c6e'],"['0fbcca3f17c649a08aea64b5a7d9ef36' '005d2154da754b21adcd90ac921bd5f7'
 '711ba818354546cea69f1532b92a2f26' '5c4d8a8f9c104176b87d2bfdf04ae0bd'
 '5a781604f1fb4719b730f43f534627f6']","['d9b127eab2f64e338d7adcd186786a45' 'a18f7c9f58ca49d6acf18e1ca69d3033'
 'c4e9532dbc734264a0e3e827bc8014c6' '003e5d505a01434596c6d65ff20b0bdf'
 'f79358f3535045d9aad3b828df59293b']"
7c1bad237a1ef86cb41b6c5dbad4ffc3,"
api_base: https://<instance>.openai.azure.com
api_version: 2024-02-15-preview # You can customize this for other versions
deployment_name: <azure_model_deployment_name>

For more details about configuring GraphRAG, see the configuration documentation.
To learn more about Initialization, refer to the Initialization documentation.
For more details about using the CLI, refer to the CLI documentation.
Running the Indexing pipeline
Finally we'll run the pipeline!

python -m graphrag.index --root ./ragtest

pipeline executing from the CLI

This process will take some time to run. This depends on the size of your input data, what model you're using, and the text chunk size being used (these can be configured in your .env file). Once the pipeline is complete, you should see a new folder called ./ragtest/output/<timestamp>/artifacts with a series of parquet files.

Using the Query Engine
Running the Query Engine
Now let's ask some questions using this dataset.

Here is an example using Global search to ask a high-level question:

python -m graphrag.query \
--root ./ragtest \
--method global \
""What are the top themes in this story?""

Here is an example using Local search to ask a more specific question about a particular character:

python -m graphrag.query \
--root ./ragtest \
--method local \
""Who is Scrooge, and what are his main relationships?""

Please refer to",300,['b60327cd0428bd92d6c875c7541e3c6e'],"['3671ea0dd4e84c1a9b02c5ab2c8f4bac' '147c038aef3e4422acbbc5f7938c4ab8'
 'ecdc1020b10e49ca869d399825e16fa3' '0d8fde01d7234726a00d7e73e2e01d66'
 '9c4bd60958fd4e09a6d5b9e2ab163b5a' '39d31f770cf740e78d526a2e1101a1db'
 '9d282b2250f7408888504f1f93c202a8' 'c063484895794a0eaae1b0ff070ad4c9']","['61f1dc4267314470ac820b6a46c61f7b' '5174cdabb6024de0975762d3a80b059f'
 '97738fe0830d405ba53598b5cb1e5e38' '1ee2380c1eda4ebb8c9304820750ac88'
 'c1e4a9dbe55c4fb89f0d927c9fb067a4' '89dd5a0943c64247adae624abbc95afb']"
ae6e91a8cc5773dbd4789773c9ef5a30,"'s ask some questions using this dataset.

Here is an example using Global search to ask a high-level question:

python -m graphrag.query \
--root ./ragtest \
--method global \
""What are the top themes in this story?""

Here is an example using Local search to ask a more specific question about a particular character:

python -m graphrag.query \
--root ./ragtest \
--method local \
""Who is Scrooge, and what are his main relationships?""

Please refer to Query Engine docs for detailed information about how to leverage our Local and Global search mechanisms for extracting meaningful insights from data after the Indexer has wrapped up execution.",131,['b60327cd0428bd92d6c875c7541e3c6e'],"['dde131ab575d44dbb55289a6972be18f' 'c160b9cb27d6408ba6ab20214a2f3f81'
 '23527cd679ff4d5a988d52e7cd056078' 'e8868920e21b4431aad16e86db977ecb'
 'aea3378bfff842e5b3f4b7a4b55b3879']","['83cd5df42643494396b00d6cb6376def' '909d28e443fd4e0bac189373125c8309'
 '57e16ff087a84b8ebd70de1e7e534225' 'eb961d47a30c4870a1134b4a4672a8b2']"
ccd2de9e2219521fbca779843c65af58,"Configuring GraphRAG Indexing
The GraphRAG system is highly configurable. This page provides an overview of the configuration options available for the GraphRAG indexing engine.

Default Configuration Mode
The default configuration mode is the simplest way to get started with the GraphRAG system. It is designed to work out-of-the-box with minimal configuration. The primary configuration sections for the Indexing Engine pipelines are described below. The main ways to set up GraphRAG in Default Configuration mode are via:

Init command (recommended)
Purely using environment variables
Using JSON or YAML for deeper control
Custom Configuration Mode
Custom configuration mode is an advanced use-case. Most users will want to use the Default Configuration instead. The primary configuration sections for Indexing Engine pipelines are described below. Details about how to use custom configuration are available in the Custom Configuration Mode documentation.

Configuring GraphRAG Indexing
To start using GraphRAG, you need to configure the system. The init command is the easiest way to get started. It will create a .env and settings.yaml files in the specified directory with the necessary configuration settings. It will also output the default LLM prompts used by GraphRAG.

Usage
python -m graphrag.index [--init] [--root PATH]

Options
--init - Initialize the directory with the necessary configuration files.
--root PATH - The root directory to initialize. Default is the current directory.
Example
python -m graphrag.index --init --root ./ragtest",300,['bbe409e13dd4d7bbd284976287a4feba'],"['289616058bf4495887292003b27ba216' 'd562223c17d948bf98e34b4d97dde932'
 'cde2d75c51d245879265b79d14b8699b' '44594467054849d4a1fadb46ddd51641']","['305b80bb4df5488b8a34129daeeae0c7' '66fa0de756da440bad8da583306410c4'
 '405e9907440d4deab71f3960ae36f47b']"
12294feb07a1d202b27241eaaf64718b," way to get started. It will create a .env and settings.yaml files in the specified directory with the necessary configuration settings. It will also output the default LLM prompts used by GraphRAG.

Usage
python -m graphrag.index [--init] [--root PATH]

Options
--init - Initialize the directory with the necessary configuration files.
--root PATH - The root directory to initialize. Default is the current directory.
Example
python -m graphrag.index --init --root ./ragtest

Output
The init command will create the following files in the specified directory:

settings.yaml - The configuration settings file. This file contains the configuration settings for GraphRAG.
.env - The environment variables file. These are referenced in the settings.yaml file.
prompts/ - The LLM prompts folder. This contains the default prompts used by GraphRAG, you can modify them or run the Auto Prompt Tuning command to generate new prompts adapted to your data.
Next Steps
After initializing your workspace, you can either run the Prompt Tuning command to adapt the prompts to your data or even start running the Indexing Pipeline to index your data. For more information on configuring GraphRAG, see the Configuration documentation.


Configuring GraphRAG Indexing
To start using GraphRAG, you need to configure the system. The init command is the easiest way to get started. It will create a .env and settings.yaml files in the specified directory with the necessary configuration settings. It will also",300,['bbe409e13dd4d7bbd284976287a4feba'],"['3d6b216c14354332b1bf1927ba168986' 'd6d2b5862ddc4c4d87deee3423506817'
 '5a781604f1fb4719b730f43f534627f6' '2918130221f94f4387da049b647bfe6a'
 'fd139ac75b0e4777ab67b7423eaaa37f' 'a701c349eb7142d48ba7efad89caf9d2']","['c09f67d4f25448c99f7c0552c30b7706' 'c0866306dc8c4da2a8a81c0c3a78b657'
 '3884c37eb13a4c9097ee2c5be4eeefaf' 'f5ad4fe84df544c69db25f0e30c6eace'
 '237a46cc973b41dc9af4190c71c5c9e1' 'aaa27aa0b1024e3aa3c87a6ec821a348'
 '26a03482961e41918ea049018080af7a' 'ae260498423e4d55aa413423cd0eb20b'
 '6e3c8aa3abab475bb0148faa9112f0bf']"
d0f7c236538005bc3056b7daed2401d8,", you can either run the Prompt Tuning command to adapt the prompts to your data or even start running the Indexing Pipeline to index your data. For more information on configuring GraphRAG, see the Configuration documentation.


Configuring GraphRAG Indexing
To start using GraphRAG, you need to configure the system. The init command is the easiest way to get started. It will create a .env and settings.yaml files in the specified directory with the necessary configuration settings. It will also output the default LLM prompts used by GraphRAG.

Usage
python -m graphrag.index [--init] [--root PATH]

Options
--init - Initialize the directory with the necessary configuration files.
--root PATH - The root directory to initialize. Default is the current directory.
Example
python -m graphrag.index --init --root ./ragtest

Output
The init command will create the following files in the specified directory:

settings.yaml - The configuration settings file. This file contains the configuration settings for GraphRAG.
.env - The environment variables file. These are referenced in the settings.yaml file.
prompts/ - The LLM prompts folder. This contains the default prompts used by GraphRAG, you can modify them or run the Auto Prompt Tuning command to generate new prompts adapted to your data.
Next Steps
After initializing your workspace, you can either run the Prompt Tuning command to adapt the prompts to your data or even start running the Indexing Pipeline to index your",300,['bbe409e13dd4d7bbd284976287a4feba'],"['3d6b216c14354332b1bf1927ba168986' '147c038aef3e4422acbbc5f7938c4ab8'
 'd6d2b5862ddc4c4d87deee3423506817' '44594467054849d4a1fadb46ddd51641'
 'e5d40a1b17f74b1db5d18279caedb04a' 'de25d06733d04385825ee082792f5e52'
 '32f6f11a7845416b8c6eb9fb0b382140' '91407be8c3e54e23918d3a7183d962db']","['e379fba901174b529250169e62d98c09' 'c10ffc51dcb54708a1dc757693010bfe'
 'e67ce34d48364422973ccf3a6b57af83' '98773a34c9bb474d8a789ea08f57250e']"
32e96c66a531ecd0a8edc7414aec0803," configuration settings for GraphRAG.
.env - The environment variables file. These are referenced in the settings.yaml file.
prompts/ - The LLM prompts folder. This contains the default prompts used by GraphRAG, you can modify them or run the Auto Prompt Tuning command to generate new prompts adapted to your data.
Next Steps
After initializing your workspace, you can either run the Prompt Tuning command to adapt the prompts to your data or even start running the Indexing Pipeline to index your data. For more information on configuring GraphRAG, see the Configuration documentation.

Default Configuration Mode (using JSON/YAML)
The default configuration mode may be configured by using a config.json or config.yml file in the data project root. If a .env file is present along with this config file, then it will be loaded, and the environment variables defined therein will be available for token replacements in your configuration document using ${ENV_VAR} syntax.

For example:

# .env
API_KEY=some_api_key

# config.json
{
    ""llm"": {
        ""api_key"": ""${API_KEY}""
    }
}
Config Sections
input
Fields
type file|blob - The input type to use. Default=file
file_type text|csv - The type of input data to load. Either text or csv. Default is text
file_encoding str - The encoding of the input file. Default is utf-8
file_pattern str - A regex to match input files. Default is",300,['bbe409e13dd4d7bbd284976287a4feba'],"['147c038aef3e4422acbbc5f7938c4ab8' 'd6d2b5862ddc4c4d87deee3423506817'
 '5a781604f1fb4719b730f43f534627f6' '2918130221f94f4387da049b647bfe6a'
 'fd139ac75b0e4777ab67b7423eaaa37f' 'e5d40a1b17f74b1db5d18279caedb04a'
 '3831134696584d83bbf676a6b3bfa8f9' '50e512a5dbe941f5af68bfdf74b1c3c0'
 'edc717747e904728b57185f5013461f9' '8fba1fea719d49d380ac2d9c310d68b3'
 '532da08f04f645708e747c57e9c4ee05' '3cf0ab4cf14e47ddabd49d500a3dc488'
 'a39b72f8921f43ef8ef295c7cc8f7294' '9f5adbeb6cf04f089abe78d86cfa6aba']","['81ee8bb20bbb4d37bc0db642f1c75b8e' '1cfd220ff4d2493ca4b92d725d171d32'
 '4aeecb9d885743ca9373337a43957dd8' '1121b50f7858427fa679d81861238825'
 '948a00e8ee1246cc90c47b292d03ddff']"
f135654a3c057c66b9e5f97a960d302f,"_api_key

# config.json
{
    ""llm"": {
        ""api_key"": ""${API_KEY}""
    }
}
Config Sections
input
Fields
type file|blob - The input type to use. Default=file
file_type text|csv - The type of input data to load. Either text or csv. Default is text
file_encoding str - The encoding of the input file. Default is utf-8
file_pattern str - A regex to match input files. Default is .*\.csv$ if in csv mode and .*\.txt$ if in text mode.
source_column str - (CSV Mode Only) The source column name.
timestamp_column str - (CSV Mode Only) The timestamp column name.
timestamp_format str - (CSV Mode Only) The source format.
text_column str - (CSV Mode Only) The text column name.
title_column str - (CSV Mode Only) The title column name.
document_attribute_columns list[str] - (CSV Mode Only) The additional document attributes to include.
connection_string str - (blob only) The Azure Storage connection string.
container_name str - (blob only) The Azure Storage container name.
base_dir str - The base directory to read input from, relative to the root.
storage_account_blob_url str - The storage account blob URL to use.
llm
This is the base LLM configuration section. Other steps may override this configuration with their own LLM configuration.

Fields
api_key str - The OpenAI API",300,['bbe409e13dd4d7bbd284976287a4feba'],"['3831134696584d83bbf676a6b3bfa8f9' 'efb6350e65964659bc20396c0166b296'
 'e095cc36da784300b27c6f8c60a96440' 'c68893ca39d74ba08c6eb138f24441e1']","['45c42e619f5e488f914608780dcf0579' '2b3bea0d9ede41f193828526bcb8e02c'
 '6b2586cc1f8e4dc8af64913af63d9837']"
647be47c939b4d72f1c0b29a2e0d2cb2," additional document attributes to include.
connection_string str - (blob only) The Azure Storage connection string.
container_name str - (blob only) The Azure Storage container name.
base_dir str - The base directory to read input from, relative to the root.
storage_account_blob_url str - The storage account blob URL to use.
llm
This is the base LLM configuration section. Other steps may override this configuration with their own LLM configuration.

Fields
api_key str - The OpenAI API key to use.
type openai_chat|azure_openai_chat|openai_embedding|azure_openai_embedding - The type of LLM to use.
model str - The model name.
max_tokens int - The maximum number of output tokens.
request_timeout float - The per-request timeout.
api_base str - The API base url to use.
api_version str - The API version
organization str - The client organization.
proxy str - The proxy URL to use.
cognitive_services_endpoint str - The url endpoint for cognitive services.
deployment_name str - The deployment name to use (Azure).
model_supports_json bool - Whether the model supports JSON-mode output.
tokens_per_minute int - Set a leaky-bucket throttle on tokens-per-minute.
requests_per_minute int - Set a leaky-bucket throttle on requests-per-minute.
max_retries int - The maximum number of retries to use.
max_retry_wait float - The maximum backoff time.
sleep_on_rate_limit_recommendation bool - Whether to",300,['bbe409e13dd4d7bbd284976287a4feba'],"['df40ad480a3c47299a6c8fad05349304' 'ecdc1020b10e49ca869d399825e16fa3'
 '0d8fde01d7234726a00d7e73e2e01d66' '9c4bd60958fd4e09a6d5b9e2ab163b5a'
 'edc717747e904728b57185f5013461f9' '532da08f04f645708e747c57e9c4ee05'
 '472b23bb92834173b4118d101040c726' '81869985b45a4fefbbbb23ea118a3de4'
 '42b8584c5a874eb08fbd61f0c18f3ca0' '824d93d9840a4b7c8b1f31bc6816b497'
 'f209a808f1f04a5699601e672f4abd06' 'ccb335166f6c4564ac1c61549d8ded50'
 'cbe1a41a82aa4f268e8264568b25938f' '28e7639f55ce464c8a080cbb2c745fa2'
 '3f3a2d7aa1294116814f0b4d89baa23d' '3073b33926bd4f33807ffa3befacefaf'
 '2b916117691c4872a9c4e4888d4fe4ab' '1f7b02bf486e4f42b23e9cb1a63207f3'
 'e744c118ae7f4638a01d060bbaedd6e9' 'e1c1080c717d437996def1a41772d179'
 '63fba9a7c47a4f14ac0bee6bc90d0fea']","['20a79ddd91ba48e4bb7bc194c79baaf6' '354cea4f6e164a48ad12122c28a5b30d'
 '57e00d4d4e0e4679a150f048deb80af3' '1474a72a5cff4b72ae6f99e804ceaa95'
 '7983bfa8d173414685272b3844d6612e' '0522f6580b824bc39792b695fc8be66b'
 '580fd6d19460460fa40613f66b3ee200' '84f4684a7a5241c18bb087ccb00550d3'
 '236dd7dce9ee4cf5918fddd44b4863e5' '7dccecb29d3a419093b279b22e207539']"
3c66b7e86b3675fce14fe0047ae731aa," url endpoint for cognitive services.
deployment_name str - The deployment name to use (Azure).
model_supports_json bool - Whether the model supports JSON-mode output.
tokens_per_minute int - Set a leaky-bucket throttle on tokens-per-minute.
requests_per_minute int - Set a leaky-bucket throttle on requests-per-minute.
max_retries int - The maximum number of retries to use.
max_retry_wait float - The maximum backoff time.
sleep_on_rate_limit_recommendation bool - Whether to adhere to sleep recommendations (Azure).
concurrent_requests int The number of open requests to allow at once.
temperature float - The temperature to use.
top_p float - The top-p value to use.
n int - The number of completions to generate.
parallelization
Fields
stagger float - The threading stagger value.
num_threads int - The maximum number of work threads.
async_mode
asyncio|threaded The async mode to use. Either asyncio or `threaded.

embeddings
Fields
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
batch_size int - The maximum batch size to use.
batch_max_tokens int - The maximum batch #-tokens.
target required|all - Determines which set of embeddings to emit.
skip list[str] - Which embeddings to skip.
strategy dict - Fully override the text-embedding strategy.
chunks
Fields
size int - The max chunk size in",300,['bbe409e13dd4d7bbd284976287a4feba'],"['9c4bd60958fd4e09a6d5b9e2ab163b5a' '3073b33926bd4f33807ffa3befacefaf'
 '2b916117691c4872a9c4e4888d4fe4ab' '1f7b02bf486e4f42b23e9cb1a63207f3'
 'e744c118ae7f4638a01d060bbaedd6e9' 'e1c1080c717d437996def1a41772d179'
 '63fba9a7c47a4f14ac0bee6bc90d0fea' '6bfc2395b4f54a528a1ebac94a43acb8'
 '1cce5cebf437428eb1a60dffbdfa603f' 'dc94039d6643460ca3c66150b9087129'
 'f197d75f159943f8a3ff441199790bc7' '4d8890c699684c9381105b03b0b41b03'
 'b1658adfa43847eabad1437db235e858' 'a1773cac7d4c4939aec965660e5015fe'
 '6a054cb59fb44cf494b93988b5f88833' 'e7b103a52e384e3e8bf14105223e7e82'
 '3f1042452c254cecaf7189e89162adc8' 'fd31d549420744d1bd1a6b1112a9a6ba'
 'f7ab348030714072a277682b51f7c588' '2139b0906dc541e094138a978d070416'
 'ff5466607e5d4453b1d833629292f664']","['738fda68df7a49a0bae96673a8711afc' '9607ba4a796f46be8d4f79bc7065d60b'
 '236dd7dce9ee4cf5918fddd44b4863e5' '9e92fed814a64d9d88bfab9a227859d3'
 '7dccecb29d3a419093b279b22e207539' '89857eb61e63461cbad7c5014f5098f9'
 '7b2e7a0d910c4988a7b64489f4159a65' '38630cf0996f4cff8d32b2dbdaa5ba85'
 'bd0fb68ac7014b91a314c93ec55897f5']"
d27237468a1b9e89110eeeca8080f63c,"Fields
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
batch_size int - The maximum batch size to use.
batch_max_tokens int - The maximum batch #-tokens.
target required|all - Determines which set of embeddings to emit.
skip list[str] - Which embeddings to skip.
strategy dict - Fully override the text-embedding strategy.
chunks
Fields
size int - The max chunk size in tokens.
overlap int - The chunk overlap in tokens.
group_by_columns list[str] - group documents by fields before chunking.
strategy dict - Fully override the chunking strategy.
cache
Fields
type file|memory|none|blob - The cache type to use. Default=file
connection_string str - (blob only) The Azure Storage connection string.
container_name str - (blob only) The Azure Storage container name.
base_dir str - The base directory to write cache to, relative to the root.
storage_account_blob_url str - The storage account blob URL to use.
storage
Fields
type file|memory|blob - The storage type to use. Default=file
connection_string str - (blob only) The Azure Storage connection string.
container_name str - (blob only) The Azure Storage container name.
base_dir str - The base directory to write reports to, relative to the root.
storage_account_blob_url str - The storage account blob URL to use.
reporting
Fields",300,['bbe409e13dd4d7bbd284976287a4feba'],"['adf4ee3fbe9b4d0381044838c4f889c8' '532da08f04f645708e747c57e9c4ee05'
 '472b23bb92834173b4118d101040c726' '81869985b45a4fefbbbb23ea118a3de4'
 '42b8584c5a874eb08fbd61f0c18f3ca0' '824d93d9840a4b7c8b1f31bc6816b497'
 '6a054cb59fb44cf494b93988b5f88833' 'e7b103a52e384e3e8bf14105223e7e82'
 '3f1042452c254cecaf7189e89162adc8' 'fd31d549420744d1bd1a6b1112a9a6ba'
 'f7ab348030714072a277682b51f7c588' '2139b0906dc541e094138a978d070416'
 'ff5466607e5d4453b1d833629292f664' '71f95003936e46a98d90757ffd845d40'
 'bada987ea7da4c939393ee1c3d08ccd4' 'd0a274e7934d446fb91847bb53a961a6'
 '0a799eab61bc4e6b884db6689f9c2c4a' '8c34cd494a63438dac219c1dc0f73100'
 'c6f428af0c5e4f629902fd5455bf19ac']","['ea28ff7f127e4677a913952595dce2f5' '192a6d23595045f38b0d46a3d8e52fd6'
 'f805fd9fe42947a38b92a3db6e8cc986' 'e8b956218d5c4e5d9d390abcf527a514'
 '9a8a2e5e3f2645619a0403532d935afe' 'e368f8e9c9864acc880fdb5113631f3f']"
abac77a5673e907cf8d65161c2612784," the root.
storage_account_blob_url str - The storage account blob URL to use.
storage
Fields
type file|memory|blob - The storage type to use. Default=file
connection_string str - (blob only) The Azure Storage connection string.
container_name str - (blob only) The Azure Storage container name.
base_dir str - The base directory to write reports to, relative to the root.
storage_account_blob_url str - The storage account blob URL to use.
reporting
Fields
type file|console|blob - The reporting type to use. Default=file
connection_string str - (blob only) The Azure Storage connection string.
container_name str - (blob only) The Azure Storage container name.
base_dir str - The base directory to write reports to, relative to the root.
storage_account_blob_url str - The storage account blob URL to use.
entity_extraction
Fields
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
prompt str - The prompt file to use.
entity_types list[str] - The entity types to identify.
max_gleanings int - The maximum number of gleaning cycles to use.
strategy dict - Fully override the entity extraction strategy.
summarize_descriptions
Fields
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
prompt str - The",300,['bbe409e13dd4d7bbd284976287a4feba'],"['adf4ee3fbe9b4d0381044838c4f889c8' 'ce36d1d637cf4a4e93f5e37ffbc6bd76'
 '838c4498bc3c437f8d65428b580766a2' '532da08f04f645708e747c57e9c4ee05'
 '2139b0906dc541e094138a978d070416' '71f95003936e46a98d90757ffd845d40'
 '8c34cd494a63438dac219c1dc0f73100' 'c6f428af0c5e4f629902fd5455bf19ac'
 'd1fd271d16c348019c2fcced762b35a2' 'ffa128c9c0c84d39bad1bba8cfa4adc5'
 '058f66cc356b43cc9433bd3c8d57fa46' 'ff74091eaba246698fcae59c21eec828'
 'f6cbbf1b8f4b48a28a16e4dd8976b9bb' '757ca40654d5476aa949a26b733be8d4'
 '539d55e7c42e44b59d98f59fae3e0ee1' '3785eeadea9042bfb2e50f16c0397a12'
 '48cd97f2297143e09d61ff2a8542c0c5' 'ff95eb0d5f7f49b782027d5c7ae3c3fe']","['ef67c9fc60284b50aa15ac655b06a155' '0964dcfbff934c92af8961155673ac7f'
 '51b82bcdffe04056bad1c082c3830047' 'c62bb148852b49a98e2779ca23a0919d'
 '72b5a0c357c24b739084d501b9354bc1' 'c827b62ebf134e55a3ccf0b63f976870'
 'b51ef388758845e880e736309ae791e3' '0a841cd4b6664423b033f22e3a80f33c'
 'bbf83708095f47019eaee93d6879bc77' 'd1e5359d2e344260bf1b83823df839b7'
 '05063c19ddb847a89ae1746588464288' '019b34e800414f7b87f38a14adf2eb67'
 '9a5e0a4ae34f46b39a5a028cbc135264' '5a224002ecbc4725abeb5a424aaca6a6'
 '8826a17bbda34012b3ea84d58ae531eb' 'bab69d76defb402da2a2a358739f1497'
 'ea465e5cd92247829f52ff0c8591d1bb' '2dbac25b512c4f21965169a95a910a94']"
9cbd4e21339eeed5e22a638e52a094cb,")
async_mode (see Async Mode top-level config)
prompt str - The prompt file to use.
entity_types list[str] - The entity types to identify.
max_gleanings int - The maximum number of gleaning cycles to use.
strategy dict - Fully override the entity extraction strategy.
summarize_descriptions
Fields
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
prompt str - The prompt file to use.
max_length int - The maximum number of output tokens per summarization.
strategy dict - Fully override the summarize description strategy.
claim_extraction
Fields
enabled bool - Whether to enable claim extraction. default=False
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
prompt str - The prompt file to use.
description str - Describes the types of claims we want to extract.
max_gleanings int - The maximum number of gleaning cycles to use.
strategy dict - Fully override the claim extraction strategy.
community_reports
Fields
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
prompt str - The prompt file to use.
max_length int - The maximum number of output tokens per report.
max_input_length int - The maximum number of input tokens to use when generating reports.
strategy",300,['bbe409e13dd4d7bbd284976287a4feba'],"['adf4ee3fbe9b4d0381044838c4f889c8' '6a054cb59fb44cf494b93988b5f88833'
 '2139b0906dc541e094138a978d070416' '71f95003936e46a98d90757ffd845d40'
 '086da554db5b4ad5806aedeb0024197c' '216ee8a907a0466a88b27f8ada19ffa0'
 '6fefb317687d4ac98efe39a52f3e190f' '320d9d91238948a8be67972ccceab878'
 'bdcbcccadd474b3bbe9a8f56c811bab4' 'f127fc4d87f94794be89134406ba0694'
 'c27966a4e3be434686454204ac7b3ab4']","['cc8201cce1024b5192056fe8e98fda22' '97e097f9022540b88ab7c13d2805c25f'
 '829a6299a5fa4e7b8ff4020020a0be05' 'f24dcb3cd6d644f8af2b6c47983e280b'
 'b1cad695afbc4ec3bbcd46ea34bd26ca' '72f7974758d74e5d89ddb64ad739abb8'
 '9525aa223d774e62ad856c2201cfab1b' '1087596b06d1400a8f863d0ac1af64a4'
 '39058965295643c8a7738350cc18ceac' 'f0c21c67baac47f097f74f5055b89877'
 '323a4c7407ac401db79a6023c3a5a17d' '686bc2bd59644e398dde88ffd37bf49b'
 '6de4c00e48b3480883e696e24df9fda4' '4b3d236101de4904ab348e3e3b11b4be'
 '5be2ce9957ba404f939b6c8175015619' 'fe77344850214c1cac923094de81098c']"
53f1b5ad1d2f4ee5dfb53a8f1ff3ec14,"_gleanings int - The maximum number of gleaning cycles to use.
strategy dict - Fully override the claim extraction strategy.
community_reports
Fields
llm (see LLM top-level config)
parallelization (see Parallelization top-level config)
async_mode (see Async Mode top-level config)
prompt str - The prompt file to use.
max_length int - The maximum number of output tokens per report.
max_input_length int - The maximum number of input tokens to use when generating reports.
strategy dict - Fully override the community reports strategy.
cluster_graph
Fields
max_cluster_size int - The maximum cluster size to emit.
strategy dict - Fully override the cluster_graph strategy.
embed_graph
Fields
enabled bool - Whether to enable graph embeddings.
num_walks int - The node2vec number of walks.
walk_length int - The node2vec walk length.
window_size int - The node2vec window size.
iterations int - The node2vec number of iterations.
random_seed int - The node2vec random seed.
strategy dict - Fully override the embed graph strategy.
umap
Fields
enabled bool - Whether to enable UMAP layouts.
snapshots
Fields
graphml bool - Emit graphml snapshots.
raw_entities bool - Emit raw entity snapshots.
top_level_nodes bool - Emit top-level-node snapshots.
encoding_model
str - The text encoding model to use. Default is cl100k_base.

skip_workflows
list[str] - Which workflow names to skip.

Custom",300,['bbe409e13dd4d7bbd284976287a4feba'],"['adf4ee3fbe9b4d0381044838c4f889c8' '6a054cb59fb44cf494b93988b5f88833'
 '71f95003936e46a98d90757ffd845d40' '086da554db5b4ad5806aedeb0024197c'
 'bdcbcccadd474b3bbe9a8f56c811bab4' 'c27966a4e3be434686454204ac7b3ab4'
 'dab39f92d0ed468c80699f28c05c45fa' '3076f330d121489aa50964ce54a3b1ac'
 'c8e5d3afdcb54c8589e280f0c4a87417' 'f3d30627e19245649e497ab49bf0fa30'
 'e3f1098c3d984bc7b5f30b9c0101f7a6' '24b4a5f4db67418cbfa08c5316f0ab51'
 'e4b707e3e6964197855b82fc66ef59e7' '109b8be5a8ee4180a1465cd23f019d7b'
 '49f771e31a0c4b35bc39e389f3623509' 'aa946d4379694a74ba0da37e69d2810a'
 '268446fc52a54fd2837f73aeb3e0b74f' 'f6ddfa8491ff40d2839bb5b2e105df22'
 'db1295504da645b69d9786d54f233fed' '6ff4ed0dda4f4158af37be99f505565f'
 '5d398b88ee4242a59c32feb188683ec3' '0a784e00c9464bd3aeb830b908f73170'
 'b0966a0f455e44229e6c9705d57bfca9' '99761e9b89cc4060be3ed6b34532e7ff'
 '8130a1a82bde46048952cf147690e630']","['798f739abfc14a13bf3911d0a9cfb63b' '3105de8188fd41d88d0dbf0a5d48e443'
 '8108dde0e62a48008a270138a690a0b9']"
b70cb2eda62c6afad9e8d22daafe61cc," The node2vec random seed.
strategy dict - Fully override the embed graph strategy.
umap
Fields
enabled bool - Whether to enable UMAP layouts.
snapshots
Fields
graphml bool - Emit graphml snapshots.
raw_entities bool - Emit raw entity snapshots.
top_level_nodes bool - Emit top-level-node snapshots.
encoding_model
str - The text encoding model to use. Default is cl100k_base.

skip_workflows
list[str] - Which workflow names to skip.

Custom Configuration Mode
The primary configuration sections for Indexing Engine pipelines are described below. Each configuration section can be expressed in Python (for use in Python API mode) as well as YAML, but YAML is show here for brevity.

Using custom configuration is an advanced use-case. Most users will want to use the Default Configuration instead.

Indexing Engine Examples
The examples directory contains several examples of how to use the indexing engine with custom configuration.

Most examples include two different forms of running the pipeline, both are contained in the examples run.py

Using mostly the Python API
Using mostly the a pipeline configuration file
To run an example:

Run poetry shell to activate a virtual environment with the required dependencies.
Run PYTHONPATH=""$(pwd)"" python examples/path_to_example/run.py from the root directory.
For example to run the single_verb example, you would run the following commands:

poetry shell

PYTHONPATH=""$(pwd)"" python examples/single_verb/run.py

Configuration Sections
> extends
This",300,['bbe409e13dd4d7bbd284976287a4feba'],"['cde2d75c51d245879265b79d14b8699b' '3076f330d121489aa50964ce54a3b1ac'
 'e4b707e3e6964197855b82fc66ef59e7' 'db1295504da645b69d9786d54f233fed'
 '6ff4ed0dda4f4158af37be99f505565f' '99761e9b89cc4060be3ed6b34532e7ff'
 '8130a1a82bde46048952cf147690e630' '79c99026b7ef4946b9b8e0be841fd4c5'
 'fdcb1673254842f1935f53d0c38c467e' 'dcb3f4cc8abc46faabc193d9885e91d0'
 '3295be59128d451bb720c6688adc1e0b' 'aca3eb8924ac494486fe0bfe892f7f2e'
 '66689accdd974295b7eb779e43578748']","['f91e7c9600ca4623a8cc4a56d2dccd07' '3af2a8619c394be6adf06e4bc742b7ec'
 'd07207b853c14504a44eea1d4778f902' '406822a1a01a4140baf9bbf1d479f07e'
 'fe47ba3762ae4feda39904d59cbb4160' '53032c2afcb5474a88446ad7c5506980'
 '5c66a88612a245cb91fbba9c094f12fc']"
e01c546120a27319dcbdf7a6b89bab26," both are contained in the examples run.py

Using mostly the Python API
Using mostly the a pipeline configuration file
To run an example:

Run poetry shell to activate a virtual environment with the required dependencies.
Run PYTHONPATH=""$(pwd)"" python examples/path_to_example/run.py from the root directory.
For example to run the single_verb example, you would run the following commands:

poetry shell

PYTHONPATH=""$(pwd)"" python examples/single_verb/run.py

Configuration Sections
> extends
This configuration allows you to extend a base configuration file or files.

# single base
extends: ../base_config.yml

# multiple bases
extends:
  - ../base_config.yml
  - ../base_config2.yml

> root_dir
This configuration allows you to set the root directory for the pipeline. All data inputs and outputs are assumed to be relative to this path.

root_dir: /workspace/data_project

> storage
This configuration allows you define the output strategy for the pipeline.

type: The type of storage to use. Options are file, memory, and blob
base_dir (type: file only): The base directory to store the data in. This is relative to the config root.
connection_string (type: blob only): The connection string to use for blob storage.
container_name (type: blob only): The container to use for blob storage.
> cache
This configuration allows you define the cache strategy for the pipeline.

type: The type of cache to use. Options are",300,['bbe409e13dd4d7bbd284976287a4feba'],"['0a799eab61bc4e6b884db6689f9c2c4a' '8c34cd494a63438dac219c1dc0f73100'
 '66689accdd974295b7eb779e43578748' '6b49c78aa1524609ab7aa74aeaa3e01d'
 '7ff31ce54f424f0bbb297b0b3ba7c757' 'bac51e00d486420c8e91e824d8e17411'
 '4adee3aad6524a4aa4c4711c1ee05e64']","['e368f8e9c9864acc880fdb5113631f3f' '1064a663ca4742a78e743128546f6d87'
 'b4c54fb7ce0b4b77afd5fbe5a8a2527f' 'c8b60cdb74104667b5d2b4b70d74d039'
 '333e294d7cc34df4abc47ad9ced3d186']"
a3e5bacdf64bcaf080a04c7dd8218484,": The type of reporting to use. Options are file, memory, and blob
base_dir (type: file only): The base directory to store the reports in. This is relative to the config root.
connection_string (type: blob only): The connection string to use for blob storage.
container_name (type: blob only): The container to use for blob storage.
> workflows
This configuration section defines the workflow DAG for the pipeline. Here we define an array of workflows and express their inter-dependencies in steps:

name: The name of the workflow. This is used to reference the workflow in other parts of the config.
steps: The DataShaper steps that this workflow comprises. If a step defines an input in the form of workflow:<workflow_name>, then it is assumed to have a dependency on the output of that workflow.
workflows:
  - name: workflow1
    steps:
      - verb: derive
        args:
          column1: ""col1""
          column2: ""col2""
  - name: workflow2
    steps:
      - verb: derive
        args:
          column1: ""col1""
          column2: ""col2""
        input:
          # dependency established here
          source: workflow:workflow1

> input
type: The type of input to use. Options are file or blob.
file_type: The file type field discriminates between the different input types. Options are csv and text.
base_dir",300,['bbe409e13dd4d7bbd284976287a4feba'],"['47f6d6573cf34e1096c95e36251dd60c' '058f66cc356b43cc9433bd3c8d57fa46'
 'ff95eb0d5f7f49b782027d5c7ae3c3fe' '091e998370dd42d1b05ab0fcf6595a7e'
 '1e6cabc18fab4c048281fd29d3044438' 'dc08f6d7398b4b798a3bdccf508a2ad4'
 '1c7fd5af8d8041e186eae2431fc627cd' 'b16eda56dcec40f2b3e109fb9246bee3'
 '43c68f9a86654a32a2215e23957ed184']","['3280fc12ef414827838e6ac7089f0618' '97958ed004f645b1b331fa0e66faa313'
 '48129b4ee99f4e30843fd4395d4815c0' '15e66e10d12f4520abca20985d2cb39c'
 '2a271d9b5d7b46fea4046d5590eed1d7' '99e372089bed4a0394af57175679f8e4']"
76d9dcb9a27c2caea1f46bb5050851c6," column2: ""col2""
  - name: workflow2
    steps:
      - verb: derive
        args:
          column1: ""col1""
          column2: ""col2""
        input:
          # dependency established here
          source: workflow:workflow1

> input
type: The type of input to use. Options are file or blob.
file_type: The file type field discriminates between the different input types. Options are csv and text.
base_dir: The base directory to read the input files from. This is relative to the config file.
file_pattern: A regex to match the input files. The regex must have named groups for each of the fields in the file_filter.
post_process: A DataShaper workflow definition to apply to the input before executing the primary workflow.
source_column (type: csv only): The column containing the source/author of the data
text_column (type: csv only): The column containing the text of the data
timestamp_column (type: csv only): The column containing the timestamp of the data
timestamp_format (type: csv only): The format of the timestamp
input:
  type: file
  file_type: csv
  base_dir: ../data/csv # the directory containing the CSV files, this is relative to the config file
  file_pattern: '.*[\/](?P<source>[^\/]+)[\/](?P<year>\d{4})-(?P",300,['bbe409e13dd4d7bbd284976287a4feba'],"['7e0d14ca308b4796bdc675a64bd3a36e' '8323efc8e539419e9ca3c98e758f6609'
 '8fba1fea719d49d380ac2d9c310d68b3' '1ba06fe2e86140a59bbc4f4e969d0f71'
 '36caa0a230c8422c8acb4dc62e35bb32' '09940fed9d154504948bba2df1789a50']","['9fd31a28e1384b40a9d1658a765871cd' '5c20b469b92446dabb1b68976807be7c'
 '09294e8220a445e288ea8841f234a440' '62afe93767684ea38f861d20fb05ff71'
 '8fc1fbff7e6c459c93ce2c2f5a62226e']"
3900b87693f02c43b4294e38647eb7cd," data
timestamp_column (type: csv only): The column containing the timestamp of the data
timestamp_format (type: csv only): The format of the timestamp
input:
  type: file
  file_type: csv
  base_dir: ../data/csv # the directory containing the CSV files, this is relative to the config file
  file_pattern: '.*[\/](?P<source>[^\/]+)[\/](?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})_(?P<author>[^_]+)_\d+\.csv$' # a regex to match the CSV files
  # An additional file filter which uses the named groups from the file_pattern to further filter the files
  # file_filter:
  #   # source: (source_filter)
  #   year: (2023)
  #   month: (06)
  #   # day: (22)
  source_column: ""author"" # the column containing the source/author of the data
  text_column: ""message"" # the column containing the text of the data
  timestamp_column: ""date(yyyyMMddHHmmss)"" # optional, the column containing the timestamp of the data
  timestamp_format: ""%Y%m%d%H%M%S"" # optional,  the format of the timestamp
  post_process: # Optional, set of steps to process the",300,['bbe409e13dd4d7bbd284976287a4feba'],"['8fba1fea719d49d380ac2d9c310d68b3' '3cf0ab4cf14e47ddabd49d500a3dc488'
 '9f5adbeb6cf04f089abe78d86cfa6aba' '42b8584c5a874eb08fbd61f0c18f3ca0'
 '4d6608557eed49368a6d09c7c5c664c5' 'eb7c93eeb9dc41aab57d29e97ebb4951'
 '3b6e2ac584b64847b53828c9d779fed3' 'e9b68002e035447baae848208cea5503']","['d4e043cf972c4d129b6b855f1731caae' 'e0d63137270c426dbbfe7fcf78c474de'
 'c50bca18bc454a98b935df012b7fd6f9' '434b133c64bd46219e67c6eb296ad0ff'
 'cb895bf7e7c147e6b5d923b6c8f67d63' '04b3ae04020349a9bc568f26d17eab14']"
6839baed839d7a5e837af1da93e462e5," day: (22)
  source_column: ""author"" # the column containing the source/author of the data
  text_column: ""message"" # the column containing the text of the data
  timestamp_column: ""date(yyyyMMddHHmmss)"" # optional, the column containing the timestamp of the data
  timestamp_format: ""%Y%m%d%H%M%S"" # optional,  the format of the timestamp
  post_process: # Optional, set of steps to process the data before going into the workflow
    - verb: filter
      args:
        column: ""title"",
        value: ""My document""

input:
  type: file
  file_type: csv
  base_dir: ../data/csv # the directory containing the CSV files, this is relative to the config file
  file_pattern: '.*[\/](?P<source>[^\/]+)[\/](?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})_(?P<author>[^_]+)_\d+\.csv$' # a regex to match the CSV files
  # An additional file filter which uses the named groups from the file_pattern to further filter the files
  # file_filter:
  #   # source: (source_filter)
  #   year: (2023)
  #   month: (06)
  #   # day: (22",300,['bbe409e13dd4d7bbd284976287a4feba'],"['8fba1fea719d49d380ac2d9c310d68b3' 'fe18353546824ca98294ce4be7b96e02'
 '0e9740e25f5a460c81318336e00ac880' 'b7cd9a62710849778fdadced0d754687'
 '432a6b4962544200949421a96a405142']","['87776e869a01402499a317cb9cf09453' 'bbc4d367c60f41ad8a279c12e5cc7da6'
 '9a1aff251eda416ea6270e6158e663fc']"
765d8a78606fe81a03a0da4f7ff231fa,"{2})-(?P<day>\d{2})_(?P<author>[^_]+)_\d+\.csv$' # a regex to match the CSV files
  # An additional file filter which uses the named groups from the file_pattern to further filter the files
  # file_filter:
  #   # source: (source_filter)
  #   year: (2023)
  #   month: (06)
  #   # day: (22)
  post_process: # Optional, set of steps to process the data before going into the workflow
    - verb: filter
      args:
        column: ""title"",
        value: ""My document""

Configuration Template
The following template can be used and stored as a .env in the the directory where you're are pointing the --root parameter on your Indexing Pipeline execution.

For details about how to run the Indexing Pipeline, refer to the Index CLI documentation.

.env File Template
Required variables are uncommented. All the optional configuration can be turned on or off as needed.

Minimal Configuration
# Base LLM Settings
GRAPHRAG_API_KEY=""your_api_key""
GRAPHRAG_API_BASE=""http://<domain>.openai.azure.com"" # For Azure OpenAI Users
GRAPHRAG_API_VERSION=""api_version"" # For Azure OpenAI Users

# Text Generation Settings
GRAPHRAG_LLM_TYPE=""azure_openai_chat"" # or",300,['bbe409e13dd4d7bbd284976287a4feba'],"['432a6b4962544200949421a96a405142' 'd6700b360ac141d282cdb567414bf4ce'
 'c1b40a4039b44061a358e098867f7412' '4643a7a319674adfb732b6f6122c7c64']",['7a9e50846c274338ab09e7313b540edb' 'b268cc3ef860434ba663dd46af633cc5']
3da10b454f926a257b9fdf5d2487c0a5,"Required variables are uncommented. All the optional configuration can be turned on or off as needed.

Minimal Configuration
# Base LLM Settings
GRAPHRAG_API_KEY=""your_api_key""
GRAPHRAG_API_BASE=""http://<domain>.openai.azure.com"" # For Azure OpenAI Users
GRAPHRAG_API_VERSION=""api_version"" # For Azure OpenAI Users

# Text Generation Settings
GRAPHRAG_LLM_TYPE=""azure_openai_chat"" # or openai_chat
GRAPHRAG_LLM_DEPLOYMENT_NAME=""gpt-4-turbo-preview""
GRAPHRAG_LLM_MODEL_SUPPORTS_JSON=True

# Text Embedding Settings
GRAPHRAG_EMBEDDING_TYPE=""azure_openai_embedding"" # or openai_embedding
GRAPHRAG_LLM_DEPLOYMENT_NAME=""text-embedding-3-small""

# Data Mapping Settings
GRAPHRAG_INPUT_TYPE=""text""

Full Configuration

# Required LLM Config

# Input Data Configuration
GRAPHRAG_INPUT_TYPE=""file""

# Plaintext Input Data Configuration
# GRAPHRAG_INPUT_FILE_PATTERN=.*\.txt

# Text Input Data Configuration
GRAPHRAG_INPUT_FILE_TYPE=""text""
GRAPHRAG_INPUT_FILE_PATTERN="".*\.txt$""
GRAPHRAG_INPUT_SOURCE_COLUMN=source
# GRAPHRAG_INPUT_TIMESTAMP_COLUMN=None
# GRAPHRAG_INPUT_TIMESTAMP_FORMAT=None
# GRAP",300,['bbe409e13dd4d7bbd284976287a4feba'],"['0fbcca3f17c649a08aea64b5a7d9ef36' '553b285bba60460ab1ed8341ae61282b'
 'bbf148ae4d48422f8fdef754cfa2b9e4' '46e8056fb2ec4811ab33cb34a0dc9fb3'
 '8b57a9f43a1942a49b58cf881835f974' 'f78b01b0d93948c283644ec58f7be74a'
 '8dbe8f9867e4448f998416c18923eac4' 'fe8ea8bf1395434393e04e8f7a33025f']","['f3c3dd44cf50495c81e362174991242e' 'cf56bfc9fa7d47fe9cb553dd09f2b412'
 'a077dbcd38b644f6929cf05272c2fb9d' 'd2659a32b9de406eb750a35d078c9774'
 '757e402cb7ee4601ac1bc8c4fafb5207' '1c9f67904a4c4fcc8cdac6a605900248']"
8ac79ce92be1254dfda9a10eb54ab703," LLM Config

# Input Data Configuration
GRAPHRAG_INPUT_TYPE=""file""

# Plaintext Input Data Configuration
# GRAPHRAG_INPUT_FILE_PATTERN=.*\.txt

# Text Input Data Configuration
GRAPHRAG_INPUT_FILE_TYPE=""text""
GRAPHRAG_INPUT_FILE_PATTERN="".*\.txt$""
GRAPHRAG_INPUT_SOURCE_COLUMN=source
# GRAPHRAG_INPUT_TIMESTAMP_COLUMN=None
# GRAPHRAG_INPUT_TIMESTAMP_FORMAT=None
# GRAPHRAG_INPUT_TEXT_COLUMN=""text""
# GRAPHRAG_INPUT_ATTRIBUTE_COLUMNS=id
# GRAPHRAG_INPUT_TITLE_COLUMN=""title""
# GRAPHRAG_INPUT_TYPE=""file""
# GRAPHRAG_INPUT_CONNECTION_STRING=None
# GRAPHRAG_INPUT_CONTAINER_NAME=None
# GRAPHRAG_INPUT_BASE_DIR=None

# Base LLM Settings
GRAPHRAG_API_KEY=""your_api_key""
GRAPHRAG_API_BASE=""http://<domain>.openai.azure.com"" # For Azure OpenAI Users
GRAPHRAG_API_VERSION=""api_version"" # For Azure OpenAI Users
# GRAPHRAG_API_ORGANIZATION=None
# GRAPHRAG_API_PROXY=None

# Text Generation Settings
# GRAPHRAG_LLM_TYPE=openai_chat
GRAPHRAG_LLM_API_KEY=""your_api_key"" # If GRAPHRAG_API_KEY is not set
GRAPHRAG_LLM_API_BASE=""http://",300,['bbe409e13dd4d7bbd284976287a4feba'],"['0fbcca3f17c649a08aea64b5a7d9ef36' '46e8056fb2ec4811ab33cb34a0dc9fb3'
 '8b57a9f43a1942a49b58cf881835f974' 'fe8ea8bf1395434393e04e8f7a33025f'
 '7d58b089bfc549e8951e91ad62541119' '1fa6d3118bd846c8837b5fa9fb78f262'
 '62c65bbae33c4ee9a21b61f6f454c4b4']","['f3c3dd44cf50495c81e362174991242e' '86c2b3749a3c4342bbb3a8c70c3a76a0'
 'e00c403d1dc84ba6a37ee193596e320f' '3f2e726c3b624fe7bf11de9be2c0457e'
 'f71dc0c394f04771af7e2ed37f85647e']"
7b45dafa74553d3899e2291a3c9fb86e,".azure.com"" # For Azure OpenAI Users
GRAPHRAG_API_VERSION=""api_version"" # For Azure OpenAI Users
# GRAPHRAG_API_ORGANIZATION=None
# GRAPHRAG_API_PROXY=None

# Text Generation Settings
# GRAPHRAG_LLM_TYPE=openai_chat
GRAPHRAG_LLM_API_KEY=""your_api_key"" # If GRAPHRAG_API_KEY is not set
GRAPHRAG_LLM_API_BASE=""http://<domain>.openai.azure.com"" # For Azure OpenAI Users and if GRAPHRAG_API_BASE is not set
GRAPHRAG_LLM_API_VERSION=""api_version"" # For Azure OpenAI Users and if GRAPHRAG_API_VERSION is not set
GRAPHRAG_LLM_MODEL_SUPPORTS_JSON=True # Suggested by default
# GRAPHRAG_LLM_API_ORGANIZATION=None
# GRAPHRAG_LLM_API_PROXY=None
# GRAPHRAG_LLM_DEPLOYMENT_NAME=None
# GRAPHRAG_LLM_MODEL=gpt-4-turbo-preview
# GRAPHRAG_LLM_MAX_TOKENS=4000
# GRAPHRAG_LLM_REQUEST_TIMEOUT=180
# GRAPHRAG_LLM_THREAD_COUNT=50
# GRAPHRAG_LLM_THREAD_STAGGER=0.3
# GRAPHRAG_LLM_CONCURRENT_REQUESTS=25
# GRAPHRAG",300,['bbe409e13dd4d7bbd284976287a4feba'],"['460295fed3ae4cd39f9f274cec9c2506' '5c4d8a8f9c104176b87d2bfdf04ae0bd'
 '8b57a9f43a1942a49b58cf881835f974' '8dbe8f9867e4448f998416c18923eac4'
 '30b7034c4468473f98ee18d00ee73b33' '00f78b85e5b84999a810e311e540037b']","['f85786004b0540349192d2ca05b15264' '7d375c18c1e2415faecd9f7397068a32'
 'dfa0e847a6704c93a0fe014b01858ff7' '9e91823feb174cd1b6a3bf8d0a5cb86b'
 'ad76c8dc8dd94412a5e79005cf8e0f2f']"
485c17007ccb3102887eaa47d6a6100f,"APHRAG_API_KEY is not set
GRAPHRAG_EMBEDDING_API_BASE=""http://<domain>.openai.azure.com""  # For Azure OpenAI Users and if GRAPHRAG_API_BASE is not set
GRAPHRAG_EMBEDDING_API_VERSION=""api_version"" # For Azure OpenAI Users and if GRAPHRAG_API_VERSION is not set
# GRAPHRAG_EMBEDDING_API_ORGANIZATION=None
# GRAPHRAG_EMBEDDING_API_PROXY=None
# GRAPHRAG_EMBEDDING_DEPLOYMENT_NAME=None
# GRAPHRAG_EMBEDDING_MODEL=text-embedding-3-small
# GRAPHRAG_EMBEDDING_BATCH_SIZE=16
# GRAPHRAG_EMBEDDING_BATCH_MAX_TOKENS=8191
# GRAPHRAG_EMBEDDING_TARGET=required
# GRAPHRAG_EMBEDDING_SKIP=None
# GRAPHRAG_EMBEDDING_THREAD_COUNT=None
# GRAPHRAG_EMBEDDING_THREAD_STAGGER=50
# GRAPHRAG_EMBEDDING_CONCURRENT_REQUESTS=25
# GRAPHRAG_EMBEDDING_TPM=0
# GRAPHRAG_EMBEDDING_RPM=0
# GRAPHRAG_EMBEDDING_MAX_RETRIES=10
# GRAPHRAG_EMBEDDING_MAX_RETRY_WAIT=10
",300,['bbe409e13dd4d7bbd284976287a4feba'],"['599164aead034bc19446efacc77554d2' '0f564ebd53e940fba9d16674ac7bc038'
 '7deb75816e4f473480e0c79ae99b5bf4']",['ff25ce2e8ace4bdcb765c863b483852b']
2b777e3d591ce1511a03abd1a6d8dc73,"HRAG_EMBEDDING_THREAD_COUNT=None
# GRAPHRAG_EMBEDDING_THREAD_STAGGER=50
# GRAPHRAG_EMBEDDING_CONCURRENT_REQUESTS=25
# GRAPHRAG_EMBEDDING_TPM=0
# GRAPHRAG_EMBEDDING_RPM=0
# GRAPHRAG_EMBEDDING_MAX_RETRIES=10
# GRAPHRAG_EMBEDDING_MAX_RETRY_WAIT=10
# GRAPHRAG_EMBEDDING_SLEEP_ON_RATE_LIMIT_RECOMMENDATION=True

# Data Mapping Settings
# GRAPHRAG_INPUT_ENCODING=utf-8

# Data Chunking
# GRAPHRAG_CHUNK_SIZE=1200
# GRAPHRAG_CHUNK_OVERLAP=100
# GRAPHRAG_CHUNK_BY_COLUMNS=id

# Prompting Overrides
# GRAPHRAG_ENTITY_EXTRACTION_PROMPT_FILE=None
# GRAPHRAG_ENTITY_EXTRACTION_MAX_GLEANINGS=1
# GRAPHRAG_ENTITY_EXTRACTION_ENTITY_TYPES=organization,person,event,geo
# GRAPHRAG_SUMMARIZE_DESCRIPTIONS_PROMPT_FILE=None
# GRAPHRAG_SUMMARIZE_DESCRIPTIONS_MAX_LENGTH=500
# GRAPHRAG_CLAIM_EXTRACTION_DESCRIPTION=""Any claims or facts that could be relevant to threat analysis.""
# GRAPHRAG_CLAIM_EXTRACTION_PROMPT_FILE=None
# GRAPHRAG_CLAIM_EXTRACTION",300,['bbe409e13dd4d7bbd284976287a4feba'],"['3b040bcc19f14e04880ae52881a89c1c' 'de61b2670999433f807a6a1dc2b81e43'
 '6a1d83c9ce2b483dbd7de5ab3ae2487d' '6f3dd1fd6d7f4df4af0656ed0525c92e'
 '7f85b181f1184f77aeb3ea2155cf4027' 'd148b2b2033048618f1a090a492a40a5'
 '4d839a10353e4144a26563b0966721d5' '521a862bb196488389f17c0b0f4b6f4d'
 '22ea3328fb6343f4ad2862495ea27640' '3f9a2a2c1c0a424e8b4980ea9d48bdbe'
 'aa2ec452728a4703ae1bdabe85b6c079' 'c5ddb31e0a9c4b2683e4631283dd505b'
 '07d8eeb549044ac88d2e788c146a0ef1' '47df2815030c4f1c99facd5cf2482526'
 'ae521508bdc244f99c4fce4ab5214c79' '6315b4bf135c40358823ed7e4e4060e2'
 '33905debec1a45ecae1c65daac1d854c' 'bfbe904780fe47daad1a04126b12923c'
 '0614f00e932c4cd0b53928053811ebc1' '9ef487dd0b574b108c60a56d6a2f146c']","['6aedd377efbe4f07ae42e546996e7bfa' '1aa8484562784f378851c33843c89687'
 '62e8f5f04cd04384b246291cef3a9e4d' '2fea9c1856e54a91b79a9ce85755fbf5']"
cde833db73c46ca28f08e35195134441,"_GLEANINGS=1
# GRAPHRAG_ENTITY_EXTRACTION_ENTITY_TYPES=organization,person,event,geo
# GRAPHRAG_SUMMARIZE_DESCRIPTIONS_PROMPT_FILE=None
# GRAPHRAG_SUMMARIZE_DESCRIPTIONS_MAX_LENGTH=500
# GRAPHRAG_CLAIM_EXTRACTION_DESCRIPTION=""Any claims or facts that could be relevant to threat analysis.""
# GRAPHRAG_CLAIM_EXTRACTION_PROMPT_FILE=None
# GRAPHRAG_CLAIM_EXTRACTION_MAX_GLEANINGS=1
# GRAPHRAG_COMMUNITY_REPORT_PROMPT_FILE=None
# GRAPHRAG_COMMUNITY_REPORT_MAX_LENGTH=1500

# Storage
# GRAPHRAG_STORAGE_TYPE=file
# GRAPHRAG_STORAGE_CONNECTION_STRING=None
# GRAPHRAG_STORAGE_CONTAINER_NAME=None
# GRAPHRAG_STORAGE_BASE_DIR=None

# Cache
# GRAPHRAG_CACHE_TYPE=file
# GRAPHRAG_CACHE_CONNECTION_STRING=None
# GRAPHRAG_CACHE_CONTAINER_NAME=None
# GRAPHRAG_CACHE_BASE_DIR=None

# Reporting
# GRAPHRAG_REPORTING_TYPE=file
# GRAPHRAG_REPORTING_CONNECTION_STRING=None
# GRAPHRAG_REPORTING_CONTAINER_NAME=None
# GRAPHRAG_REPORTING_BASE_DIR=None

# Node2Vec Parameters
# GRAPHRAG_NODE2VEC_ENABLED=False
# GRAPHRAG_NODE2VEC_NUM_WALKS=10
# GRAPHR",300,['bbe409e13dd4d7bbd284976287a4feba'],"['66c3dffb7d7a4fa8bb6b48a22ca917a6' '6f3dd1fd6d7f4df4af0656ed0525c92e'
 '33905debec1a45ecae1c65daac1d854c' 'bfbe904780fe47daad1a04126b12923c'
 '0614f00e932c4cd0b53928053811ebc1' '9ef487dd0b574b108c60a56d6a2f146c'
 '4067269e7f6943cdbc299ce02b7eadbd' '094a736ba43c4da48c556437f47f88d1'
 '563c2af32bb3476299e9b24a646097ab' 'd59b49eb94ce442d89907e90c5d3a44e'
 '8ea7cef407df48098046551e303e1c64' '186e60d2176547bf84e5bf87bd16bb40'
 'e65017091c8d4c7daa45b6c8414e0465' 'a0f326b9597b49dda6563e9208316117'
 'bff3db70f9af4f2c87a93df48ecbb6bc' 'bf91f36307cb43e1ab1e967cb3ba8274'
 'cd58a8740ba54d86a77db9bb9544ef0d' 'e96d3475d43b42a781b297ae7e650afe'
 '1ce76a5547854d458878bd445f0ccbd6' '11e4325f59394ff1bc89892f79288702'
 '71743537a07c440ea1710a269da8b538' '1389192ce5464be6b3b5749bc9536709'
 'b349041c0be64c62b964ab1234e055e6']","['7823b4c5b3364c5f890d05f33a46bdde' '183f3a0b73ff41c5bb4a19fd7adf0c1d'
 '392e06f17d724484a9cfb85fe69aac50' '6f49e00cdac04a358173ecd40351ee00'
 '3fef96af4ec343da8c34f8b09518de8a' 'bd403eff654e42c997e5656a2b1c1a20'
 '5763d829837144f199fac2b490b38110' '234c6f1859f0405ab607f0be53e7b06c'
 '21800eab85b94d4880bcada7a60763e5']"
1b24101de07b1c195448240237b84b37,"_ASYNC_MODE=asyncio
# GRAPHRAG_ENCODING_MODEL=cl100k_base
# GRAPHRAG_MAX_CLUSTER_SIZE=10
# GRAPHRAG_ENTITY_RESOLUTION_ENABLED=False
# GRAPHRAG_SKIP_WORKFLOWS=None
# GRAPHRAG_UMAP_ENABLED=False



",63,['bbe409e13dd4d7bbd284976287a4feba'],"['6a054cb59fb44cf494b93988b5f88833' '5d29053f2ce74442aa1855b327ef3bb7'
 '7e40cd12839a4577a95e33d785147a31' '8fe58de8a04f4f8f807c77fb41829a3a'
 'a9f50861273c4bb697d868a9d049d392' 'be4820f29fd942b282049fa49697b4ed']",['e6ee83249adf4e14b98d1676b1c6b05f' 'b8bb28a7a9624b6d805be89adfe29eb5']
85e50a4d70697a2c4420e7a9fc82f22d,"Indexing Dataflow
The GraphRAG Knowledge Model
The knowledge model is a specification for data outputs that conform to our data-model definition. You can find these definitions in the python/graphrag/graphrag/model folder within the GraphRAG repository. The following entity types are provided. The fields here represent the fields that are text-embedded by default.

Document - An input document into the system. These either represent individual rows in a CSV or individual .txt file.
TextUnit - A chunk of text to analyze. The size of these chunks, their overlap, and whether they adhere to any data boundaries may be configured below. A common use case is to set CHUNK_BY_COLUMNS to id so that there is a 1-to-many relationship between documents and TextUnits instead of a many-to-many.
Entity - An entity extracted from a TextUnit. These represent people, places, events, or some other entity-model that you provide.
Relationship - A relationship between two entities. These are generated from the covariates.
Covariate - Extracted claim information, which contains statements about entities which may be time-bound.
Community Report - Once entities are generated, we perform hierarchical community detection on them and generate reports for each community in this hierarchy.
Node - This table contains layout information for rendered graph-views of the Entities and Documents which have been embedded and clustered.
The Default Configuration Workflow
Let's take a look at how the default-configuration workflow transforms text documents into the GraphRAG Knowledge Model",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['ab3a5a6713244fd595a1ace978c3d960' '6deaefe707f84b3dbda979dea0d095ac'
 'd053ea9432a24fb192e8d6aa993b0caa' 'a3e683d294ed42a28d60d09a36cbeb54'
 '39887ca8567141d5b857b87a2bca4086' '8df8563ab0394ee9a91b89dea7d59404'
 '12398f70065143839d812fd42ac4b2e7']","['ff9410fed5e64c04a875e040e3d182b2' '61f26f8850504d56a6b7cd764c33299d'
 'd4456fac0ada4b6fbe3cfee873403d00' 'd95acc24180c47caa34114627d501592'
 'f4753ab09adc42a9a52754e95440d4b9' '12f5a7c56b454a3d8aae97f65908f96b']"
493f38f41b89e767fc23d84e1fa5ba20," covariates.
Covariate - Extracted claim information, which contains statements about entities which may be time-bound.
Community Report - Once entities are generated, we perform hierarchical community detection on them and generate reports for each community in this hierarchy.
Node - This table contains layout information for rendered graph-views of the Entities and Documents which have been embedded and clustered.
The Default Configuration Workflow
Let's take a look at how the default-configuration workflow transforms text documents into the GraphRAG Knowledge Model. This page gives a general overview of the major steps in this process. To fully configure this workflow, check out the configuration documentation.

Phase 6: Network Visualization
Phase 5: Document Processing
Phase 4: Community Summarization
Phase 3: Graph Augmentation
Phase 2: Graph Extraction
Phase 1: Compose TextUnits
Umap Documents
Umap Entities
Nodes Table
Link to TextUnits
Document Embedding
Document Graph Creation
Document Tables
Community Summarization
Community Embedding
Community Tables
Community Detection
Graph Embedding
Augmented Graph Tables
Entity & Relationship Extraction
Entity & Relationship Summarization
Entity Resolution
Claim Extraction
Graph Tables
Chunk
Documents
Text Units
Embed
Dataflow Overview
Phase 1: Compose TextUnits
The first phase of the default-configuration workflow is to transform input documents into TextUnits. A TextUnit is a chunk of text that is used for our graph",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['353d91abc68648639d65a549e59b5cf3' '7b2472c5dd9949c58828413387b94659'
 'ab3a5a6713244fd595a1ace978c3d960' 'e1f524d4b9754ce2b64a0a4c8f73b854'
 '8df8563ab0394ee9a91b89dea7d59404' '12398f70065143839d812fd42ac4b2e7'
 '74d43d20f251441baf8e3db64fedca43' '1b7a22f76f7741e8b140bdc3d8856d76'
 'b823ba1bfe944fa9887edd8faf8a5f17' 'd0bfb473fdc64643954cdb4675e2f389'
 'a4db1b2a9c3e4d2d838725f8166c36b4' '8dae140578c841ae9373cbc607c4a6e6'
 'b215cc33cf40434f87f284ff8f3506a4' 'c1ff9d8e1b8745d6860c34ce26122d79'
 '9d1e6ca9ae8e4e068fb74631a633b20b' '1d7b0deca7674777bf76c163ac065845'
 '03afe9988f864c9fa501bfbf043f74c0' '4084f614af494fa8ab73095fb5b6b07b'
 '3ce25564af6e47f390a0b16b6f9433a1' '78213664d0eb45d1a9239ba4b85b10f7'
 '1226e4a4077b4b3a970db4d2509b590c' 'b4c7de7a824a4a71b9f52193d2f1a10d'
 'b609f1939dae4c7383c7d199bb3c7dc3' 'aeee2f443dfb4e3ea80af6ae1d9197ce'
 '8c46d37bc26e4d4dbd37d6ee26867bc6' '58a8fa7f29e347bdb9689b70b065a779'
 'fae3fe31deb141ab93143ac411f1eaaa' 'a2cb46c226b94831853a5d28c5d94b0a'
 'd3511ecd27cd4166bdb39e757e275300' 'de3b561f5cce4c83bccb39180e362c97'
 '5bfefaa0fce04002851733337bed714c' 'b5fed5609f154df58c6a9f74e55fc0ba']","['16911c51c65b42f8a2d04c05f45b2c58' '1161272728914953b568f384d7a9f2f1'
 'f09c82eb89944ae9846df82135123b90' 'e13eb574e885414b80f0b66992767ef2'
 '93f4140f654e41ccba908c6f6dc65f17' 'ded3a49efdf6479a991cad53d0758cf4'
 '816fceb7e1ca4b5d9277368f78e6ed80' '50539d4503a4495097f49a8ed83e2462'
 'd6f67aa7ef0e4a19bf5830e777aafea5' 'bbf61f9cd3e14f46a010d704e86be008'
 '5d34e587bd2f41dba285e9178f179577' '901b491be7344401b4544ff05e591a0e'
 '710ed70c346342ff81ccf205e30271bb' 'd78ce7696ff14234a544de945ffe40d6'
 'e9c7a1d505b14229afbbef7c0d04751e' '0970f08f3d1a4d638d44e2ccb9237382'
 '8f10c11ecb5142029869025521c73431' '6fce354faa104fe58ba8a565eb3c43f2'
 '20585e9a43c04375aa334e946e2dd144' '505ab840f6cc4fa6a839ebfe82d255ed'
 '0f642f63d4af4fc38298822bfc952719' '5cbced0ba7044b7490f520a436261c57']"
6f92ce3fcd05dd5697ded83586f7bc08,"
Community Summarization
Community Embedding
Community Tables
Community Detection
Graph Embedding
Augmented Graph Tables
Entity & Relationship Extraction
Entity & Relationship Summarization
Entity Resolution
Claim Extraction
Graph Tables
Chunk
Documents
Text Units
Embed
Dataflow Overview
Phase 1: Compose TextUnits
The first phase of the default-configuration workflow is to transform input documents into TextUnits. A TextUnit is a chunk of text that is used for our graph extraction techniques. They are also used as source-references by extracted knowledge items in order to empower breadcrumbs and provenance by concepts back to their original source tex.

The chunk size (counted in tokens), is user-configurable. By default this is set to 300 tokens, although we've had positive experience with 1200-token chunks using a single ""glean"" step. (A ""glean"" step is a follow-on extraction). Larger chunks result in lower-fidelity output and less meaningful reference texts; however, using larger chunks can result in much faster processing time.

The group-by configuration is also user-configurable. By default, we align our chunks to document boundaries, meaning that there is a strict 1-to-many relationship between Documents and TextUnits. In rare cases, this can be turned into a many-to-many relationship. This is useful when the documents are very short and we need several of them to compose a meaningful analysis unit (e.g. Tweets or a chat log",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['353d91abc68648639d65a549e59b5cf3' '7b2472c5dd9949c58828413387b94659'
 'e1f524d4b9754ce2b64a0a4c8f73b854' 'd0bfb473fdc64643954cdb4675e2f389'
 '1226e4a4077b4b3a970db4d2509b590c' 'b4c7de7a824a4a71b9f52193d2f1a10d'
 'b609f1939dae4c7383c7d199bb3c7dc3' 'aeee2f443dfb4e3ea80af6ae1d9197ce'
 '8c46d37bc26e4d4dbd37d6ee26867bc6' '58a8fa7f29e347bdb9689b70b065a779'
 'fae3fe31deb141ab93143ac411f1eaaa' 'a2cb46c226b94831853a5d28c5d94b0a'
 'd3511ecd27cd4166bdb39e757e275300' 'de3b561f5cce4c83bccb39180e362c97'
 '5bfefaa0fce04002851733337bed714c' 'b5fed5609f154df58c6a9f74e55fc0ba'
 '91ae5251eaab4c08afe6cd4cbefcaa6b']","['07d501edd4614e1d9d08d01b702688a3' '16911c51c65b42f8a2d04c05f45b2c58'
 'fc3f77f29574410d991a2aa333950bf6' 'a102d091986749ef90b45d411e707bef'
 '32e343c0ae454660bdfcd1d3133baf0a' 'e38eb1698900424bb7392a74ff0f3351'
 '0f642f63d4af4fc38298822bfc952719' 'e017ad1f09b049a7ad41d5a11dc1e3d9'
 'd45dea925f8d4e7e93d0e17317001eec' '6ef76e963a564dbe9c9feff4f8ce1683']"
81f57cf867ea246ad9a6e794ed613375," meaningful reference texts; however, using larger chunks can result in much faster processing time.

The group-by configuration is also user-configurable. By default, we align our chunks to document boundaries, meaning that there is a strict 1-to-many relationship between Documents and TextUnits. In rare cases, this can be turned into a many-to-many relationship. This is useful when the documents are very short and we need several of them to compose a meaningful analysis unit (e.g. Tweets or a chat log)

Each of these text-units are text-embedded and passed into the next phase of the pipeline.

Document 1
TextUnit 1
TextUnit 2
Document 2
TextUnit 3
TextUnit 4
Documents into Text Chunks
Phase 2: Graph Extraction
In this phase, we analyze each text unit and extract our graph primitives: Entities, Relationships, and Claims. Entities and Relationships are extracted at once in our entity_extract verb, and claims are extracted in our claim_extract verb. Results are then combined and passed into following phases of the pipeline.

TextUnit
Graph Extraction
Graph Summarization
Entity Resolution
Claim Extraction
Graph Extraction
Entity & Relationship Extraction
In this first step of graph extraction, we process each text-unit in order to extract entities and relationships out of the raw text using the LLM. The output of this step is a subgraph-per-TextUnit containing a list of entities with a name, type, and",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['6deaefe707f84b3dbda979dea0d095ac' 'd053ea9432a24fb192e8d6aa993b0caa'
 'a3e683d294ed42a28d60d09a36cbeb54' '39887ca8567141d5b857b87a2bca4086'
 '8dae140578c841ae9373cbc607c4a6e6' 'bbdd53a15e99452a9deff05d1de2d965']","['61f26f8850504d56a6b7cd764c33299d' 'f8fd3fcf650b47b2b1692506ebe77762'
 '95f79ff0b8a34080ae2ac8448ce561f1' '8733d4602c084e1cab1384dde0306abf'
 'fd8c8b7e3b9248abb1d8cb8958ab86d3']"
10d01d36390b307a63fd5bc97d8682c0," extracted in our claim_extract verb. Results are then combined and passed into following phases of the pipeline.

TextUnit
Graph Extraction
Graph Summarization
Entity Resolution
Claim Extraction
Graph Extraction
Entity & Relationship Extraction
In this first step of graph extraction, we process each text-unit in order to extract entities and relationships out of the raw text using the LLM. The output of this step is a subgraph-per-TextUnit containing a list of entities with a name, type, and description, and a list of relationships with a source, target, and description.

These subgraphs are merged together - any entities with the same name and type are merged by creating an array of their descriptions. Similarly, any relationships with the same source and target are merged by creating an array of their descriptions.

Entity & Relationship Summarization
Now that we have a graph of entities and relationships, each with a list of descriptions, we can summarize these lists into a single description per entity and relationship. This is done by asking the LLM for a short summary that captures all of the distinct information from each description. This allows all of our entities and relationships to have a single concise description.

Entity Resolution (Not Enabled by Default)
The final step of graph extraction is to resolve any entities that represent the same real-world entity but but have different names. Since this is done via LLM, and we don't want to lose information, we want to take a conservative, non-destructive approach to this",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['e1f524d4b9754ce2b64a0a4c8f73b854' 'd053ea9432a24fb192e8d6aa993b0caa'
 '8dae140578c841ae9373cbc607c4a6e6' 'fae3fe31deb141ab93143ac411f1eaaa'
 '532bf54d5a924ff48aee254970efb914']","['f8fd3fcf650b47b2b1692506ebe77762' '039594428123415f95deb246f5097169'
 '8123eee04a3a4c779f03bdb85de99f9f']"
d44248ff7b7bfd969a7208eb3d6e2a78," This is done by asking the LLM for a short summary that captures all of the distinct information from each description. This allows all of our entities and relationships to have a single concise description.

Entity Resolution (Not Enabled by Default)
The final step of graph extraction is to resolve any entities that represent the same real-world entity but but have different names. Since this is done via LLM, and we don't want to lose information, we want to take a conservative, non-destructive approach to this.

Our current implementation of Entity Resolution, however, is destructive. It will provide the LLM with a series of entities and ask it to determine which ones should be merged. Those entities are then merged together into a single entity and their relationships are updated.

We are currently exploring other entity resolution techniques. In the near future, entity resolution will be executed by creating an edge between entity variants indicating that the entities have been resolved by the indexing engine. This will allow for end-users to undo indexing-side resolutions, and add their own non-destructive resolutions using a similar process.

Claim Extraction & Emission
Finally, as an independent workflow, we extract claims from the source TextUnits. These claims represent positive factual statements with an evaluated status and time-bounds. These are emitted as a primary artifact called Covariates.

Phase 3: Graph Augmentation
Now that we have a usable graph of entities and relationships, we want to understand their community structure and augment the graph with additional information. This is",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['adf4ee3fbe9b4d0381044838c4f889c8' 'e1f524d4b9754ce2b64a0a4c8f73b854'
 'a4db1b2a9c3e4d2d838725f8166c36b4' 'fae3fe31deb141ab93143ac411f1eaaa'
 '2489232bd2bb492babe00617e7290282']","['dde2742459c24fb4a91172aa5c1a7620' '323979a67d79498fa271acdf8cd1a0c2'
 'cd6ae38a5a6742899d14f4a064f42c19' '6129d90c83194bcfaede9ff00a011297']"
a6bcb4514cb6de67e3d74ad0ea62452d,", and add their own non-destructive resolutions using a similar process.

Claim Extraction & Emission
Finally, as an independent workflow, we extract claims from the source TextUnits. These claims represent positive factual statements with an evaluated status and time-bounds. These are emitted as a primary artifact called Covariates.

Phase 3: Graph Augmentation
Now that we have a usable graph of entities and relationships, we want to understand their community structure and augment the graph with additional information. This is done in two steps: Community Detection and Graph Embedding. These give us explicit (communities) and implicit (embeddings) ways of understanding the topological structure of our graph.

Leiden Hierarchical Community Detection
Node2Vec Graph Embedding
Graph Table Emission
Graph Augmentation
Community Detection
In this step, we generate a hierarchy of entity communities using the Hierarchical Leiden Algorithm. This method will apply a recursive community-clustering to our graph until we reach a community-size threshold. This will allow us to understand the community structure of our graph and provide a way to navigate and summarize the graph at different levels of granularity.

Graph Embedding
In this step, we generate a vector representation of our graph using the Node2Vec algorithm. This will allow us to understand the implicit structure of our graph and provide an additional vector-space in which to search for related concepts during our query phase.

Graph Tables Emission
Once our graph augmentation steps are complete, the final Entities and",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['7b2472c5dd9949c58828413387b94659' 'b609f1939dae4c7383c7d199bb3c7dc3'
 '2489232bd2bb492babe00617e7290282' 'd2ed972353af4d1db74702638bfdbb58'
 '575befc8d64c47eb95af8b1096e02963' 'd6e6366617e04b0ba6732fd1d2d76429']","['4f847eb72cbe48678d5634dcf93fc0e2' '855c57eecf2a45c7aab02ff1ac36938d'
 '1c8bad73fda646f8b3f413e432f0e351' '7e75749d13d24321b8b10c5be0138805']"
5b2968b8f1c891d47ecbe641c3391663," threshold. This will allow us to understand the community structure of our graph and provide a way to navigate and summarize the graph at different levels of granularity.

Graph Embedding
In this step, we generate a vector representation of our graph using the Node2Vec algorithm. This will allow us to understand the implicit structure of our graph and provide an additional vector-space in which to search for related concepts during our query phase.

Graph Tables Emission
Once our graph augmentation steps are complete, the final Entities and Relationships tables are emitted after their text fields are text-embedded.

Phase 4: Community Summarization
Generate Community Reports
Summarize Community Reports
Community Embedding
Community Tables Emission
Community Summarization
At this point, we have a functional graph of entities and relationships, a hierarchy of communities for the entities, as well as node2vec embeddings.

Now we want to build on the communities data and generate reports for each community. This gives us a high-level understanding of the graph at several points of graph granularity. For example, if community A is the top-level community, we'll get a report about the entire graph. If the community is lower-level, we'll get a report about a local cluster.

Generate Community Reports
In this step, we generate a summary of each community using the LLM. This will allow us to understand the distinct information contained within each community and provide a scoped understanding of the graph, from either a high-level or a low-level perspective",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['0adb2d9941f34ef7b2f7743cc6225844' '9ab48505fb1b487babd0d1f6d3a3f980'
 'd0bfb473fdc64643954cdb4675e2f389' 'b609f1939dae4c7383c7d199bb3c7dc3'
 'd6e6366617e04b0ba6732fd1d2d76429' 'b4c4354c8edb40db984942799fe0c8b1']","['f770bc07cecf4aba8fe2d2c33fdc5542' 'b3d3e8ba2ede4574a0498f082f0c15ae'
 '8686013390614eca9116ccbab27431d7' '6ee77949c94d4906bd98c24341fdfa03'
 'd06f506604b249feb423915db282ed75']"
3e292d936b7efa377ba9530456cfd888," the graph at several points of graph granularity. For example, if community A is the top-level community, we'll get a report about the entire graph. If the community is lower-level, we'll get a report about a local cluster.

Generate Community Reports
In this step, we generate a summary of each community using the LLM. This will allow us to understand the distinct information contained within each community and provide a scoped understanding of the graph, from either a high-level or a low-level perspective. These reports contain an executive overview and reference the key entities, relationships, and claims within the community sub-structure.

Summarize Community Reports
In this step, each community report is then summarized via the LLM for shorthand use.

Community Embedding
In this step, we generate a vector representation of our communities by generating text embeddings of the community report, the community report summary, and the title of the community report.

Community Tables Emission
At this point, some bookkeeping work is performed and we emit the Communities and CommunityReports tables.

Phase 5: Document Processing
In this phase of the workflow, we create the Documents table for the knowledge model.

Augment
Link to TextUnits
Avg. Embedding
Document Table Emission
Document Processing
Augment with Columns (CSV Only)
If the workflow is operating on CSV data, you may configure your workflow to add additional fields to Documents output. These fields should exist on the incoming CSV tables. Details about configuring this",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['9ab48505fb1b487babd0d1f6d3a3f980' 'b823ba1bfe944fa9887edd8faf8a5f17'
 '03afe9988f864c9fa501bfbf043f74c0' '1226e4a4077b4b3a970db4d2509b590c'
 '170507a64973429f818067b80506d428' 'fd9b298e6aea4685bbb2064b05fcda79'
 'eeecb159cc8a4c8989f8da0f3df09f2a' '70f22b1d7336492dbade94b8edefe457'
 '66e098dc431146e19fc4bc2ea37efbd9']","['1c97184ce5ea4049be417a3fd125357b' 'ecacbf62b81d485396a56e1730e75a04'
 'ba0ad1bcf02b4928a1b7ff7b23acdd6f']"
827fd80da359cf05b091c24e465dd05d," performed and we emit the Communities and CommunityReports tables.

Phase 5: Document Processing
In this phase of the workflow, we create the Documents table for the knowledge model.

Augment
Link to TextUnits
Avg. Embedding
Document Table Emission
Document Processing
Augment with Columns (CSV Only)
If the workflow is operating on CSV data, you may configure your workflow to add additional fields to Documents output. These fields should exist on the incoming CSV tables. Details about configuring this can be found in the configuration documentation.

Link to TextUnits
In this step, we link each document to the text-units that were created in the first phase. This allows us to understand which documents are related to which text-units and vice-versa.

Document Embedding
In this step, we generate a vector representation of our documents using an average embedding of document slices. We re-chunk documents without overlapping chunks, and then generate an embedding for each chunk. We create an average of these chunks weighted by token-count and use this as the document embedding. This will allow us to understand the implicit relationship between documents, and will help us generate a network representation of our documents.

Documents Table Emission
At this point, we can emit the Documents table into the knowledge Model.

Phase 6: Network Visualization
In this phase of the workflow, we perform some steps to support network visualization of our high-dimensional vector spaces within our existing graphs. At this point there are two logical graphs at",300,['d3bd620a40d6cd4be5e0136357eb62da'],"['b823ba1bfe944fa9887edd8faf8a5f17' '03afe9988f864c9fa501bfbf043f74c0'
 '4084f614af494fa8ab73095fb5b6b07b' 'd3511ecd27cd4166bdb39e757e275300'
 'fd9b298e6aea4685bbb2064b05fcda79' 'eeecb159cc8a4c8989f8da0f3df09f2a'
 '70f22b1d7336492dbade94b8edefe457' '66e098dc431146e19fc4bc2ea37efbd9'
 '932e213c57134098a07073febd51dcc2' '9593428ad36746ae8af6d8ce639834ef'
 '1bcaeb58479d42a6963a073c09f3f397' '1ef0c1c59ce946668ccf1a6a4f5ab7cc']","['0e3c66c25d7e43a7960c37d28315e5d8' 'a0e0d5b7db9f4efcb5277856db799775'
 '3f85dab93736440f9776020b6410aa9b' 'e36a0e3901864a7eaa5f5ad4280a6471'
 '05bfaf60aa304a288e6789443bd6fd6c' '6097e047a74d41ca996a0b7949ef6f0e']"
56506e2d064c0732efa3cf418057edfd," these chunks weighted by token-count and use this as the document embedding. This will allow us to understand the implicit relationship between documents, and will help us generate a network representation of our documents.

Documents Table Emission
At this point, we can emit the Documents table into the knowledge Model.

Phase 6: Network Visualization
In this phase of the workflow, we perform some steps to support network visualization of our high-dimensional vector spaces within our existing graphs. At this point there are two logical graphs at play: the Entity-Relationship graph and the Document graph.

Umap Documents
Umap Entities
Nodes Table Emission
Network Visualization Workflows
For each of the logical graphs, we perform a UMAP dimensionality reduction to generate a 2D representation of the graph. This will allow us to visualize the graph in a 2D space and understand the relationships between the nodes in the graph. The UMAP embeddings are then emitted as a table of Nodes. The rows of this table include a discriminator indicating whether the node is a document or an entity, and the UMAP coordinates.",219,['d3bd620a40d6cd4be5e0136357eb62da'],"['c1ff9d8e1b8745d6860c34ce26122d79' '9d1e6ca9ae8e4e068fb74631a633b20b'
 '1bcaeb58479d42a6963a073c09f3f397' '1ef0c1c59ce946668ccf1a6a4f5ab7cc'
 'd734746e3d6146f780af91827e578dfd' '21ed913271614cbeb1b754cdbbef13af'
 '1505dfebbfb04652b0ba57de1a251d67' '907ec65076e5494a8631efffb81b3178']","['59b21508be904875af22b5c1cfdcd211' '4b0efcd54efc40e8a884ac6c31deada2'
 'e257439ce5be47a88faaeb0fe01bc4a1' '067b9486d59f45d2963235220f723a41'
 '87c46c7ead5447bc8309ab116a316959' 'f607d795f00347109cab3b2370c414f7']"
2011f03f21e526cf9277c27bf3e68242," a discriminator indicating whether the node is a document or an entity, and the UMAP coordinates.",19,['d3bd620a40d6cd4be5e0136357eb62da'],['2dc7f6b230db452190a09643ca3d5ec0' 'c20ecfc93b3a4875ade5c92cfe4b94a1'],['8f0610c89e9f42e9b8c3d8a947fa2852']
f239de6498e0f471bf418974c00f1e36,"Indexer CLI
The GraphRAG indexer CLI allows for no-code usage of the GraphRAG Indexer.

python -m graphrag.index --verbose --root </workspace/project/root> --config <custom_config.yml>
--resume <timestamp> --reporter <rich|print|none> --emit json,csv,parquet
--nocache

CLI Arguments
--verbose - Adds extra logging information during the run.
--root <data-project-dir> - the data root directory. This should contain an input directory with the input data, and an .env file with environment variables. These are described below.
--init - This will initialize the data project directory at the specified root with bootstrap configuration and prompt-overrides.
--resume <output-timestamp> - if specified, the pipeline will attempt to resume a prior run. The parquet files from the prior run will be loaded into the system as inputs, and the workflows that generated those files will be skipped. The input value should be the timestamped output folder, e.g. ""20240105-143721"".
--config <config_file.yml> - This will opt-out of the Default Configuration mode and execute a custom configuration. If this is used, then none of the environment-variables below will apply.
--reporter <reporter> - This will specify the progress reporter to use. The default is rich. Valid values are rich, print, and none.
--emit <types> - This specifies the table output",300,['e9ffa90c42f0891629fcbd2a857da299'],"['838c4498bc3c437f8d65428b580766a2' '4bc7dc91ede345dfb63d7d4f7ac3554f'
 '0b2b815c9f834aaaac0c341097def9ba' '424ae71c56024094a02e6fd9bfcfbb04'
 '400d10f2ee1d49be9a66efa34dada0e6' '91deb9f152264e958d106d481ff2e1ee'
 '586cf02da9494088aed9b3419725638f' '229d85a2783e4a2991f17d2ab5750af7'
 'b7f97d1909a3433abef8ca8e9334fafa']","['245a56f01d1b48a7b4d88ed0e354155a' '75ef3591790a49748154ddbba20e9cdf'
 '58b7f26cb17b4b2283d3cacbaed15cfc' '277cdf13617e47ca883b949f495bc243'
 '26080c121c9645b2bb258e4d61d47672' 'ee91a06f13b4495f95c800a0c7329ef7'
 '6ed8b67be79242e98aa1b9283431d5df' '40c2425cb1c34c1591f7cb89f9f5e0bf']"
919cb44d9688a14bf48fa7c98163ed81," be the timestamped output folder, e.g. ""20240105-143721"".
--config <config_file.yml> - This will opt-out of the Default Configuration mode and execute a custom configuration. If this is used, then none of the environment-variables below will apply.
--reporter <reporter> - This will specify the progress reporter to use. The default is rich. Valid values are rich, print, and none.
--emit <types> - This specifies the table output formats the pipeline should emit. The default is parquet. Valid values are parquet, csv, and json, comma-separated.
--nocache - This will disable the caching mechanism. This is useful for debugging and development, but should not be used in production.",153,['e9ffa90c42f0891629fcbd2a857da299'],"['0fc15cc3b44c4142a770feb4c037a6f7' 'b7fdfffc38b94bf7872eabe9b022c8fd'
 '6242e0c237a348908d0256ea790a0211' '7cc9f26737e1442595e53253e98015ef'
 '1868fec1493643208dbdcad7bc97dfa0']","['829e64159ae04301982e88e93a2f0e49' 'cf37d3d4bc154f65b3d79c831c587763'
 '4b4fce341d554012bc73d7886860749e' '9f6e7a08bd814d19b45fac58928027f8']"
60df16c009594c15c4ead6125e1453ce,"GRAPHRAG_GLOBAL_SEARCH_CONCURRENCY - Default: 32
",15,['217bd625ebb21f3343be31530abac558'],['af1d0fec22114a3398b8016f5225f9ed'],
9b52298451f8936974ab08a129b0b92e," within the token limit of the con
text window, proceed as for leaf-level communities and summarize all element summaries
 within the community. Otherwise, rank sub-communities in decreasing order of element
 summary tokens and iteratively substitute sub-community summaries (shorter) for their
 associated element summaries (longer) until fit within the context window is achieved.
2.6 Community Summaries ‚Üí Community Answers ‚Üí Global Answer
 Given a user query, the community summaries generated in the previous step can be used to generate
 a final answer in a multi-stage process. The hierarchical nature of the community structure also
 means that questions can be answered using the community summaries from different levels, raising
 the question of whether a particular level in the hierarchical community structure offers the best
 balance of summary detail and scope for general sensemaking questions (evaluated in section 3).
 For a given community level, the global answer to any user query is generated as follows:
 ‚Ä¢ Prepare community summaries. Community summaries are randomly shuffled and divided
 into chunks of pre-specified token size. This ensures relevant information is distributed
 across chunks, rather than concentrated (and potentially lost) in a single context window.
 ‚Ä¢ Map community answers. Generate intermediate answers in parallel, one for each chunk.
 The LLM is also asked to generate a score between 0-100 indicating how helpful the gen
erated answer is in answering the target question. Answers with score 0 are filtered out.
 ‚Ä¢ Reduce to global answer. Intermediate community",300,['78b4407b9fac94c6e276c9a6a5cd0745'],['32ee140946e5461f9275db664dc541a5'],
b0505e11596cadd9890fef049c29473c," you have a config file you can run the pipeline using the CLI or the Python API.

Usage
CLI
# Via Poetry
poetry run poe cli --root <data_root> # default config mode
poetry run poe cli --config your_pipeline.yml # custom config mode

# Via Node
yarn run:index --root <data_root> # default config mode
yarn run:index --config your_pipeline.yml # custom config mode

Python API
from graphrag.index import run_pipeline
from graphrag.index.config import PipelineWorkflowReference

workflows: list[PipelineWorkflowReference] = [
    PipelineWorkflowReference(
        steps=[
            {
                # built-in verb
                ""verb"": ""derive"",  # https://github.com/microsoft/datashaper/blob/main/python/datashaper/datashaper/engine/verbs/derive.py
                ""args"": {
                    ""column1"": ""col1"",  # from above
                    ""column2"": ""col2"",  # from above
                    ""to"": ""col_multiplied"",  # new column name
                    ""operator"": ""*"",  # multiply the two columns
                },
                # Since we're trying to act on the default input, we don't need explicitly to specify an input
            }
        ]
    ),
]

dataset = pd.DataFrame([{""col1"": 2, ""col2"": 4}, {""col1"": 5, ""col2"": 10}])
",300,['a75a18ec511e6735c719807c25a3b3d7'],"['4119fd06010c494caa07f439b333f4c5' 'f7e11b0e297a44a896dc67928368f600'
 '859dedcc3736439a8a563419f16cb3d8' '0fc15cc3b44c4142a770feb4c037a6f7'
 'a24e9df02e1b4b43bf6324b039e28285' 'ab3a5a6713244fd595a1ace978c3d960'
 '02a88c0d128e4586b2f1f64329786d3c' '1ca41537c47c4752a17a44d1d7086d96']",
9f2cd3d789fd49f220d4cda6b9e8048c," a config file, which we recommend, or environment variables.

First let's get a sample dataset ready:

mkdir -p ./ragtest/input

Now let's get a copy of A Christmas Carol by Charles Dickens from a trusted source

curl https://www.gutenberg.org/cache/epub/24022/pg24022.txt > ./ragtest/input/book.txt

Next we'll inject some required config variables:

Set Up Your Workspace Variables
First let's make sure to setup the required environment variables. For details on these environment variables, and what environment variables are available, see the variables documentation.

To initialize your workspace, let's first run the graphrag.index --init command. Since we have already configured a directory named .ragtest` in the previous step, we can run the following command:

python -m graphrag.index --init --root ./ragtest

This will create two files: .env and settings.yaml in the ./ragtest directory.

.env contains the environment variables required to run the GraphRAG pipeline. If you inspect the file, you'll see a single environment variable defined, GRAPHRAG_API_KEY=<API_KEY>. This is the API key for the OpenAI API or Azure OpenAI endpoint. You can replace this with your own API key.
settings.yaml contains the settings for the pipeline. You can modify this file to change the settings for the pipeline.
OpenAI and Azure OpenAI
To run in OpenAI mode, just make sure to update the value",300,['b60327cd0428bd92d6c875c7541e3c6e'],"['0fc15cc3b44c4142a770feb4c037a6f7' 'cfb915c95caf41c6a25e99a9f37f03a2'
 '8815ed80f9b741dbb458d902024f34a4' 'dddb831546354e088d29aebd154e3a31'
 '005d2154da754b21adcd90ac921bd5f7' '711ba818354546cea69f1532b92a2f26'
 '5c4d8a8f9c104176b87d2bfdf04ae0bd']",
763b51b68ecc9b69bc8014cf6f59fd33," The type of storage to use. Options are file, memory, and blob
base_dir (type: file only): The base directory to store the data in. This is relative to the config root.
connection_string (type: blob only): The connection string to use for blob storage.
container_name (type: blob only): The container to use for blob storage.
> cache
This configuration allows you define the cache strategy for the pipeline.

type: The type of cache to use. Options are file and memory, and blob.
base_dir (type: file only): The base directory to store the cache in. This is relative to the config root.
connection_string (type: blob only): The connection string to use for blob storage.
container_name (type: blob only): The container to use for blob storage.
> reporting
This configuration allows you define the reporting strategy for the pipeline. Report files are generated artifacts that summarize the performance metrics of the pipeline and emit any error messages.

type: The type of reporting to use. Options are file, memory, and blob
base_dir (type: file only): The base directory to store the reports in. This is relative to the config root.
connection_string (type: blob only): The connection string to use for blob storage.
container_name (type: blob only): The container to use for blob storage.
> workflows
This configuration section defines the workflow DAG for the pipeline. Here we define an array of workflows and express their inter",300,['bbe409e13dd4d7bbd284976287a4feba'],['d034e4fd8ac849278e658daad1a1f033'],
9aff9243c57cabca574b35438bf31a50,"HRAG_LLM_DEPLOYMENT_NAME=None
# GRAPHRAG_LLM_MODEL=gpt-4-turbo-preview
# GRAPHRAG_LLM_MAX_TOKENS=4000
# GRAPHRAG_LLM_REQUEST_TIMEOUT=180
# GRAPHRAG_LLM_THREAD_COUNT=50
# GRAPHRAG_LLM_THREAD_STAGGER=0.3
# GRAPHRAG_LLM_CONCURRENT_REQUESTS=25
# GRAPHRAG_LLM_TPM=0
# GRAPHRAG_LLM_RPM=0
# GRAPHRAG_LLM_MAX_RETRIES=10
# GRAPHRAG_LLM_MAX_RETRY_WAIT=10
# GRAPHRAG_LLM_SLEEP_ON_RATE_LIMIT_RECOMMENDATION=True

# Text Embedding Settings
# GRAPHRAG_EMBEDDING_TYPE=openai_embedding
GRAPHRAG_EMBEDDING_API_KEY=""your_api_key"" # If GRAPHRAG_API_KEY is not set
GRAPHRAG_EMBEDDING_API_BASE=""http://<domain>.openai.azure.com""  # For Azure OpenAI Users and if GRAPHRAG_API_BASE is not set
GRAPHRAG_EMBEDDING_API_VERSION=""api_version"" # For Azure OpenAI Users and if GRAPHRAG_API_VERSION is not set
# GRAPHRAG_EMBEDDING_API_ORGANIZATION=None
# GRAPHR",300,['bbe409e13dd4d7bbd284976287a4feba'],"['bf4e255cdac94ccc83a56435a5e4b075' '482027a59f32484c9c44fd700615c1b6'
 'cec95bf17e7e4c939b56c9c6f402a29f' '599164aead034bc19446efacc77554d2'
 '3e460d9f011d4b0b9ccaae7b6a5202de' '9d98dece22eb401aa1a5ce9c88c603f0'
 '81446ea789b24eaf9eab02dc07c3d984' '79f4b1c1b2be4cf7aa828846e20a4eb6'
 'de04830d6e414fd5b39a9e90769d9452' '69db426b97714835bf4937180774787a'
 '9c7bc862339d4a5bb21ee5154d9b33bb' '17bad53a0ebe4569839e5e151ff78593'
 '53d98f08e7c74158b7318357b6c660b3' 'cd601f77419c403889aadeee591915b5'
 '0f564ebd53e940fba9d16674ac7bc038']",
79d4b8574baf3734b60b969b66326b2e,"APHRAG_CACHE_CONTAINER_NAME=None
# GRAPHRAG_CACHE_BASE_DIR=None

# Reporting
# GRAPHRAG_REPORTING_TYPE=file
# GRAPHRAG_REPORTING_CONNECTION_STRING=None
# GRAPHRAG_REPORTING_CONTAINER_NAME=None
# GRAPHRAG_REPORTING_BASE_DIR=None

# Node2Vec Parameters
# GRAPHRAG_NODE2VEC_ENABLED=False
# GRAPHRAG_NODE2VEC_NUM_WALKS=10
# GRAPHRAG_NODE2VEC_WALK_LENGTH=40
# GRAPHRAG_NODE2VEC_WINDOW_SIZE=2
# GRAPHRAG_NODE2VEC_ITERATIONS=3
# GRAPHRAG_NODE2VEC_RANDOM_SEED=597832

# Data Snapshotting
# GRAPHRAG_SNAPSHOT_GRAPHML=False
# GRAPHRAG_SNAPSHOT_RAW_ENTITIES=False
# GRAPHRAG_SNAPSHOT_TOP_LEVEL_NODES=False

# Miscellaneous Settings
# GRAPHRAG_ASYNC_MODE=asyncio
# GRAPHRAG_ENCODING_MODEL=cl100k_base
# GRAPHRAG_MAX_CLUSTER_SIZE=10
# GRAPHRAG_ENTITY_RESOLUTION_ENABLED=False
# GRAPHRAG_SKIP_WORKFLOWS=None
# GRAPHRAG_UMAP_ENABLED=False



",263,['bbe409e13dd4d7bbd284976287a4feba'],"['cd58a8740ba54d86a77db9bb9544ef0d' 'e96d3475d43b42a781b297ae7e650afe'
 '1ce76a5547854d458878bd445f0ccbd6' '11e4325f59394ff1bc89892f79288702'
 '71743537a07c440ea1710a269da8b538' '1389192ce5464be6b3b5749bc9536709'
 'b349041c0be64c62b964ab1234e055e6' '969e1ea0b1e443a68e9a65dfef91d161'
 '8e09e7cfea7d405db8b22ae2f836ccb1' '490583524d394bf79289c5fe34f7dcf1'
 'd7db38bb599c42cab7066f3fdd282282' 'efd87a59d01e47c8adc02f63ef2c5c3e'
 '80e3ce3de41e4601823a333e22b7bb3f' '50eabc166e8944a49197e79c32f27597'
 '5197a3fb02ef4677abd1900aa87e4efa' '887f444240bb474da23cdfb6abf7a998'
 '5d29053f2ce74442aa1855b327ef3bb7' '7e40cd12839a4577a95e33d785147a31'
 '8fe58de8a04f4f8f807c77fb41829a3a' 'a9f50861273c4bb697d868a9d049d392'
 'be4820f29fd942b282049fa49697b4ed']",
